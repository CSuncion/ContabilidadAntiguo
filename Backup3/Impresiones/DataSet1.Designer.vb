'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.9164
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSet1"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSet1
    Inherits Global.System.Data.DataSet
    
    Private tableFiltroTabla As FiltroTablaDataTable
    
    Private tableUsuario As UsuarioDataTable
    
    Private tableAuxiliar As AuxiliarDataTable
    
    Private tableDiasPorMes As DiasPorMesDataTable
    
    Private tableTipoCambio As TipoCambioDataTable
    
    Private tableReportePersonalActivoHoras As ReportePersonalActivoHorasDataTable
    
    Private tableRegContab As RegContabDataTable
    
    Private tableConceptos As ConceptosDataTable
    
    Private tablePerfil As PerfilDataTable
    
    Private tableCodigoInexistente As CodigoInexistenteDataTable
    
    Private tablePlanilla As PlanillaDataTable
    
    Private tableVistaSaldos As VistaSaldosDataTable
    
    Private tableSaldosADigitos As SaldosADigitosDataTable
    
    Private tableMovimientoDetalle As MovimientoDetalleDataTable
    
    Private tableBalances As BalancesDataTable
    
    Private tableAnexos As AnexosDataTable
    
    Private tablePcge As PcgeDataTable
    
    Private tableDiarioSimplificado As DiarioSimplificadoDataTable
    
    Private tableFormatoContable As FormatoContableDataTable
    
    Private tableBalanceGeneral As BalanceGeneralDataTable
    
    Private tableGananciaPerdida As GananciaPerdidaDataTable
    
    Private tableGananciaPerdida1 As GananciaPerdida1DataTable
    
    Private tableSaldoBanco As SaldoBancoDataTable
    
    Private tableFlujoCaja As FlujoCajaDataTable
    
    Private tableGasto As GastoDataTable
    
    Private tableDiferenciaCambio As DiferenciaCambioDataTable
    
    Private tableGastoXMes As GastoXMesDataTable
    
    Private tableGananciaPerdidaTotal As GananciaPerdidaTotalDataTable
    
    Private tableDaoResumenDetalle As DaoResumenDetalleDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("FiltroTabla")) Is Nothing) Then
                MyBase.Tables.Add(New FiltroTablaDataTable(ds.Tables("FiltroTabla")))
            End If
            If (Not (ds.Tables("Usuario")) Is Nothing) Then
                MyBase.Tables.Add(New UsuarioDataTable(ds.Tables("Usuario")))
            End If
            If (Not (ds.Tables("Auxiliar")) Is Nothing) Then
                MyBase.Tables.Add(New AuxiliarDataTable(ds.Tables("Auxiliar")))
            End If
            If (Not (ds.Tables("DiasPorMes")) Is Nothing) Then
                MyBase.Tables.Add(New DiasPorMesDataTable(ds.Tables("DiasPorMes")))
            End If
            If (Not (ds.Tables("TipoCambio")) Is Nothing) Then
                MyBase.Tables.Add(New TipoCambioDataTable(ds.Tables("TipoCambio")))
            End If
            If (Not (ds.Tables("ReportePersonalActivoHoras")) Is Nothing) Then
                MyBase.Tables.Add(New ReportePersonalActivoHorasDataTable(ds.Tables("ReportePersonalActivoHoras")))
            End If
            If (Not (ds.Tables("RegContab")) Is Nothing) Then
                MyBase.Tables.Add(New RegContabDataTable(ds.Tables("RegContab")))
            End If
            If (Not (ds.Tables("Conceptos")) Is Nothing) Then
                MyBase.Tables.Add(New ConceptosDataTable(ds.Tables("Conceptos")))
            End If
            If (Not (ds.Tables("Perfil")) Is Nothing) Then
                MyBase.Tables.Add(New PerfilDataTable(ds.Tables("Perfil")))
            End If
            If (Not (ds.Tables("CodigoInexistente")) Is Nothing) Then
                MyBase.Tables.Add(New CodigoInexistenteDataTable(ds.Tables("CodigoInexistente")))
            End If
            If (Not (ds.Tables("Planilla")) Is Nothing) Then
                MyBase.Tables.Add(New PlanillaDataTable(ds.Tables("Planilla")))
            End If
            If (Not (ds.Tables("VistaSaldos")) Is Nothing) Then
                MyBase.Tables.Add(New VistaSaldosDataTable(ds.Tables("VistaSaldos")))
            End If
            If (Not (ds.Tables("SaldosADigitos")) Is Nothing) Then
                MyBase.Tables.Add(New SaldosADigitosDataTable(ds.Tables("SaldosADigitos")))
            End If
            If (Not (ds.Tables("MovimientoDetalle")) Is Nothing) Then
                MyBase.Tables.Add(New MovimientoDetalleDataTable(ds.Tables("MovimientoDetalle")))
            End If
            If (Not (ds.Tables("Balances")) Is Nothing) Then
                MyBase.Tables.Add(New BalancesDataTable(ds.Tables("Balances")))
            End If
            If (Not (ds.Tables("Anexos")) Is Nothing) Then
                MyBase.Tables.Add(New AnexosDataTable(ds.Tables("Anexos")))
            End If
            If (Not (ds.Tables("Pcge")) Is Nothing) Then
                MyBase.Tables.Add(New PcgeDataTable(ds.Tables("Pcge")))
            End If
            If (Not (ds.Tables("DiarioSimplificado")) Is Nothing) Then
                MyBase.Tables.Add(New DiarioSimplificadoDataTable(ds.Tables("DiarioSimplificado")))
            End If
            If (Not (ds.Tables("FormatoContable")) Is Nothing) Then
                MyBase.Tables.Add(New FormatoContableDataTable(ds.Tables("FormatoContable")))
            End If
            If (Not (ds.Tables("BalanceGeneral")) Is Nothing) Then
                MyBase.Tables.Add(New BalanceGeneralDataTable(ds.Tables("BalanceGeneral")))
            End If
            If (Not (ds.Tables("GananciaPerdida")) Is Nothing) Then
                MyBase.Tables.Add(New GananciaPerdidaDataTable(ds.Tables("GananciaPerdida")))
            End If
            If (Not (ds.Tables("GananciaPerdida1")) Is Nothing) Then
                MyBase.Tables.Add(New GananciaPerdida1DataTable(ds.Tables("GananciaPerdida1")))
            End If
            If (Not (ds.Tables("SaldoBanco")) Is Nothing) Then
                MyBase.Tables.Add(New SaldoBancoDataTable(ds.Tables("SaldoBanco")))
            End If
            If (Not (ds.Tables("FlujoCaja")) Is Nothing) Then
                MyBase.Tables.Add(New FlujoCajaDataTable(ds.Tables("FlujoCaja")))
            End If
            If (Not (ds.Tables("Gasto")) Is Nothing) Then
                MyBase.Tables.Add(New GastoDataTable(ds.Tables("Gasto")))
            End If
            If (Not (ds.Tables("DiferenciaCambio")) Is Nothing) Then
                MyBase.Tables.Add(New DiferenciaCambioDataTable(ds.Tables("DiferenciaCambio")))
            End If
            If (Not (ds.Tables("GastoXMes")) Is Nothing) Then
                MyBase.Tables.Add(New GastoXMesDataTable(ds.Tables("GastoXMes")))
            End If
            If (Not (ds.Tables("GananciaPerdidaTotal")) Is Nothing) Then
                MyBase.Tables.Add(New GananciaPerdidaTotalDataTable(ds.Tables("GananciaPerdidaTotal")))
            End If
            If (Not (ds.Tables("DaoResumenDetalle")) Is Nothing) Then
                MyBase.Tables.Add(New DaoResumenDetalleDataTable(ds.Tables("DaoResumenDetalle")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FiltroTabla() As FiltroTablaDataTable
        Get
            Return Me.tableFiltroTabla
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Usuario() As UsuarioDataTable
        Get
            Return Me.tableUsuario
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Auxiliar() As AuxiliarDataTable
        Get
            Return Me.tableAuxiliar
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DiasPorMes() As DiasPorMesDataTable
        Get
            Return Me.tableDiasPorMes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoCambio() As TipoCambioDataTable
        Get
            Return Me.tableTipoCambio
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ReportePersonalActivoHoras() As ReportePersonalActivoHorasDataTable
        Get
            Return Me.tableReportePersonalActivoHoras
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RegContab() As RegContabDataTable
        Get
            Return Me.tableRegContab
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Conceptos() As ConceptosDataTable
        Get
            Return Me.tableConceptos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Perfil() As PerfilDataTable
        Get
            Return Me.tablePerfil
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CodigoInexistente() As CodigoInexistenteDataTable
        Get
            Return Me.tableCodigoInexistente
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Planilla() As PlanillaDataTable
        Get
            Return Me.tablePlanilla
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VistaSaldos() As VistaSaldosDataTable
        Get
            Return Me.tableVistaSaldos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SaldosADigitos() As SaldosADigitosDataTable
        Get
            Return Me.tableSaldosADigitos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MovimientoDetalle() As MovimientoDetalleDataTable
        Get
            Return Me.tableMovimientoDetalle
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Balances() As BalancesDataTable
        Get
            Return Me.tableBalances
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Anexos() As AnexosDataTable
        Get
            Return Me.tableAnexos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pcge() As PcgeDataTable
        Get
            Return Me.tablePcge
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DiarioSimplificado() As DiarioSimplificadoDataTable
        Get
            Return Me.tableDiarioSimplificado
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FormatoContable() As FormatoContableDataTable
        Get
            Return Me.tableFormatoContable
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BalanceGeneral() As BalanceGeneralDataTable
        Get
            Return Me.tableBalanceGeneral
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GananciaPerdida() As GananciaPerdidaDataTable
        Get
            Return Me.tableGananciaPerdida
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GananciaPerdida1() As GananciaPerdida1DataTable
        Get
            Return Me.tableGananciaPerdida1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SaldoBanco() As SaldoBancoDataTable
        Get
            Return Me.tableSaldoBanco
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FlujoCaja() As FlujoCajaDataTable
        Get
            Return Me.tableFlujoCaja
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Gasto() As GastoDataTable
        Get
            Return Me.tableGasto
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DiferenciaCambio() As DiferenciaCambioDataTable
        Get
            Return Me.tableDiferenciaCambio
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GastoXMes() As GastoXMesDataTable
        Get
            Return Me.tableGastoXMes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GananciaPerdidaTotal() As GananciaPerdidaTotalDataTable
        Get
            Return Me.tableGananciaPerdidaTotal
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DaoResumenDetalle() As DaoResumenDetalleDataTable
        Get
            Return Me.tableDaoResumenDetalle
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSet1 = CType(MyBase.Clone,DataSet1)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("FiltroTabla")) Is Nothing) Then
                MyBase.Tables.Add(New FiltroTablaDataTable(ds.Tables("FiltroTabla")))
            End If
            If (Not (ds.Tables("Usuario")) Is Nothing) Then
                MyBase.Tables.Add(New UsuarioDataTable(ds.Tables("Usuario")))
            End If
            If (Not (ds.Tables("Auxiliar")) Is Nothing) Then
                MyBase.Tables.Add(New AuxiliarDataTable(ds.Tables("Auxiliar")))
            End If
            If (Not (ds.Tables("DiasPorMes")) Is Nothing) Then
                MyBase.Tables.Add(New DiasPorMesDataTable(ds.Tables("DiasPorMes")))
            End If
            If (Not (ds.Tables("TipoCambio")) Is Nothing) Then
                MyBase.Tables.Add(New TipoCambioDataTable(ds.Tables("TipoCambio")))
            End If
            If (Not (ds.Tables("ReportePersonalActivoHoras")) Is Nothing) Then
                MyBase.Tables.Add(New ReportePersonalActivoHorasDataTable(ds.Tables("ReportePersonalActivoHoras")))
            End If
            If (Not (ds.Tables("RegContab")) Is Nothing) Then
                MyBase.Tables.Add(New RegContabDataTable(ds.Tables("RegContab")))
            End If
            If (Not (ds.Tables("Conceptos")) Is Nothing) Then
                MyBase.Tables.Add(New ConceptosDataTable(ds.Tables("Conceptos")))
            End If
            If (Not (ds.Tables("Perfil")) Is Nothing) Then
                MyBase.Tables.Add(New PerfilDataTable(ds.Tables("Perfil")))
            End If
            If (Not (ds.Tables("CodigoInexistente")) Is Nothing) Then
                MyBase.Tables.Add(New CodigoInexistenteDataTable(ds.Tables("CodigoInexistente")))
            End If
            If (Not (ds.Tables("Planilla")) Is Nothing) Then
                MyBase.Tables.Add(New PlanillaDataTable(ds.Tables("Planilla")))
            End If
            If (Not (ds.Tables("VistaSaldos")) Is Nothing) Then
                MyBase.Tables.Add(New VistaSaldosDataTable(ds.Tables("VistaSaldos")))
            End If
            If (Not (ds.Tables("SaldosADigitos")) Is Nothing) Then
                MyBase.Tables.Add(New SaldosADigitosDataTable(ds.Tables("SaldosADigitos")))
            End If
            If (Not (ds.Tables("MovimientoDetalle")) Is Nothing) Then
                MyBase.Tables.Add(New MovimientoDetalleDataTable(ds.Tables("MovimientoDetalle")))
            End If
            If (Not (ds.Tables("Balances")) Is Nothing) Then
                MyBase.Tables.Add(New BalancesDataTable(ds.Tables("Balances")))
            End If
            If (Not (ds.Tables("Anexos")) Is Nothing) Then
                MyBase.Tables.Add(New AnexosDataTable(ds.Tables("Anexos")))
            End If
            If (Not (ds.Tables("Pcge")) Is Nothing) Then
                MyBase.Tables.Add(New PcgeDataTable(ds.Tables("Pcge")))
            End If
            If (Not (ds.Tables("DiarioSimplificado")) Is Nothing) Then
                MyBase.Tables.Add(New DiarioSimplificadoDataTable(ds.Tables("DiarioSimplificado")))
            End If
            If (Not (ds.Tables("FormatoContable")) Is Nothing) Then
                MyBase.Tables.Add(New FormatoContableDataTable(ds.Tables("FormatoContable")))
            End If
            If (Not (ds.Tables("BalanceGeneral")) Is Nothing) Then
                MyBase.Tables.Add(New BalanceGeneralDataTable(ds.Tables("BalanceGeneral")))
            End If
            If (Not (ds.Tables("GananciaPerdida")) Is Nothing) Then
                MyBase.Tables.Add(New GananciaPerdidaDataTable(ds.Tables("GananciaPerdida")))
            End If
            If (Not (ds.Tables("GananciaPerdida1")) Is Nothing) Then
                MyBase.Tables.Add(New GananciaPerdida1DataTable(ds.Tables("GananciaPerdida1")))
            End If
            If (Not (ds.Tables("SaldoBanco")) Is Nothing) Then
                MyBase.Tables.Add(New SaldoBancoDataTable(ds.Tables("SaldoBanco")))
            End If
            If (Not (ds.Tables("FlujoCaja")) Is Nothing) Then
                MyBase.Tables.Add(New FlujoCajaDataTable(ds.Tables("FlujoCaja")))
            End If
            If (Not (ds.Tables("Gasto")) Is Nothing) Then
                MyBase.Tables.Add(New GastoDataTable(ds.Tables("Gasto")))
            End If
            If (Not (ds.Tables("DiferenciaCambio")) Is Nothing) Then
                MyBase.Tables.Add(New DiferenciaCambioDataTable(ds.Tables("DiferenciaCambio")))
            End If
            If (Not (ds.Tables("GastoXMes")) Is Nothing) Then
                MyBase.Tables.Add(New GastoXMesDataTable(ds.Tables("GastoXMes")))
            End If
            If (Not (ds.Tables("GananciaPerdidaTotal")) Is Nothing) Then
                MyBase.Tables.Add(New GananciaPerdidaTotalDataTable(ds.Tables("GananciaPerdidaTotal")))
            End If
            If (Not (ds.Tables("DaoResumenDetalle")) Is Nothing) Then
                MyBase.Tables.Add(New DaoResumenDetalleDataTable(ds.Tables("DaoResumenDetalle")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableFiltroTabla = CType(MyBase.Tables("FiltroTabla"),FiltroTablaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFiltroTabla) Is Nothing) Then
                Me.tableFiltroTabla.InitVars
            End If
        End If
        Me.tableUsuario = CType(MyBase.Tables("Usuario"),UsuarioDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUsuario) Is Nothing) Then
                Me.tableUsuario.InitVars
            End If
        End If
        Me.tableAuxiliar = CType(MyBase.Tables("Auxiliar"),AuxiliarDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAuxiliar) Is Nothing) Then
                Me.tableAuxiliar.InitVars
            End If
        End If
        Me.tableDiasPorMes = CType(MyBase.Tables("DiasPorMes"),DiasPorMesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDiasPorMes) Is Nothing) Then
                Me.tableDiasPorMes.InitVars
            End If
        End If
        Me.tableTipoCambio = CType(MyBase.Tables("TipoCambio"),TipoCambioDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTipoCambio) Is Nothing) Then
                Me.tableTipoCambio.InitVars
            End If
        End If
        Me.tableReportePersonalActivoHoras = CType(MyBase.Tables("ReportePersonalActivoHoras"),ReportePersonalActivoHorasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableReportePersonalActivoHoras) Is Nothing) Then
                Me.tableReportePersonalActivoHoras.InitVars
            End If
        End If
        Me.tableRegContab = CType(MyBase.Tables("RegContab"),RegContabDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRegContab) Is Nothing) Then
                Me.tableRegContab.InitVars
            End If
        End If
        Me.tableConceptos = CType(MyBase.Tables("Conceptos"),ConceptosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableConceptos) Is Nothing) Then
                Me.tableConceptos.InitVars
            End If
        End If
        Me.tablePerfil = CType(MyBase.Tables("Perfil"),PerfilDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePerfil) Is Nothing) Then
                Me.tablePerfil.InitVars
            End If
        End If
        Me.tableCodigoInexistente = CType(MyBase.Tables("CodigoInexistente"),CodigoInexistenteDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCodigoInexistente) Is Nothing) Then
                Me.tableCodigoInexistente.InitVars
            End If
        End If
        Me.tablePlanilla = CType(MyBase.Tables("Planilla"),PlanillaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePlanilla) Is Nothing) Then
                Me.tablePlanilla.InitVars
            End If
        End If
        Me.tableVistaSaldos = CType(MyBase.Tables("VistaSaldos"),VistaSaldosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVistaSaldos) Is Nothing) Then
                Me.tableVistaSaldos.InitVars
            End If
        End If
        Me.tableSaldosADigitos = CType(MyBase.Tables("SaldosADigitos"),SaldosADigitosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSaldosADigitos) Is Nothing) Then
                Me.tableSaldosADigitos.InitVars
            End If
        End If
        Me.tableMovimientoDetalle = CType(MyBase.Tables("MovimientoDetalle"),MovimientoDetalleDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMovimientoDetalle) Is Nothing) Then
                Me.tableMovimientoDetalle.InitVars
            End If
        End If
        Me.tableBalances = CType(MyBase.Tables("Balances"),BalancesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBalances) Is Nothing) Then
                Me.tableBalances.InitVars
            End If
        End If
        Me.tableAnexos = CType(MyBase.Tables("Anexos"),AnexosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAnexos) Is Nothing) Then
                Me.tableAnexos.InitVars
            End If
        End If
        Me.tablePcge = CType(MyBase.Tables("Pcge"),PcgeDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePcge) Is Nothing) Then
                Me.tablePcge.InitVars
            End If
        End If
        Me.tableDiarioSimplificado = CType(MyBase.Tables("DiarioSimplificado"),DiarioSimplificadoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDiarioSimplificado) Is Nothing) Then
                Me.tableDiarioSimplificado.InitVars
            End If
        End If
        Me.tableFormatoContable = CType(MyBase.Tables("FormatoContable"),FormatoContableDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFormatoContable) Is Nothing) Then
                Me.tableFormatoContable.InitVars
            End If
        End If
        Me.tableBalanceGeneral = CType(MyBase.Tables("BalanceGeneral"),BalanceGeneralDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBalanceGeneral) Is Nothing) Then
                Me.tableBalanceGeneral.InitVars
            End If
        End If
        Me.tableGananciaPerdida = CType(MyBase.Tables("GananciaPerdida"),GananciaPerdidaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGananciaPerdida) Is Nothing) Then
                Me.tableGananciaPerdida.InitVars
            End If
        End If
        Me.tableGananciaPerdida1 = CType(MyBase.Tables("GananciaPerdida1"),GananciaPerdida1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableGananciaPerdida1) Is Nothing) Then
                Me.tableGananciaPerdida1.InitVars
            End If
        End If
        Me.tableSaldoBanco = CType(MyBase.Tables("SaldoBanco"),SaldoBancoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSaldoBanco) Is Nothing) Then
                Me.tableSaldoBanco.InitVars
            End If
        End If
        Me.tableFlujoCaja = CType(MyBase.Tables("FlujoCaja"),FlujoCajaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFlujoCaja) Is Nothing) Then
                Me.tableFlujoCaja.InitVars
            End If
        End If
        Me.tableGasto = CType(MyBase.Tables("Gasto"),GastoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGasto) Is Nothing) Then
                Me.tableGasto.InitVars
            End If
        End If
        Me.tableDiferenciaCambio = CType(MyBase.Tables("DiferenciaCambio"),DiferenciaCambioDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDiferenciaCambio) Is Nothing) Then
                Me.tableDiferenciaCambio.InitVars
            End If
        End If
        Me.tableGastoXMes = CType(MyBase.Tables("GastoXMes"),GastoXMesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGastoXMes) Is Nothing) Then
                Me.tableGastoXMes.InitVars
            End If
        End If
        Me.tableGananciaPerdidaTotal = CType(MyBase.Tables("GananciaPerdidaTotal"),GananciaPerdidaTotalDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGananciaPerdidaTotal) Is Nothing) Then
                Me.tableGananciaPerdidaTotal.InitVars
            End If
        End If
        Me.tableDaoResumenDetalle = CType(MyBase.Tables("DaoResumenDetalle"),DaoResumenDetalleDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDaoResumenDetalle) Is Nothing) Then
                Me.tableDaoResumenDetalle.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSet1.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableFiltroTabla = New FiltroTablaDataTable
        MyBase.Tables.Add(Me.tableFiltroTabla)
        Me.tableUsuario = New UsuarioDataTable
        MyBase.Tables.Add(Me.tableUsuario)
        Me.tableAuxiliar = New AuxiliarDataTable
        MyBase.Tables.Add(Me.tableAuxiliar)
        Me.tableDiasPorMes = New DiasPorMesDataTable
        MyBase.Tables.Add(Me.tableDiasPorMes)
        Me.tableTipoCambio = New TipoCambioDataTable
        MyBase.Tables.Add(Me.tableTipoCambio)
        Me.tableReportePersonalActivoHoras = New ReportePersonalActivoHorasDataTable
        MyBase.Tables.Add(Me.tableReportePersonalActivoHoras)
        Me.tableRegContab = New RegContabDataTable
        MyBase.Tables.Add(Me.tableRegContab)
        Me.tableConceptos = New ConceptosDataTable
        MyBase.Tables.Add(Me.tableConceptos)
        Me.tablePerfil = New PerfilDataTable
        MyBase.Tables.Add(Me.tablePerfil)
        Me.tableCodigoInexistente = New CodigoInexistenteDataTable
        MyBase.Tables.Add(Me.tableCodigoInexistente)
        Me.tablePlanilla = New PlanillaDataTable
        MyBase.Tables.Add(Me.tablePlanilla)
        Me.tableVistaSaldos = New VistaSaldosDataTable
        MyBase.Tables.Add(Me.tableVistaSaldos)
        Me.tableSaldosADigitos = New SaldosADigitosDataTable
        MyBase.Tables.Add(Me.tableSaldosADigitos)
        Me.tableMovimientoDetalle = New MovimientoDetalleDataTable
        MyBase.Tables.Add(Me.tableMovimientoDetalle)
        Me.tableBalances = New BalancesDataTable
        MyBase.Tables.Add(Me.tableBalances)
        Me.tableAnexos = New AnexosDataTable
        MyBase.Tables.Add(Me.tableAnexos)
        Me.tablePcge = New PcgeDataTable
        MyBase.Tables.Add(Me.tablePcge)
        Me.tableDiarioSimplificado = New DiarioSimplificadoDataTable
        MyBase.Tables.Add(Me.tableDiarioSimplificado)
        Me.tableFormatoContable = New FormatoContableDataTable
        MyBase.Tables.Add(Me.tableFormatoContable)
        Me.tableBalanceGeneral = New BalanceGeneralDataTable
        MyBase.Tables.Add(Me.tableBalanceGeneral)
        Me.tableGananciaPerdida = New GananciaPerdidaDataTable
        MyBase.Tables.Add(Me.tableGananciaPerdida)
        Me.tableGananciaPerdida1 = New GananciaPerdida1DataTable
        MyBase.Tables.Add(Me.tableGananciaPerdida1)
        Me.tableSaldoBanco = New SaldoBancoDataTable
        MyBase.Tables.Add(Me.tableSaldoBanco)
        Me.tableFlujoCaja = New FlujoCajaDataTable
        MyBase.Tables.Add(Me.tableFlujoCaja)
        Me.tableGasto = New GastoDataTable
        MyBase.Tables.Add(Me.tableGasto)
        Me.tableDiferenciaCambio = New DiferenciaCambioDataTable
        MyBase.Tables.Add(Me.tableDiferenciaCambio)
        Me.tableGastoXMes = New GastoXMesDataTable
        MyBase.Tables.Add(Me.tableGastoXMes)
        Me.tableGananciaPerdidaTotal = New GananciaPerdidaTotalDataTable
        MyBase.Tables.Add(Me.tableGananciaPerdidaTotal)
        Me.tableDaoResumenDetalle = New DaoResumenDetalleDataTable
        MyBase.Tables.Add(Me.tableDaoResumenDetalle)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFiltroTabla() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeUsuario() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAuxiliar() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDiasPorMes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTipoCambio() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeReportePersonalActivoHoras() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRegContab() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeConceptos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePerfil() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCodigoInexistente() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePlanilla() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVistaSaldos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSaldosADigitos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMovimientoDetalle() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeBalances() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAnexos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePcge() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDiarioSimplificado() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFormatoContable() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeBalanceGeneral() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeGananciaPerdida() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeGananciaPerdida1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSaldoBanco() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFlujoCaja() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeGasto() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDiferenciaCambio() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeGastoXMes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeGananciaPerdidaTotal() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDaoResumenDetalle() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSet1 = New DataSet1
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub FiltroTablaRowChangeEventHandler(ByVal sender As Object, ByVal e As FiltroTablaRowChangeEvent)
    
    Public Delegate Sub UsuarioRowChangeEventHandler(ByVal sender As Object, ByVal e As UsuarioRowChangeEvent)
    
    Public Delegate Sub AuxiliarRowChangeEventHandler(ByVal sender As Object, ByVal e As AuxiliarRowChangeEvent)
    
    Public Delegate Sub DiasPorMesRowChangeEventHandler(ByVal sender As Object, ByVal e As DiasPorMesRowChangeEvent)
    
    Public Delegate Sub TipoCambioRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoCambioRowChangeEvent)
    
    Public Delegate Sub ReportePersonalActivoHorasRowChangeEventHandler(ByVal sender As Object, ByVal e As ReportePersonalActivoHorasRowChangeEvent)
    
    Public Delegate Sub RegContabRowChangeEventHandler(ByVal sender As Object, ByVal e As RegContabRowChangeEvent)
    
    Public Delegate Sub ConceptosRowChangeEventHandler(ByVal sender As Object, ByVal e As ConceptosRowChangeEvent)
    
    Public Delegate Sub PerfilRowChangeEventHandler(ByVal sender As Object, ByVal e As PerfilRowChangeEvent)
    
    Public Delegate Sub CodigoInexistenteRowChangeEventHandler(ByVal sender As Object, ByVal e As CodigoInexistenteRowChangeEvent)
    
    Public Delegate Sub PlanillaRowChangeEventHandler(ByVal sender As Object, ByVal e As PlanillaRowChangeEvent)
    
    Public Delegate Sub VistaSaldosRowChangeEventHandler(ByVal sender As Object, ByVal e As VistaSaldosRowChangeEvent)
    
    Public Delegate Sub SaldosADigitosRowChangeEventHandler(ByVal sender As Object, ByVal e As SaldosADigitosRowChangeEvent)
    
    Public Delegate Sub MovimientoDetalleRowChangeEventHandler(ByVal sender As Object, ByVal e As MovimientoDetalleRowChangeEvent)
    
    Public Delegate Sub BalancesRowChangeEventHandler(ByVal sender As Object, ByVal e As BalancesRowChangeEvent)
    
    Public Delegate Sub AnexosRowChangeEventHandler(ByVal sender As Object, ByVal e As AnexosRowChangeEvent)
    
    Public Delegate Sub PcgeRowChangeEventHandler(ByVal sender As Object, ByVal e As PcgeRowChangeEvent)
    
    Public Delegate Sub DiarioSimplificadoRowChangeEventHandler(ByVal sender As Object, ByVal e As DiarioSimplificadoRowChangeEvent)
    
    Public Delegate Sub FormatoContableRowChangeEventHandler(ByVal sender As Object, ByVal e As FormatoContableRowChangeEvent)
    
    Public Delegate Sub BalanceGeneralRowChangeEventHandler(ByVal sender As Object, ByVal e As BalanceGeneralRowChangeEvent)
    
    Public Delegate Sub GananciaPerdidaRowChangeEventHandler(ByVal sender As Object, ByVal e As GananciaPerdidaRowChangeEvent)
    
    Public Delegate Sub GananciaPerdida1RowChangeEventHandler(ByVal sender As Object, ByVal e As GananciaPerdida1RowChangeEvent)
    
    Public Delegate Sub SaldoBancoRowChangeEventHandler(ByVal sender As Object, ByVal e As SaldoBancoRowChangeEvent)
    
    Public Delegate Sub FlujoCajaRowChangeEventHandler(ByVal sender As Object, ByVal e As FlujoCajaRowChangeEvent)
    
    Public Delegate Sub GastoRowChangeEventHandler(ByVal sender As Object, ByVal e As GastoRowChangeEvent)
    
    Public Delegate Sub DiferenciaCambioRowChangeEventHandler(ByVal sender As Object, ByVal e As DiferenciaCambioRowChangeEvent)
    
    Public Delegate Sub GastoXMesRowChangeEventHandler(ByVal sender As Object, ByVal e As GastoXMesRowChangeEvent)
    
    Public Delegate Sub GananciaPerdidaTotalRowChangeEventHandler(ByVal sender As Object, ByVal e As GananciaPerdidaTotalRowChangeEvent)
    
    Public Delegate Sub DaoResumenDetalleRowChangeEventHandler(ByVal sender As Object, ByVal e As DaoResumenDetalleRowChangeEvent)

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class FiltroTablaDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnTipoTabla As Global.System.Data.DataColumn

    Private columnCodigoItemTabla As Global.System.Data.DataColumn

    Private columnNombreItemTabla As Global.System.Data.DataColumn

    Private columnEstadoRegistro As Global.System.Data.DataColumn

    Private columnEliminadoRegistro As Global.System.Data.DataColumn

    Private columnCodigoUsuarioAgrega As Global.System.Data.DataColumn

    Private columnCodigoPersonalAgrega As Global.System.Data.DataColumn

    Private columnNombreUsuarioAgrega As Global.System.Data.DataColumn

    Private columnFechaAgrega As Global.System.Data.DataColumn

    Private columnCodigoUsuarioModifica As Global.System.Data.DataColumn

    Private columnCodigoPersonalModifica As Global.System.Data.DataColumn

    Private columnNombreUsuarioModifica As Global.System.Data.DataColumn

    Private columnFechaModifica As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "FiltroTabla"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property TipoTablaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnTipoTabla
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoItemTablaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoItemTabla
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreItemTablaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreItemTabla
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property EstadoRegistroColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnEstadoRegistro
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property EliminadoRegistroColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnEliminadoRegistro
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoUsuarioAgregaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoUsuarioAgrega
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoPersonalAgregaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoPersonalAgrega
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreUsuarioAgregaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreUsuarioAgrega
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property FechaAgregaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnFechaAgrega
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoUsuarioModificaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoUsuarioModifica
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoPersonalModificaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoPersonalModifica
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreUsuarioModificaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreUsuarioModifica
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property FechaModificaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnFechaModifica
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As FiltroTablaRow
        Get
            Return CType(Me.Rows(index), FiltroTablaRow)
        End Get
    End Property

    Public Event FiltroTablaRowChanging As FiltroTablaRowChangeEventHandler

    Public Event FiltroTablaRowChanged As FiltroTablaRowChangeEventHandler

    Public Event FiltroTablaRowDeleting As FiltroTablaRowChangeEventHandler

    Public Event FiltroTablaRowDeleted As FiltroTablaRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddFiltroTablaRow(ByVal row As FiltroTablaRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddFiltroTablaRow(ByVal TipoTabla As String, ByVal CodigoItemTabla As String, ByVal NombreItemTabla As String, ByVal EstadoRegistro As String, ByVal EliminadoRegistro As String, ByVal CodigoUsuarioAgrega As String, ByVal CodigoPersonalAgrega As String, ByVal NombreUsuarioAgrega As String, ByVal FechaAgrega As String, ByVal CodigoUsuarioModifica As String, ByVal CodigoPersonalModifica As String, ByVal NombreUsuarioModifica As String, ByVal FechaModifica As String) As FiltroTablaRow
        Dim rowFiltroTablaRow As FiltroTablaRow = CType(Me.NewRow, FiltroTablaRow)
        Dim columnValuesArray() As Object = New Object() {TipoTabla, CodigoItemTabla, NombreItemTabla, EstadoRegistro, EliminadoRegistro, CodigoUsuarioAgrega, CodigoPersonalAgrega, NombreUsuarioAgrega, FechaAgrega, CodigoUsuarioModifica, CodigoPersonalModifica, NombreUsuarioModifica, FechaModifica}
        rowFiltroTablaRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowFiltroTablaRow)
        Return rowFiltroTablaRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As FiltroTablaDataTable = CType(MyBase.Clone, FiltroTablaDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New FiltroTablaDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnTipoTabla = MyBase.Columns("TipoTabla")
        Me.columnCodigoItemTabla = MyBase.Columns("CodigoItemTabla")
        Me.columnNombreItemTabla = MyBase.Columns("NombreItemTabla")
        Me.columnEstadoRegistro = MyBase.Columns("EstadoRegistro")
        Me.columnEliminadoRegistro = MyBase.Columns("EliminadoRegistro")
        Me.columnCodigoUsuarioAgrega = MyBase.Columns("CodigoUsuarioAgrega")
        Me.columnCodigoPersonalAgrega = MyBase.Columns("CodigoPersonalAgrega")
        Me.columnNombreUsuarioAgrega = MyBase.Columns("NombreUsuarioAgrega")
        Me.columnFechaAgrega = MyBase.Columns("FechaAgrega")
        Me.columnCodigoUsuarioModifica = MyBase.Columns("CodigoUsuarioModifica")
        Me.columnCodigoPersonalModifica = MyBase.Columns("CodigoPersonalModifica")
        Me.columnNombreUsuarioModifica = MyBase.Columns("NombreUsuarioModifica")
        Me.columnFechaModifica = MyBase.Columns("FechaModifica")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnTipoTabla = New Global.System.Data.DataColumn("TipoTabla", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnTipoTabla)
        Me.columnCodigoItemTabla = New Global.System.Data.DataColumn("CodigoItemTabla", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoItemTabla)
        Me.columnNombreItemTabla = New Global.System.Data.DataColumn("NombreItemTabla", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreItemTabla)
        Me.columnEstadoRegistro = New Global.System.Data.DataColumn("EstadoRegistro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnEstadoRegistro)
        Me.columnEliminadoRegistro = New Global.System.Data.DataColumn("EliminadoRegistro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnEliminadoRegistro)
        Me.columnCodigoUsuarioAgrega = New Global.System.Data.DataColumn("CodigoUsuarioAgrega", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoUsuarioAgrega)
        Me.columnCodigoPersonalAgrega = New Global.System.Data.DataColumn("CodigoPersonalAgrega", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoPersonalAgrega)
        Me.columnNombreUsuarioAgrega = New Global.System.Data.DataColumn("NombreUsuarioAgrega", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreUsuarioAgrega)
        Me.columnFechaAgrega = New Global.System.Data.DataColumn("FechaAgrega", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnFechaAgrega)
        Me.columnCodigoUsuarioModifica = New Global.System.Data.DataColumn("CodigoUsuarioModifica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoUsuarioModifica)
        Me.columnCodigoPersonalModifica = New Global.System.Data.DataColumn("CodigoPersonalModifica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoPersonalModifica)
        Me.columnNombreUsuarioModifica = New Global.System.Data.DataColumn("NombreUsuarioModifica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreUsuarioModifica)
        Me.columnFechaModifica = New Global.System.Data.DataColumn("FechaModifica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnFechaModifica)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewFiltroTablaRow() As FiltroTablaRow
        Return CType(Me.NewRow, FiltroTablaRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New FiltroTablaRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(FiltroTablaRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.FiltroTablaRowChangedEvent) Is Nothing) Then
            RaiseEvent FiltroTablaRowChanged(Me, New FiltroTablaRowChangeEvent(CType(e.Row, FiltroTablaRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.FiltroTablaRowChangingEvent) Is Nothing) Then
            RaiseEvent FiltroTablaRowChanging(Me, New FiltroTablaRowChangeEvent(CType(e.Row, FiltroTablaRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.FiltroTablaRowDeletedEvent) Is Nothing) Then
            RaiseEvent FiltroTablaRowDeleted(Me, New FiltroTablaRowChangeEvent(CType(e.Row, FiltroTablaRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.FiltroTablaRowDeletingEvent) Is Nothing) Then
            RaiseEvent FiltroTablaRowDeleting(Me, New FiltroTablaRowChangeEvent(CType(e.Row, FiltroTablaRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemoveFiltroTablaRow(ByVal row As FiltroTablaRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "FiltroTablaDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class UsuarioDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnCodigoUsuario As Global.System.Data.DataColumn

    Private columnCodigoPersonalUsuario As Global.System.Data.DataColumn

    Private columnNombrePersonalUsuario As Global.System.Data.DataColumn

    Private columnClaveUsuario As Global.System.Data.DataColumn

    Private columnCodigoPregunta As Global.System.Data.DataColumn

    Private columnNombrePregunta As Global.System.Data.DataColumn

    Private columnRespuestaUsuario As Global.System.Data.DataColumn

    Private columnCodigoGrupo As Global.System.Data.DataColumn

    Private columnNombreGrupo As Global.System.Data.DataColumn

    Private columnEstadoRegistro As Global.System.Data.DataColumn

    Private columnEliminadoRegistro As Global.System.Data.DataColumn

    Private columnCodigoUsuarioAgrega As Global.System.Data.DataColumn

    Private columnCodigoPersonalAgrega As Global.System.Data.DataColumn

    Private columnNombreUsuarioAgrega As Global.System.Data.DataColumn

    Private columnFechaAgrega As Global.System.Data.DataColumn

    Private columnCodigoUsuarioModifica As Global.System.Data.DataColumn

    Private columnCodigoPersonalModifica As Global.System.Data.DataColumn

    Private columnNombreUsuarioModifica As Global.System.Data.DataColumn

    Private columnFechaModifica As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "Usuario"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoUsuarioColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoUsuario
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoPersonalUsuarioColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoPersonalUsuario
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombrePersonalUsuarioColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombrePersonalUsuario
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ClaveUsuarioColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnClaveUsuario
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoPreguntaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoPregunta
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombrePreguntaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombrePregunta
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property RespuestaUsuarioColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnRespuestaUsuario
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoGrupoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoGrupo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreGrupoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreGrupo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property EstadoRegistroColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnEstadoRegistro
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property EliminadoRegistroColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnEliminadoRegistro
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoUsuarioAgregaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoUsuarioAgrega
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoPersonalAgregaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoPersonalAgrega
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreUsuarioAgregaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreUsuarioAgrega
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property FechaAgregaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnFechaAgrega
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoUsuarioModificaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoUsuarioModifica
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoPersonalModificaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoPersonalModifica
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreUsuarioModificaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreUsuarioModifica
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property FechaModificaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnFechaModifica
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As UsuarioRow
        Get
            Return CType(Me.Rows(index), UsuarioRow)
        End Get
    End Property

    Public Event UsuarioRowChanging As UsuarioRowChangeEventHandler

    Public Event UsuarioRowChanged As UsuarioRowChangeEventHandler

    Public Event UsuarioRowDeleting As UsuarioRowChangeEventHandler

    Public Event UsuarioRowDeleted As UsuarioRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddUsuarioRow(ByVal row As UsuarioRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddUsuarioRow(
                    ByVal CodigoUsuario As String,
                    ByVal CodigoPersonalUsuario As String,
                    ByVal NombrePersonalUsuario As String,
                    ByVal ClaveUsuario As String,
                    ByVal CodigoPregunta As String,
                    ByVal NombrePregunta As String,
                    ByVal RespuestaUsuario As String,
                    ByVal CodigoGrupo As String,
                    ByVal NombreGrupo As String,
                    ByVal EstadoRegistro As String,
                    ByVal EliminadoRegistro As String,
                    ByVal CodigoUsuarioAgrega As String,
                    ByVal CodigoPersonalAgrega As String,
                    ByVal NombreUsuarioAgrega As String,
                    ByVal FechaAgrega As String,
                    ByVal CodigoUsuarioModifica As String,
                    ByVal CodigoPersonalModifica As String,
                    ByVal NombreUsuarioModifica As String,
                    ByVal FechaModifica As String) As UsuarioRow
        Dim rowUsuarioRow As UsuarioRow = CType(Me.NewRow, UsuarioRow)
        Dim columnValuesArray() As Object = New Object() {CodigoUsuario, CodigoPersonalUsuario, NombrePersonalUsuario, ClaveUsuario, CodigoPregunta, NombrePregunta, RespuestaUsuario, CodigoGrupo, NombreGrupo, EstadoRegistro, EliminadoRegistro, CodigoUsuarioAgrega, CodigoPersonalAgrega, NombreUsuarioAgrega, FechaAgrega, CodigoUsuarioModifica, CodigoPersonalModifica, NombreUsuarioModifica, FechaModifica}
        rowUsuarioRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowUsuarioRow)
        Return rowUsuarioRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As UsuarioDataTable = CType(MyBase.Clone, UsuarioDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New UsuarioDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnCodigoUsuario = MyBase.Columns("CodigoUsuario")
        Me.columnCodigoPersonalUsuario = MyBase.Columns("CodigoPersonalUsuario")
        Me.columnNombrePersonalUsuario = MyBase.Columns("NombrePersonalUsuario")
        Me.columnClaveUsuario = MyBase.Columns("ClaveUsuario")
        Me.columnCodigoPregunta = MyBase.Columns("CodigoPregunta")
        Me.columnNombrePregunta = MyBase.Columns("NombrePregunta")
        Me.columnRespuestaUsuario = MyBase.Columns("RespuestaUsuario")
        Me.columnCodigoGrupo = MyBase.Columns("CodigoGrupo")
        Me.columnNombreGrupo = MyBase.Columns("NombreGrupo")
        Me.columnEstadoRegistro = MyBase.Columns("EstadoRegistro")
        Me.columnEliminadoRegistro = MyBase.Columns("EliminadoRegistro")
        Me.columnCodigoUsuarioAgrega = MyBase.Columns("CodigoUsuarioAgrega")
        Me.columnCodigoPersonalAgrega = MyBase.Columns("CodigoPersonalAgrega")
        Me.columnNombreUsuarioAgrega = MyBase.Columns("NombreUsuarioAgrega")
        Me.columnFechaAgrega = MyBase.Columns("FechaAgrega")
        Me.columnCodigoUsuarioModifica = MyBase.Columns("CodigoUsuarioModifica")
        Me.columnCodigoPersonalModifica = MyBase.Columns("CodigoPersonalModifica")
        Me.columnNombreUsuarioModifica = MyBase.Columns("NombreUsuarioModifica")
        Me.columnFechaModifica = MyBase.Columns("FechaModifica")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnCodigoUsuario = New Global.System.Data.DataColumn("CodigoUsuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoUsuario)
        Me.columnCodigoPersonalUsuario = New Global.System.Data.DataColumn("CodigoPersonalUsuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoPersonalUsuario)
        Me.columnNombrePersonalUsuario = New Global.System.Data.DataColumn("NombrePersonalUsuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombrePersonalUsuario)
        Me.columnClaveUsuario = New Global.System.Data.DataColumn("ClaveUsuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnClaveUsuario)
        Me.columnCodigoPregunta = New Global.System.Data.DataColumn("CodigoPregunta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoPregunta)
        Me.columnNombrePregunta = New Global.System.Data.DataColumn("NombrePregunta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombrePregunta)
        Me.columnRespuestaUsuario = New Global.System.Data.DataColumn("RespuestaUsuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnRespuestaUsuario)
        Me.columnCodigoGrupo = New Global.System.Data.DataColumn("CodigoGrupo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoGrupo)
        Me.columnNombreGrupo = New Global.System.Data.DataColumn("NombreGrupo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreGrupo)
        Me.columnEstadoRegistro = New Global.System.Data.DataColumn("EstadoRegistro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnEstadoRegistro)
        Me.columnEliminadoRegistro = New Global.System.Data.DataColumn("EliminadoRegistro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnEliminadoRegistro)
        Me.columnCodigoUsuarioAgrega = New Global.System.Data.DataColumn("CodigoUsuarioAgrega", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoUsuarioAgrega)
        Me.columnCodigoPersonalAgrega = New Global.System.Data.DataColumn("CodigoPersonalAgrega", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoPersonalAgrega)
        Me.columnNombreUsuarioAgrega = New Global.System.Data.DataColumn("NombreUsuarioAgrega", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreUsuarioAgrega)
        Me.columnFechaAgrega = New Global.System.Data.DataColumn("FechaAgrega", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnFechaAgrega)
        Me.columnCodigoUsuarioModifica = New Global.System.Data.DataColumn("CodigoUsuarioModifica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoUsuarioModifica)
        Me.columnCodigoPersonalModifica = New Global.System.Data.DataColumn("CodigoPersonalModifica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoPersonalModifica)
        Me.columnNombreUsuarioModifica = New Global.System.Data.DataColumn("NombreUsuarioModifica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreUsuarioModifica)
        Me.columnFechaModifica = New Global.System.Data.DataColumn("FechaModifica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnFechaModifica)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewUsuarioRow() As UsuarioRow
        Return CType(Me.NewRow, UsuarioRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New UsuarioRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(UsuarioRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.UsuarioRowChangedEvent) Is Nothing) Then
            RaiseEvent UsuarioRowChanged(Me, New UsuarioRowChangeEvent(CType(e.Row, UsuarioRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.UsuarioRowChangingEvent) Is Nothing) Then
            RaiseEvent UsuarioRowChanging(Me, New UsuarioRowChangeEvent(CType(e.Row, UsuarioRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.UsuarioRowDeletedEvent) Is Nothing) Then
            RaiseEvent UsuarioRowDeleted(Me, New UsuarioRowChangeEvent(CType(e.Row, UsuarioRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.UsuarioRowDeletingEvent) Is Nothing) Then
            RaiseEvent UsuarioRowDeleting(Me, New UsuarioRowChangeEvent(CType(e.Row, UsuarioRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemoveUsuarioRow(ByVal row As UsuarioRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "UsuarioDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class AuxiliarDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnCodigoAuxiliar As Global.System.Data.DataColumn

    Private columnDescripcionAuxiliar As Global.System.Data.DataColumn

    Private columnDireccionAuxiliar As Global.System.Data.DataColumn

    Private columnCodigoDistrito As Global.System.Data.DataColumn

    Private columnNombreDistrito As Global.System.Data.DataColumn

    Private columnTelefonoAuxiliar As Global.System.Data.DataColumn

    Private columnCelularAuxiliar As Global.System.Data.DataColumn

    Private columnCorreoAuxiliar As Global.System.Data.DataColumn

    Private columnReferenciaAuxiliar As Global.System.Data.DataColumn

    Private columnTipoAuxiliar As Global.System.Data.DataColumn

    Private columnEstadoRegistro As Global.System.Data.DataColumn

    Private columnEliminadoRegistro As Global.System.Data.DataColumn

    Private columnCodigoUsuarioAgrega As Global.System.Data.DataColumn

    Private columnCodigoPersonalAgrega As Global.System.Data.DataColumn

    Private columnNombreUsuarioAgrega As Global.System.Data.DataColumn

    Private columnFechaAgrega As Global.System.Data.DataColumn

    Private columnCodigoUsuarioModifica As Global.System.Data.DataColumn

    Private columnCodigoPersonalModifica As Global.System.Data.DataColumn

    Private columnNombreUsuarioModifica As Global.System.Data.DataColumn

    Private columnFechaModifica As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "Auxiliar"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoAuxiliarColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoAuxiliar
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property DescripcionAuxiliarColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnDescripcionAuxiliar
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property DireccionAuxiliarColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnDireccionAuxiliar
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoDistritoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoDistrito
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreDistritoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreDistrito
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property TelefonoAuxiliarColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnTelefonoAuxiliar
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CelularAuxiliarColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCelularAuxiliar
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CorreoAuxiliarColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCorreoAuxiliar
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ReferenciaAuxiliarColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnReferenciaAuxiliar
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property TipoAuxiliarColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnTipoAuxiliar
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property EstadoRegistroColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnEstadoRegistro
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property EliminadoRegistroColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnEliminadoRegistro
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoUsuarioAgregaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoUsuarioAgrega
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoPersonalAgregaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoPersonalAgrega
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreUsuarioAgregaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreUsuarioAgrega
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property FechaAgregaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnFechaAgrega
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoUsuarioModificaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoUsuarioModifica
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoPersonalModificaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoPersonalModifica
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreUsuarioModificaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreUsuarioModifica
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property FechaModificaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnFechaModifica
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As AuxiliarRow
        Get
            Return CType(Me.Rows(index), AuxiliarRow)
        End Get
    End Property

    Public Event AuxiliarRowChanging As AuxiliarRowChangeEventHandler

    Public Event AuxiliarRowChanged As AuxiliarRowChangeEventHandler

    Public Event AuxiliarRowDeleting As AuxiliarRowChangeEventHandler

    Public Event AuxiliarRowDeleted As AuxiliarRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddAuxiliarRow(ByVal row As AuxiliarRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddAuxiliarRow(
                    ByVal CodigoAuxiliar As String,
                    ByVal DescripcionAuxiliar As String,
                    ByVal DireccionAuxiliar As String,
                    ByVal CodigoDistrito As String,
                    ByVal NombreDistrito As String,
                    ByVal TelefonoAuxiliar As String,
                    ByVal CelularAuxiliar As String,
                    ByVal CorreoAuxiliar As String,
                    ByVal ReferenciaAuxiliar As String,
                    ByVal TipoAuxiliar As String,
                    ByVal EstadoRegistro As String,
                    ByVal EliminadoRegistro As String,
                    ByVal CodigoUsuarioAgrega As String,
                    ByVal CodigoPersonalAgrega As String,
                    ByVal NombreUsuarioAgrega As String,
                    ByVal FechaAgrega As String,
                    ByVal CodigoUsuarioModifica As String,
                    ByVal CodigoPersonalModifica As String,
                    ByVal NombreUsuarioModifica As String,
                    ByVal FechaModifica As String) As AuxiliarRow
        Dim rowAuxiliarRow As AuxiliarRow = CType(Me.NewRow, AuxiliarRow)
        Dim columnValuesArray() As Object = New Object() {CodigoAuxiliar, DescripcionAuxiliar, DireccionAuxiliar, CodigoDistrito, NombreDistrito, TelefonoAuxiliar, CelularAuxiliar, CorreoAuxiliar, ReferenciaAuxiliar, TipoAuxiliar, EstadoRegistro, EliminadoRegistro, CodigoUsuarioAgrega, CodigoPersonalAgrega, NombreUsuarioAgrega, FechaAgrega, CodigoUsuarioModifica, CodigoPersonalModifica, NombreUsuarioModifica, FechaModifica}
        rowAuxiliarRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowAuxiliarRow)
        Return rowAuxiliarRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As AuxiliarDataTable = CType(MyBase.Clone, AuxiliarDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New AuxiliarDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnCodigoAuxiliar = MyBase.Columns("CodigoAuxiliar")
        Me.columnDescripcionAuxiliar = MyBase.Columns("DescripcionAuxiliar")
        Me.columnDireccionAuxiliar = MyBase.Columns("DireccionAuxiliar")
        Me.columnCodigoDistrito = MyBase.Columns("CodigoDistrito")
        Me.columnNombreDistrito = MyBase.Columns("NombreDistrito")
        Me.columnTelefonoAuxiliar = MyBase.Columns("TelefonoAuxiliar")
        Me.columnCelularAuxiliar = MyBase.Columns("CelularAuxiliar")
        Me.columnCorreoAuxiliar = MyBase.Columns("CorreoAuxiliar")
        Me.columnReferenciaAuxiliar = MyBase.Columns("ReferenciaAuxiliar")
        Me.columnTipoAuxiliar = MyBase.Columns("TipoAuxiliar")
        Me.columnEstadoRegistro = MyBase.Columns("EstadoRegistro")
        Me.columnEliminadoRegistro = MyBase.Columns("EliminadoRegistro")
        Me.columnCodigoUsuarioAgrega = MyBase.Columns("CodigoUsuarioAgrega")
        Me.columnCodigoPersonalAgrega = MyBase.Columns("CodigoPersonalAgrega")
        Me.columnNombreUsuarioAgrega = MyBase.Columns("NombreUsuarioAgrega")
        Me.columnFechaAgrega = MyBase.Columns("FechaAgrega")
        Me.columnCodigoUsuarioModifica = MyBase.Columns("CodigoUsuarioModifica")
        Me.columnCodigoPersonalModifica = MyBase.Columns("CodigoPersonalModifica")
        Me.columnNombreUsuarioModifica = MyBase.Columns("NombreUsuarioModifica")
        Me.columnFechaModifica = MyBase.Columns("FechaModifica")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnCodigoAuxiliar = New Global.System.Data.DataColumn("CodigoAuxiliar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoAuxiliar)
        Me.columnDescripcionAuxiliar = New Global.System.Data.DataColumn("DescripcionAuxiliar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnDescripcionAuxiliar)
        Me.columnDireccionAuxiliar = New Global.System.Data.DataColumn("DireccionAuxiliar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnDireccionAuxiliar)
        Me.columnCodigoDistrito = New Global.System.Data.DataColumn("CodigoDistrito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoDistrito)
        Me.columnNombreDistrito = New Global.System.Data.DataColumn("NombreDistrito", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreDistrito)
        Me.columnTelefonoAuxiliar = New Global.System.Data.DataColumn("TelefonoAuxiliar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnTelefonoAuxiliar)
        Me.columnCelularAuxiliar = New Global.System.Data.DataColumn("CelularAuxiliar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCelularAuxiliar)
        Me.columnCorreoAuxiliar = New Global.System.Data.DataColumn("CorreoAuxiliar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCorreoAuxiliar)
        Me.columnReferenciaAuxiliar = New Global.System.Data.DataColumn("ReferenciaAuxiliar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnReferenciaAuxiliar)
        Me.columnTipoAuxiliar = New Global.System.Data.DataColumn("TipoAuxiliar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnTipoAuxiliar)
        Me.columnEstadoRegistro = New Global.System.Data.DataColumn("EstadoRegistro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnEstadoRegistro)
        Me.columnEliminadoRegistro = New Global.System.Data.DataColumn("EliminadoRegistro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnEliminadoRegistro)
        Me.columnCodigoUsuarioAgrega = New Global.System.Data.DataColumn("CodigoUsuarioAgrega", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoUsuarioAgrega)
        Me.columnCodigoPersonalAgrega = New Global.System.Data.DataColumn("CodigoPersonalAgrega", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoPersonalAgrega)
        Me.columnNombreUsuarioAgrega = New Global.System.Data.DataColumn("NombreUsuarioAgrega", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreUsuarioAgrega)
        Me.columnFechaAgrega = New Global.System.Data.DataColumn("FechaAgrega", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnFechaAgrega)
        Me.columnCodigoUsuarioModifica = New Global.System.Data.DataColumn("CodigoUsuarioModifica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoUsuarioModifica)
        Me.columnCodigoPersonalModifica = New Global.System.Data.DataColumn("CodigoPersonalModifica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoPersonalModifica)
        Me.columnNombreUsuarioModifica = New Global.System.Data.DataColumn("NombreUsuarioModifica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreUsuarioModifica)
        Me.columnFechaModifica = New Global.System.Data.DataColumn("FechaModifica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnFechaModifica)
        Me.columnCodigoAuxiliar.Caption = "CodigoItemTabla"
        Me.columnDescripcionAuxiliar.Caption = "NombreItemTabla"
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewAuxiliarRow() As AuxiliarRow
        Return CType(Me.NewRow, AuxiliarRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New AuxiliarRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(AuxiliarRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.AuxiliarRowChangedEvent) Is Nothing) Then
            RaiseEvent AuxiliarRowChanged(Me, New AuxiliarRowChangeEvent(CType(e.Row, AuxiliarRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.AuxiliarRowChangingEvent) Is Nothing) Then
            RaiseEvent AuxiliarRowChanging(Me, New AuxiliarRowChangeEvent(CType(e.Row, AuxiliarRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.AuxiliarRowDeletedEvent) Is Nothing) Then
            RaiseEvent AuxiliarRowDeleted(Me, New AuxiliarRowChangeEvent(CType(e.Row, AuxiliarRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.AuxiliarRowDeletingEvent) Is Nothing) Then
            RaiseEvent AuxiliarRowDeleting(Me, New AuxiliarRowChangeEvent(CType(e.Row, AuxiliarRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemoveAuxiliarRow(ByVal row As AuxiliarRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "AuxiliarDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class DiasPorMesDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnAnoMesDiasPorMes As Global.System.Data.DataColumn

    Private columnAnoDiasPorMes As Global.System.Data.DataColumn

    Private columnCodigoMes As Global.System.Data.DataColumn

    Private columnNombreMes As Global.System.Data.DataColumn

    Private columnNumerodiasPorMes As Global.System.Data.DataColumn

    Private columnEstadoRegistro As Global.System.Data.DataColumn

    Private columnEliminadoRegistro As Global.System.Data.DataColumn

    Private columnCodigoUsuarioAgrega As Global.System.Data.DataColumn

    Private columnCodigoPersonalAgrega As Global.System.Data.DataColumn

    Private columnNombreUsuarioAgrega As Global.System.Data.DataColumn

    Private columnFechaAgrega As Global.System.Data.DataColumn

    Private columnCodigoUsuarioModifica As Global.System.Data.DataColumn

    Private columnCodigoPersonalModifica As Global.System.Data.DataColumn

    Private columnNombreUsuarioModifica As Global.System.Data.DataColumn

    Private columnFechaModifica As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "DiasPorMes"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property AnoMesDiasPorMesColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnAnoMesDiasPorMes
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property AnoDiasPorMesColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnAnoDiasPorMes
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoMesColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoMes
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreMesColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreMes
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NumerodiasPorMesColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNumerodiasPorMes
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property EstadoRegistroColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnEstadoRegistro
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property EliminadoRegistroColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnEliminadoRegistro
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoUsuarioAgregaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoUsuarioAgrega
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoPersonalAgregaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoPersonalAgrega
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreUsuarioAgregaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreUsuarioAgrega
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property FechaAgregaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnFechaAgrega
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoUsuarioModificaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoUsuarioModifica
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoPersonalModificaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoPersonalModifica
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreUsuarioModificaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreUsuarioModifica
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property FechaModificaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnFechaModifica
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As DiasPorMesRow
        Get
            Return CType(Me.Rows(index), DiasPorMesRow)
        End Get
    End Property

    Public Event DiasPorMesRowChanging As DiasPorMesRowChangeEventHandler

    Public Event DiasPorMesRowChanged As DiasPorMesRowChangeEventHandler

    Public Event DiasPorMesRowDeleting As DiasPorMesRowChangeEventHandler

    Public Event DiasPorMesRowDeleted As DiasPorMesRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddDiasPorMesRow(ByVal row As DiasPorMesRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddDiasPorMesRow(ByVal AnoMesDiasPorMes As String, ByVal AnoDiasPorMes As String, ByVal CodigoMes As String, ByVal NombreMes As String, ByVal NumerodiasPorMes As String, ByVal EstadoRegistro As String, ByVal EliminadoRegistro As String, ByVal CodigoUsuarioAgrega As String, ByVal CodigoPersonalAgrega As String, ByVal NombreUsuarioAgrega As String, ByVal FechaAgrega As String, ByVal CodigoUsuarioModifica As String, ByVal CodigoPersonalModifica As String, ByVal NombreUsuarioModifica As String, ByVal FechaModifica As String) As DiasPorMesRow
        Dim rowDiasPorMesRow As DiasPorMesRow = CType(Me.NewRow, DiasPorMesRow)
        Dim columnValuesArray() As Object = New Object() {AnoMesDiasPorMes, AnoDiasPorMes, CodigoMes, NombreMes, NumerodiasPorMes, EstadoRegistro, EliminadoRegistro, CodigoUsuarioAgrega, CodigoPersonalAgrega, NombreUsuarioAgrega, FechaAgrega, CodigoUsuarioModifica, CodigoPersonalModifica, NombreUsuarioModifica, FechaModifica}
        rowDiasPorMesRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowDiasPorMesRow)
        Return rowDiasPorMesRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As DiasPorMesDataTable = CType(MyBase.Clone, DiasPorMesDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New DiasPorMesDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnAnoMesDiasPorMes = MyBase.Columns("AnoMesDiasPorMes")
        Me.columnAnoDiasPorMes = MyBase.Columns("AnoDiasPorMes")
        Me.columnCodigoMes = MyBase.Columns("CodigoMes")
        Me.columnNombreMes = MyBase.Columns("NombreMes")
        Me.columnNumerodiasPorMes = MyBase.Columns("NumerodiasPorMes")
        Me.columnEstadoRegistro = MyBase.Columns("EstadoRegistro")
        Me.columnEliminadoRegistro = MyBase.Columns("EliminadoRegistro")
        Me.columnCodigoUsuarioAgrega = MyBase.Columns("CodigoUsuarioAgrega")
        Me.columnCodigoPersonalAgrega = MyBase.Columns("CodigoPersonalAgrega")
        Me.columnNombreUsuarioAgrega = MyBase.Columns("NombreUsuarioAgrega")
        Me.columnFechaAgrega = MyBase.Columns("FechaAgrega")
        Me.columnCodigoUsuarioModifica = MyBase.Columns("CodigoUsuarioModifica")
        Me.columnCodigoPersonalModifica = MyBase.Columns("CodigoPersonalModifica")
        Me.columnNombreUsuarioModifica = MyBase.Columns("NombreUsuarioModifica")
        Me.columnFechaModifica = MyBase.Columns("FechaModifica")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnAnoMesDiasPorMes = New Global.System.Data.DataColumn("AnoMesDiasPorMes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnAnoMesDiasPorMes)
        Me.columnAnoDiasPorMes = New Global.System.Data.DataColumn("AnoDiasPorMes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnAnoDiasPorMes)
        Me.columnCodigoMes = New Global.System.Data.DataColumn("CodigoMes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoMes)
        Me.columnNombreMes = New Global.System.Data.DataColumn("NombreMes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreMes)
        Me.columnNumerodiasPorMes = New Global.System.Data.DataColumn("NumerodiasPorMes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNumerodiasPorMes)
        Me.columnEstadoRegistro = New Global.System.Data.DataColumn("EstadoRegistro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnEstadoRegistro)
        Me.columnEliminadoRegistro = New Global.System.Data.DataColumn("EliminadoRegistro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnEliminadoRegistro)
        Me.columnCodigoUsuarioAgrega = New Global.System.Data.DataColumn("CodigoUsuarioAgrega", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoUsuarioAgrega)
        Me.columnCodigoPersonalAgrega = New Global.System.Data.DataColumn("CodigoPersonalAgrega", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoPersonalAgrega)
        Me.columnNombreUsuarioAgrega = New Global.System.Data.DataColumn("NombreUsuarioAgrega", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreUsuarioAgrega)
        Me.columnFechaAgrega = New Global.System.Data.DataColumn("FechaAgrega", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnFechaAgrega)
        Me.columnCodigoUsuarioModifica = New Global.System.Data.DataColumn("CodigoUsuarioModifica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoUsuarioModifica)
        Me.columnCodigoPersonalModifica = New Global.System.Data.DataColumn("CodigoPersonalModifica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoPersonalModifica)
        Me.columnNombreUsuarioModifica = New Global.System.Data.DataColumn("NombreUsuarioModifica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreUsuarioModifica)
        Me.columnFechaModifica = New Global.System.Data.DataColumn("FechaModifica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnFechaModifica)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewDiasPorMesRow() As DiasPorMesRow
        Return CType(Me.NewRow, DiasPorMesRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New DiasPorMesRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(DiasPorMesRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.DiasPorMesRowChangedEvent) Is Nothing) Then
            RaiseEvent DiasPorMesRowChanged(Me, New DiasPorMesRowChangeEvent(CType(e.Row, DiasPorMesRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.DiasPorMesRowChangingEvent) Is Nothing) Then
            RaiseEvent DiasPorMesRowChanging(Me, New DiasPorMesRowChangeEvent(CType(e.Row, DiasPorMesRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.DiasPorMesRowDeletedEvent) Is Nothing) Then
            RaiseEvent DiasPorMesRowDeleted(Me, New DiasPorMesRowChangeEvent(CType(e.Row, DiasPorMesRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.DiasPorMesRowDeletingEvent) Is Nothing) Then
            RaiseEvent DiasPorMesRowDeleting(Me, New DiasPorMesRowChangeEvent(CType(e.Row, DiasPorMesRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemoveDiasPorMesRow(ByVal row As DiasPorMesRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "DiasPorMesDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class TipoCambioDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnFechaTipoCambio As Global.System.Data.DataColumn

    Private columnCompraTipoCambio As Global.System.Data.DataColumn

    Private columnVentaTipoCambio As Global.System.Data.DataColumn

    Private columnMesTipoCambio As Global.System.Data.DataColumn

    Private columnAnoTipoCambio As Global.System.Data.DataColumn

    Private columnEstadoRegistro As Global.System.Data.DataColumn

    Private columnEliminadoRegistro As Global.System.Data.DataColumn

    Private columnCodigoUsuarioAgrega As Global.System.Data.DataColumn

    Private columnCodigoPersonalAgrega As Global.System.Data.DataColumn

    Private columnNombreUsuarioAgrega As Global.System.Data.DataColumn

    Private columnFechaAgrega As Global.System.Data.DataColumn

    Private columnCodigoUsuarioModifica As Global.System.Data.DataColumn

    Private columnCodigoPersonalModifica As Global.System.Data.DataColumn

    Private columnNombreUsuarioModifica As Global.System.Data.DataColumn

    Private columnFechaModifica As Global.System.Data.DataColumn

    Private columnCompraEurTipoCambio As Global.System.Data.DataColumn

    Private columnVentaEurTipoCambio As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "TipoCambio"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property FechaTipoCambioColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnFechaTipoCambio
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CompraTipoCambioColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCompraTipoCambio
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property VentaTipoCambioColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnVentaTipoCambio
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property MesTipoCambioColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnMesTipoCambio
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property AnoTipoCambioColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnAnoTipoCambio
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property EstadoRegistroColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnEstadoRegistro
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property EliminadoRegistroColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnEliminadoRegistro
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoUsuarioAgregaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoUsuarioAgrega
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoPersonalAgregaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoPersonalAgrega
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreUsuarioAgregaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreUsuarioAgrega
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property FechaAgregaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnFechaAgrega
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoUsuarioModificaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoUsuarioModifica
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoPersonalModificaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoPersonalModifica
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreUsuarioModificaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreUsuarioModifica
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property FechaModificaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnFechaModifica
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CompraEurTipoCambioColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCompraEurTipoCambio
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property VentaEurTipoCambioColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnVentaEurTipoCambio
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As TipoCambioRow
        Get
            Return CType(Me.Rows(index), TipoCambioRow)
        End Get
    End Property

    Public Event TipoCambioRowChanging As TipoCambioRowChangeEventHandler

    Public Event TipoCambioRowChanged As TipoCambioRowChangeEventHandler

    Public Event TipoCambioRowDeleting As TipoCambioRowChangeEventHandler

    Public Event TipoCambioRowDeleted As TipoCambioRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddTipoCambioRow(ByVal row As TipoCambioRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddTipoCambioRow(
                    ByVal FechaTipoCambio As String,
                    ByVal CompraTipoCambio As Decimal,
                    ByVal VentaTipoCambio As Decimal,
                    ByVal MesTipoCambio As String,
                    ByVal AnoTipoCambio As String,
                    ByVal EstadoRegistro As String,
                    ByVal EliminadoRegistro As String,
                    ByVal CodigoUsuarioAgrega As String,
                    ByVal CodigoPersonalAgrega As String,
                    ByVal NombreUsuarioAgrega As String,
                    ByVal FechaAgrega As String,
                    ByVal CodigoUsuarioModifica As String,
                    ByVal CodigoPersonalModifica As String,
                    ByVal NombreUsuarioModifica As String,
                    ByVal FechaModifica As String,
                    ByVal CompraEurTipoCambio As Decimal,
                    ByVal VentaEurTipoCambio As Decimal) As TipoCambioRow
        Dim rowTipoCambioRow As TipoCambioRow = CType(Me.NewRow, TipoCambioRow)
        Dim columnValuesArray() As Object = New Object() {FechaTipoCambio, CompraTipoCambio, VentaTipoCambio, MesTipoCambio, AnoTipoCambio, EstadoRegistro, EliminadoRegistro, CodigoUsuarioAgrega, CodigoPersonalAgrega, NombreUsuarioAgrega, FechaAgrega, CodigoUsuarioModifica, CodigoPersonalModifica, NombreUsuarioModifica, FechaModifica, CompraEurTipoCambio, VentaEurTipoCambio}
        rowTipoCambioRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowTipoCambioRow)
        Return rowTipoCambioRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As TipoCambioDataTable = CType(MyBase.Clone, TipoCambioDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New TipoCambioDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnFechaTipoCambio = MyBase.Columns("FechaTipoCambio")
        Me.columnCompraTipoCambio = MyBase.Columns("CompraTipoCambio")
        Me.columnVentaTipoCambio = MyBase.Columns("VentaTipoCambio")
        Me.columnMesTipoCambio = MyBase.Columns("MesTipoCambio")
        Me.columnAnoTipoCambio = MyBase.Columns("AnoTipoCambio")
        Me.columnEstadoRegistro = MyBase.Columns("EstadoRegistro")
        Me.columnEliminadoRegistro = MyBase.Columns("EliminadoRegistro")
        Me.columnCodigoUsuarioAgrega = MyBase.Columns("CodigoUsuarioAgrega")
        Me.columnCodigoPersonalAgrega = MyBase.Columns("CodigoPersonalAgrega")
        Me.columnNombreUsuarioAgrega = MyBase.Columns("NombreUsuarioAgrega")
        Me.columnFechaAgrega = MyBase.Columns("FechaAgrega")
        Me.columnCodigoUsuarioModifica = MyBase.Columns("CodigoUsuarioModifica")
        Me.columnCodigoPersonalModifica = MyBase.Columns("CodigoPersonalModifica")
        Me.columnNombreUsuarioModifica = MyBase.Columns("NombreUsuarioModifica")
        Me.columnFechaModifica = MyBase.Columns("FechaModifica")
        Me.columnCompraEurTipoCambio = MyBase.Columns("CompraEurTipoCambio")
        Me.columnVentaEurTipoCambio = MyBase.Columns("VentaEurTipoCambio")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnFechaTipoCambio = New Global.System.Data.DataColumn("FechaTipoCambio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnFechaTipoCambio)
        Me.columnCompraTipoCambio = New Global.System.Data.DataColumn("CompraTipoCambio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCompraTipoCambio)
        Me.columnVentaTipoCambio = New Global.System.Data.DataColumn("VentaTipoCambio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnVentaTipoCambio)
        Me.columnMesTipoCambio = New Global.System.Data.DataColumn("MesTipoCambio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnMesTipoCambio)
        Me.columnAnoTipoCambio = New Global.System.Data.DataColumn("AnoTipoCambio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnAnoTipoCambio)
        Me.columnEstadoRegistro = New Global.System.Data.DataColumn("EstadoRegistro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnEstadoRegistro)
        Me.columnEliminadoRegistro = New Global.System.Data.DataColumn("EliminadoRegistro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnEliminadoRegistro)
        Me.columnCodigoUsuarioAgrega = New Global.System.Data.DataColumn("CodigoUsuarioAgrega", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoUsuarioAgrega)
        Me.columnCodigoPersonalAgrega = New Global.System.Data.DataColumn("CodigoPersonalAgrega", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoPersonalAgrega)
        Me.columnNombreUsuarioAgrega = New Global.System.Data.DataColumn("NombreUsuarioAgrega", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreUsuarioAgrega)
        Me.columnFechaAgrega = New Global.System.Data.DataColumn("FechaAgrega", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnFechaAgrega)
        Me.columnCodigoUsuarioModifica = New Global.System.Data.DataColumn("CodigoUsuarioModifica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoUsuarioModifica)
        Me.columnCodigoPersonalModifica = New Global.System.Data.DataColumn("CodigoPersonalModifica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoPersonalModifica)
        Me.columnNombreUsuarioModifica = New Global.System.Data.DataColumn("NombreUsuarioModifica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreUsuarioModifica)
        Me.columnFechaModifica = New Global.System.Data.DataColumn("FechaModifica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnFechaModifica)
        Me.columnCompraEurTipoCambio = New Global.System.Data.DataColumn("CompraEurTipoCambio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCompraEurTipoCambio)
        Me.columnVentaEurTipoCambio = New Global.System.Data.DataColumn("VentaEurTipoCambio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnVentaEurTipoCambio)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewTipoCambioRow() As TipoCambioRow
        Return CType(Me.NewRow, TipoCambioRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New TipoCambioRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(TipoCambioRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.TipoCambioRowChangedEvent) Is Nothing) Then
            RaiseEvent TipoCambioRowChanged(Me, New TipoCambioRowChangeEvent(CType(e.Row, TipoCambioRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.TipoCambioRowChangingEvent) Is Nothing) Then
            RaiseEvent TipoCambioRowChanging(Me, New TipoCambioRowChangeEvent(CType(e.Row, TipoCambioRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.TipoCambioRowDeletedEvent) Is Nothing) Then
            RaiseEvent TipoCambioRowDeleted(Me, New TipoCambioRowChangeEvent(CType(e.Row, TipoCambioRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.TipoCambioRowDeletingEvent) Is Nothing) Then
            RaiseEvent TipoCambioRowDeleting(Me, New TipoCambioRowChangeEvent(CType(e.Row, TipoCambioRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemoveTipoCambioRow(ByVal row As TipoCambioRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "TipoCambioDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class ReportePersonalActivoHorasDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnPersonalActivo As Global.System.Data.DataColumn

    Private columnPersonalActivoCivil As Global.System.Data.DataColumn

    Private columnPersonalActivoElectromecanica As Global.System.Data.DataColumn

    Private columnPersonalActivoSupervision As Global.System.Data.DataColumn

    Private columnPersonalActivoAdmOfe As Global.System.Data.DataColumn

    Private columnPersonalActivoCalidad As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "ReportePersonalActivoHoras"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property PersonalActivoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnPersonalActivo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property PersonalActivoCivilColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnPersonalActivoCivil
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property PersonalActivoElectromecanicaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnPersonalActivoElectromecanica
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property PersonalActivoSupervisionColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnPersonalActivoSupervision
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property PersonalActivoAdmOfeColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnPersonalActivoAdmOfe
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property PersonalActivoCalidadColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnPersonalActivoCalidad
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As ReportePersonalActivoHorasRow
        Get
            Return CType(Me.Rows(index), ReportePersonalActivoHorasRow)
        End Get
    End Property

    Public Event ReportePersonalActivoHorasRowChanging As ReportePersonalActivoHorasRowChangeEventHandler

    Public Event ReportePersonalActivoHorasRowChanged As ReportePersonalActivoHorasRowChangeEventHandler

    Public Event ReportePersonalActivoHorasRowDeleting As ReportePersonalActivoHorasRowChangeEventHandler

    Public Event ReportePersonalActivoHorasRowDeleted As ReportePersonalActivoHorasRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddReportePersonalActivoHorasRow(ByVal row As ReportePersonalActivoHorasRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddReportePersonalActivoHorasRow(ByVal PersonalActivo As String, ByVal PersonalActivoCivil As String, ByVal PersonalActivoElectromecanica As String, ByVal PersonalActivoSupervision As String, ByVal PersonalActivoAdmOfe As String, ByVal PersonalActivoCalidad As String) As ReportePersonalActivoHorasRow
        Dim rowReportePersonalActivoHorasRow As ReportePersonalActivoHorasRow = CType(Me.NewRow, ReportePersonalActivoHorasRow)
        Dim columnValuesArray() As Object = New Object() {PersonalActivo, PersonalActivoCivil, PersonalActivoElectromecanica, PersonalActivoSupervision, PersonalActivoAdmOfe, PersonalActivoCalidad}
        rowReportePersonalActivoHorasRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowReportePersonalActivoHorasRow)
        Return rowReportePersonalActivoHorasRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As ReportePersonalActivoHorasDataTable = CType(MyBase.Clone, ReportePersonalActivoHorasDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New ReportePersonalActivoHorasDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnPersonalActivo = MyBase.Columns("PersonalActivo")
        Me.columnPersonalActivoCivil = MyBase.Columns("PersonalActivoCivil")
        Me.columnPersonalActivoElectromecanica = MyBase.Columns("PersonalActivoElectromecanica")
        Me.columnPersonalActivoSupervision = MyBase.Columns("PersonalActivoSupervision")
        Me.columnPersonalActivoAdmOfe = MyBase.Columns("PersonalActivoAdmOfe")
        Me.columnPersonalActivoCalidad = MyBase.Columns("PersonalActivoCalidad")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnPersonalActivo = New Global.System.Data.DataColumn("PersonalActivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnPersonalActivo)
        Me.columnPersonalActivoCivil = New Global.System.Data.DataColumn("PersonalActivoCivil", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnPersonalActivoCivil)
        Me.columnPersonalActivoElectromecanica = New Global.System.Data.DataColumn("PersonalActivoElectromecanica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnPersonalActivoElectromecanica)
        Me.columnPersonalActivoSupervision = New Global.System.Data.DataColumn("PersonalActivoSupervision", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnPersonalActivoSupervision)
        Me.columnPersonalActivoAdmOfe = New Global.System.Data.DataColumn("PersonalActivoAdmOfe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnPersonalActivoAdmOfe)
        Me.columnPersonalActivoCalidad = New Global.System.Data.DataColumn("PersonalActivoCalidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnPersonalActivoCalidad)
        Me.columnPersonalActivo.Caption = "PersonalHr"
        Me.columnPersonalActivoCivil.Caption = "PersonalHrCivil"
        Me.columnPersonalActivoElectromecanica.Caption = "PersonalHrElectromecanica"
        Me.columnPersonalActivoSupervision.Caption = "PersonalHrSupervision"
        Me.columnPersonalActivoAdmOfe.Caption = "PersonalHrAdmOfe"
        Me.columnPersonalActivoCalidad.Caption = "PersonalHrCalidad"
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewReportePersonalActivoHorasRow() As ReportePersonalActivoHorasRow
        Return CType(Me.NewRow, ReportePersonalActivoHorasRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New ReportePersonalActivoHorasRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(ReportePersonalActivoHorasRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.ReportePersonalActivoHorasRowChangedEvent) Is Nothing) Then
            RaiseEvent ReportePersonalActivoHorasRowChanged(Me, New ReportePersonalActivoHorasRowChangeEvent(CType(e.Row, ReportePersonalActivoHorasRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.ReportePersonalActivoHorasRowChangingEvent) Is Nothing) Then
            RaiseEvent ReportePersonalActivoHorasRowChanging(Me, New ReportePersonalActivoHorasRowChangeEvent(CType(e.Row, ReportePersonalActivoHorasRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.ReportePersonalActivoHorasRowDeletedEvent) Is Nothing) Then
            RaiseEvent ReportePersonalActivoHorasRowDeleted(Me, New ReportePersonalActivoHorasRowChangeEvent(CType(e.Row, ReportePersonalActivoHorasRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.ReportePersonalActivoHorasRowDeletingEvent) Is Nothing) Then
            RaiseEvent ReportePersonalActivoHorasRowDeleting(Me, New ReportePersonalActivoHorasRowChangeEvent(CType(e.Row, ReportePersonalActivoHorasRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemoveReportePersonalActivoHorasRow(ByVal row As ReportePersonalActivoHorasRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "ReportePersonalActivoHorasDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class RegContabDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnPeriodoRegContab As Global.System.Data.DataColumn

    Private columnCodigoOrigen As Global.System.Data.DataColumn

    Private columnNombreOrigen As Global.System.Data.DataColumn

    Private columnCodigoFile As Global.System.Data.DataColumn

    Private columnNombreFile As Global.System.Data.DataColumn

    Private columnNumeroVoucherRegContab As Global.System.Data.DataColumn

    Private columnClaveRegContab As Global.System.Data.DataColumn

    Private columnDiaVoucherRegContab As Global.System.Data.DataColumn

    Private columnFechaVoucherrgContab As Global.System.Data.DataColumn

    Private columnCodigoAuxiliar As Global.System.Data.DataColumn

    Private columnDescripcionAuxiliar As Global.System.Data.DataColumn

    Private columnTipoDocumento As Global.System.Data.DataColumn

    Private columnNombreDocumento As Global.System.Data.DataColumn

    Private columnSerieDocumento As Global.System.Data.DataColumn

    Private columnNumeroDocumento As Global.System.Data.DataColumn

    Private columnFechaDocumento As Global.System.Data.DataColumn

    Private columnMonedaDocumento As Global.System.Data.DataColumn

    Private columnVentaTipoCambio As Global.System.Data.DataColumn

    Private columnPrecioVtaRegContab As Global.System.Data.DataColumn

    Private columnExoneradoRegContab As Global.System.Data.DataColumn

    Private columnValorVtaRegContab As Global.System.Data.DataColumn

    Private columnIgvPar As Global.System.Data.DataColumn

    Private columnPrecioVtaSolRegContab As Global.System.Data.DataColumn

    Private columnExoneradoSolRegContab As Global.System.Data.DataColumn

    Private columnValorVtaSolRegContab As Global.System.Data.DataColumn

    Private columnIgvSolRegContab As Global.System.Data.DataColumn

    Private columnValorVtaSolRegContab1 As Global.System.Data.DataColumn

    Private columnIgvSolRegContab1 As Global.System.Data.DataColumn

    Private columnValorVtaSolRegContab2 As Global.System.Data.DataColumn

    Private columnIgvSOlRegContab2 As Global.System.Data.DataColumn

    Private columnGlosaRegContab As Global.System.Data.DataColumn

    Private columnCodigoUsuarioAgrega_ As Global.System.Data.DataColumn

    Private columnCodigoPersonalAgrega_ As Global.System.Data.DataColumn

    Private columnNombreUsuarioAgrega As Global.System.Data.DataColumn

    Private columnFechaAgrega As Global.System.Data.DataColumn

    Private columnCodigoUsuarioModifica As Global.System.Data.DataColumn

    Private columnCodigoPersonalModifica As Global.System.Data.DataColumn

    Private columnNombreUsuarioModifica As Global.System.Data.DataColumn

    Private columnFechaModifica As Global.System.Data.DataColumn

    Private columnTipo As Global.System.Data.DataColumn

    Private columnIgv As Global.System.Data.DataColumn

    Private columnFecha_Vencimiento As Global.System.Data.DataColumn

    Private columnNumeroPapeleta As Global.System.Data.DataColumn

    Private columnFechaDetraccion As Global.System.Data.DataColumn

    Private columnTipoDoc1 As Global.System.Data.DataColumn

    Private columnSerie1 As Global.System.Data.DataColumn

    Private columnNumero1 As Global.System.Data.DataColumn

    Private columnFecha1 As Global.System.Data.DataColumn

    Private columnCuenta As Global.System.Data.DataColumn

    Private columnnombrecuenta As Global.System.Data.DataColumn

    Private columnDebeHaber As Global.System.Data.DataColumn

    Private columnImporteSol As Global.System.Data.DataColumn

    Private columnImporteDol As Global.System.Data.DataColumn

    Private columnTipoLibro As Global.System.Data.DataColumn

    Private columnCorrelativo As Global.System.Data.DataColumn

    Private columnImporteDebe As Global.System.Data.DataColumn

    Private columnImporteHaber As Global.System.Data.DataColumn

    Private columnImporteDebeAcumulado As Global.System.Data.DataColumn

    Private columnImporteHaberAcumulado As Global.System.Data.DataColumn

    Private columnCentroCosto As Global.System.Data.DataColumn

    Private columnArea As Global.System.Data.DataColumn

    Private columnSaldos As Global.System.Data.DataColumn

    Private columnClave As Global.System.Data.DataColumn

    Private columnGirado As Global.System.Data.DataColumn

    Private columnImporteRegContabCabe As Global.System.Data.DataColumn

    Private columnRetencionRegContabCabe As Global.System.Data.DataColumn

    Private columnCodigoIngEgr As Global.System.Data.DataColumn

    Private columnNombreIngEgr As Global.System.Data.DataColumn

    Private columnNombreCentroCosto As Global.System.Data.DataColumn

    Private columnCodigoFlujoCaja As Global.System.Data.DataColumn

    Private columnNombreFlujoCaja As Global.System.Data.DataColumn

    Private columnFlagDsctoAfpSnp As Global.System.Data.DataColumn

    Private columnCodigoGastoReparable As Global.System.Data.DataColumn

    Private columnNombreGastoReparable As Global.System.Data.DataColumn

    Private columnCantidad As Global.System.Data.DataColumn

    Private columnCodigoAlmacen As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "RegContab"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property PeriodoRegContabColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnPeriodoRegContab
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoOrigenColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoOrigen
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreOrigenColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreOrigen
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoFileColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoFile
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreFileColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreFile
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NumeroVoucherRegContabColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNumeroVoucherRegContab
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ClaveRegContabColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnClaveRegContab
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property DiaVoucherRegContabColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnDiaVoucherRegContab
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property FechaVoucherrgContabColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnFechaVoucherrgContab
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoAuxiliarColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoAuxiliar
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property DescripcionAuxiliarColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnDescripcionAuxiliar
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property TipoDocumentoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnTipoDocumento
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreDocumentoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreDocumento
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property SerieDocumentoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnSerieDocumento
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NumeroDocumentoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNumeroDocumento
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property FechaDocumentoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnFechaDocumento
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property MonedaDocumentoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnMonedaDocumento
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property VentaTipoCambioColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnVentaTipoCambio
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property PrecioVtaRegContabColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnPrecioVtaRegContab
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ExoneradoRegContabColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnExoneradoRegContab
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ValorVtaRegContabColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnValorVtaRegContab
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property IgvParColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnIgvPar
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property PrecioVtaSolRegContabColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnPrecioVtaSolRegContab
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ExoneradoSolRegContabColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnExoneradoSolRegContab
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ValorVtaSolRegContabColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnValorVtaSolRegContab
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property IgvSolRegContabColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnIgvSolRegContab
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ValorVtaSolRegContab1Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnValorVtaSolRegContab1
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property IgvSolRegContab1Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnIgvSolRegContab1
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ValorVtaSolRegContab2Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnValorVtaSolRegContab2
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property IgvSOlRegContab2Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnIgvSOlRegContab2
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property GlosaRegContabColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnGlosaRegContab
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoUsuarioAgrega_Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoUsuarioAgrega_
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoPersonalAgrega_Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoPersonalAgrega_
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreUsuarioAgregaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreUsuarioAgrega
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property FechaAgregaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnFechaAgrega
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoUsuarioModificaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoUsuarioModifica
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoPersonalModificaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoPersonalModifica
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreUsuarioModificaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreUsuarioModifica
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property FechaModificaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnFechaModifica
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnTipo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property IgvColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnIgv
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Fecha_VencimientoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnFecha_Vencimiento
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NumeroPapeletaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNumeroPapeleta
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property FechaDetraccionColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnFechaDetraccion
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property TipoDoc1Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnTipoDoc1
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Serie1Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnSerie1
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Numero1Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnNumero1
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Fecha1Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnFecha1
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CuentaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property nombrecuentaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnnombrecuenta
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property DebeHaberColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnDebeHaber
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ImporteSolColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnImporteSol
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ImporteDolColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnImporteDol
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property TipoLibroColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnTipoLibro
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CorrelativoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCorrelativo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ImporteDebeColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnImporteDebe
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ImporteHaberColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnImporteHaber
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ImporteDebeAcumuladoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnImporteDebeAcumulado
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ImporteHaberAcumuladoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnImporteHaberAcumulado
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CentroCostoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCentroCosto
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property AreaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnArea
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property SaldosColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnSaldos
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnClave
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property GiradoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnGirado
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ImporteRegContabCabeColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnImporteRegContabCabe
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property RetencionRegContabCabeColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnRetencionRegContabCabe
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoIngEgrColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoIngEgr
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreIngEgrColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreIngEgr
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreCentroCostoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreCentroCosto
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoFlujoCajaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoFlujoCaja
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreFlujoCajaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreFlujoCaja
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property FlagDsctoAfpSnpColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnFlagDsctoAfpSnp
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoGastoReparableColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoGastoReparable
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreGastoReparableColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreGastoReparable
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCantidad
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoAlmacenColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoAlmacen
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As RegContabRow
        Get
            Return CType(Me.Rows(index), RegContabRow)
        End Get
    End Property

    Public Event RegContabRowChanging As RegContabRowChangeEventHandler

    Public Event RegContabRowChanged As RegContabRowChangeEventHandler

    Public Event RegContabRowDeleting As RegContabRowChangeEventHandler

    Public Event RegContabRowDeleted As RegContabRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddRegContabRow(ByVal row As RegContabRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddRegContabRow(
                    ByVal PeriodoRegContab As String,
                    ByVal CodigoOrigen As String,
                    ByVal NombreOrigen As String,
                    ByVal CodigoFile As String,
                    ByVal NombreFile As String,
                    ByVal NumeroVoucherRegContab As String,
                    ByVal ClaveRegContab As String,
                    ByVal DiaVoucherRegContab As String,
                    ByVal FechaVoucherrgContab As Date,
                    ByVal CodigoAuxiliar As String,
                    ByVal DescripcionAuxiliar As String,
                    ByVal TipoDocumento As String,
                    ByVal NombreDocumento As String,
                    ByVal SerieDocumento As String,
                    ByVal NumeroDocumento As String,
                    ByVal FechaDocumento As String,
                    ByVal MonedaDocumento As String,
                    ByVal VentaTipoCambio As Decimal,
                    ByVal PrecioVtaRegContab As Decimal,
                    ByVal ExoneradoRegContab As Decimal,
                    ByVal ValorVtaRegContab As Decimal,
                    ByVal IgvPar As Decimal,
                    ByVal PrecioVtaSolRegContab As Decimal,
                    ByVal ExoneradoSolRegContab As Decimal,
                    ByVal ValorVtaSolRegContab As Decimal,
                    ByVal IgvSolRegContab As Decimal,
                    ByVal ValorVtaSolRegContab1 As Decimal,
                    ByVal IgvSolRegContab1 As Decimal,
                    ByVal ValorVtaSolRegContab2 As Decimal,
                    ByVal IgvSOlRegContab2 As Decimal,
                    ByVal GlosaRegContab As String,
                    ByVal CodigoUsuarioAgrega_ As String,
                    ByVal CodigoPersonalAgrega_ As String,
                    ByVal NombreUsuarioAgrega As String,
                    ByVal FechaAgrega As String,
                    ByVal CodigoUsuarioModifica As String,
                    ByVal CodigoPersonalModifica As String,
                    ByVal NombreUsuarioModifica As String,
                    ByVal FechaModifica As String,
                    ByVal Tipo As String,
                    ByVal Igv As Decimal,
                    ByVal Fecha_Vencimiento As Date,
                    ByVal NumeroPapeleta As String,
                    ByVal FechaDetraccion As String,
                    ByVal TipoDoc1 As String,
                    ByVal Serie1 As String,
                    ByVal Numero1 As String,
                    ByVal Fecha1 As String,
                    ByVal Cuenta As String,
                    ByVal nombrecuenta As String,
                    ByVal DebeHaber As String,
                    ByVal ImporteSol As Decimal,
                    ByVal ImporteDol As Decimal,
                    ByVal TipoLibro As String,
                    ByVal Correlativo As String,
                    ByVal ImporteDebe As Decimal,
                    ByVal ImporteHaber As Decimal,
                    ByVal ImporteDebeAcumulado As Decimal,
                    ByVal ImporteHaberAcumulado As Decimal,
                    ByVal CentroCosto As String,
                    ByVal Area As String,
                    ByVal Saldos As Decimal,
                    ByVal Clave As String,
                    ByVal Girado As String,
                    ByVal ImporteRegContabCabe As Decimal,
                    ByVal RetencionRegContabCabe As Decimal,
                    ByVal CodigoIngEgr As String,
                    ByVal NombreIngEgr As String,
                    ByVal NombreCentroCosto As String,
                    ByVal CodigoFlujoCaja As String,
                    ByVal NombreFlujoCaja As String,
                    ByVal FlagDsctoAfpSnp As String,
                    ByVal CodigoGastoReparable As String,
                    ByVal NombreGastoReparable As String,
                    ByVal Cantidad As Decimal,
                    ByVal CodigoAlmacen As String) As RegContabRow
        Dim rowRegContabRow As RegContabRow = CType(Me.NewRow, RegContabRow)
        Dim columnValuesArray() As Object = New Object() {PeriodoRegContab, CodigoOrigen, NombreOrigen, CodigoFile, NombreFile, NumeroVoucherRegContab, ClaveRegContab, DiaVoucherRegContab, FechaVoucherrgContab, CodigoAuxiliar, DescripcionAuxiliar, TipoDocumento, NombreDocumento, SerieDocumento, NumeroDocumento, FechaDocumento, MonedaDocumento, VentaTipoCambio, PrecioVtaRegContab, ExoneradoRegContab, ValorVtaRegContab, IgvPar, PrecioVtaSolRegContab, ExoneradoSolRegContab, ValorVtaSolRegContab, IgvSolRegContab, ValorVtaSolRegContab1, IgvSolRegContab1, ValorVtaSolRegContab2, IgvSOlRegContab2, GlosaRegContab, CodigoUsuarioAgrega_, CodigoPersonalAgrega_, NombreUsuarioAgrega, FechaAgrega, CodigoUsuarioModifica, CodigoPersonalModifica, NombreUsuarioModifica, FechaModifica, Tipo, Igv, Fecha_Vencimiento, NumeroPapeleta, FechaDetraccion, TipoDoc1, Serie1, Numero1, Fecha1, Cuenta, nombrecuenta, DebeHaber, ImporteSol, ImporteDol, TipoLibro, Correlativo, ImporteDebe, ImporteHaber, ImporteDebeAcumulado, ImporteHaberAcumulado, CentroCosto, Area, Saldos, Clave, Girado, ImporteRegContabCabe, RetencionRegContabCabe, CodigoIngEgr, NombreIngEgr, NombreCentroCosto, CodigoFlujoCaja, NombreFlujoCaja, FlagDsctoAfpSnp, CodigoGastoReparable, NombreGastoReparable, Cantidad, CodigoAlmacen}
        rowRegContabRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowRegContabRow)
        Return rowRegContabRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As RegContabDataTable = CType(MyBase.Clone, RegContabDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New RegContabDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnPeriodoRegContab = MyBase.Columns("PeriodoRegContab")
        Me.columnCodigoOrigen = MyBase.Columns("CodigoOrigen")
        Me.columnNombreOrigen = MyBase.Columns("NombreOrigen")
        Me.columnCodigoFile = MyBase.Columns("CodigoFile")
        Me.columnNombreFile = MyBase.Columns("NombreFile")
        Me.columnNumeroVoucherRegContab = MyBase.Columns("NumeroVoucherRegContab")
        Me.columnClaveRegContab = MyBase.Columns("ClaveRegContab")
        Me.columnDiaVoucherRegContab = MyBase.Columns("DiaVoucherRegContab")
        Me.columnFechaVoucherrgContab = MyBase.Columns("FechaVoucherrgContab")
        Me.columnCodigoAuxiliar = MyBase.Columns("CodigoAuxiliar")
        Me.columnDescripcionAuxiliar = MyBase.Columns("DescripcionAuxiliar")
        Me.columnTipoDocumento = MyBase.Columns("TipoDocumento")
        Me.columnNombreDocumento = MyBase.Columns("NombreDocumento")
        Me.columnSerieDocumento = MyBase.Columns("SerieDocumento")
        Me.columnNumeroDocumento = MyBase.Columns("NumeroDocumento")
        Me.columnFechaDocumento = MyBase.Columns("FechaDocumento")
        Me.columnMonedaDocumento = MyBase.Columns("MonedaDocumento")
        Me.columnVentaTipoCambio = MyBase.Columns("VentaTipoCambio")
        Me.columnPrecioVtaRegContab = MyBase.Columns("PrecioVtaRegContab")
        Me.columnExoneradoRegContab = MyBase.Columns("ExoneradoRegContab")
        Me.columnValorVtaRegContab = MyBase.Columns("ValorVtaRegContab")
        Me.columnIgvPar = MyBase.Columns("IgvPar")
        Me.columnPrecioVtaSolRegContab = MyBase.Columns("PrecioVtaSolRegContab")
        Me.columnExoneradoSolRegContab = MyBase.Columns("ExoneradoSolRegContab")
        Me.columnValorVtaSolRegContab = MyBase.Columns("ValorVtaSolRegContab")
        Me.columnIgvSolRegContab = MyBase.Columns("IgvSolRegContab")
        Me.columnValorVtaSolRegContab1 = MyBase.Columns("ValorVtaSolRegContab1")
        Me.columnIgvSolRegContab1 = MyBase.Columns("IgvSolRegContab1")
        Me.columnValorVtaSolRegContab2 = MyBase.Columns("ValorVtaSolRegContab2")
        Me.columnIgvSOlRegContab2 = MyBase.Columns("IgvSolRegContab2")
        Me.columnGlosaRegContab = MyBase.Columns("GlosaRegContab")
        Me.columnCodigoUsuarioAgrega_ = MyBase.Columns("CodigoUsuarioAgrega ")
        Me.columnCodigoPersonalAgrega_ = MyBase.Columns("CodigoPersonalAgrega ")
        Me.columnNombreUsuarioAgrega = MyBase.Columns("NombreUsuarioAgrega")
        Me.columnFechaAgrega = MyBase.Columns("FechaAgrega")
        Me.columnCodigoUsuarioModifica = MyBase.Columns("CodigoUsuarioModifica")
        Me.columnCodigoPersonalModifica = MyBase.Columns("CodigoPersonalModifica")
        Me.columnNombreUsuarioModifica = MyBase.Columns("NombreUsuarioModifica")
        Me.columnFechaModifica = MyBase.Columns("FechaModifica")
        Me.columnTipo = MyBase.Columns("Tipo")
        Me.columnIgv = MyBase.Columns("Igv")
        Me.columnFecha_Vencimiento = MyBase.Columns("Fecha Vencimiento")
        Me.columnNumeroPapeleta = MyBase.Columns("NumeroPapeleta")
        Me.columnFechaDetraccion = MyBase.Columns("FechaDetraccion")
        Me.columnTipoDoc1 = MyBase.Columns("TipoDoc1")
        Me.columnSerie1 = MyBase.Columns("Serie1")
        Me.columnNumero1 = MyBase.Columns("Numero1")
        Me.columnFecha1 = MyBase.Columns("Fecha1")
        Me.columnCuenta = MyBase.Columns("Cuenta")
        Me.columnnombrecuenta = MyBase.Columns("nombrecuenta")
        Me.columnDebeHaber = MyBase.Columns("DebeHaber")
        Me.columnImporteSol = MyBase.Columns("ImporteSol")
        Me.columnImporteDol = MyBase.Columns("ImporteDol")
        Me.columnTipoLibro = MyBase.Columns("TipoLibro")
        Me.columnCorrelativo = MyBase.Columns("Correlativo")
        Me.columnImporteDebe = MyBase.Columns("ImporteDebe")
        Me.columnImporteHaber = MyBase.Columns("ImporteHaber")
        Me.columnImporteDebeAcumulado = MyBase.Columns("ImporteDebeAcumulado")
        Me.columnImporteHaberAcumulado = MyBase.Columns("ImporteHaberAcumulado")
        Me.columnCentroCosto = MyBase.Columns("CentroCosto")
        Me.columnArea = MyBase.Columns("Area")
        Me.columnSaldos = MyBase.Columns("Saldos")
        Me.columnClave = MyBase.Columns("Clave")
        Me.columnGirado = MyBase.Columns("Girado")
        Me.columnImporteRegContabCabe = MyBase.Columns("ImporteRegContabCabe")
        Me.columnRetencionRegContabCabe = MyBase.Columns("RetencionRegContabCabe")
        Me.columnCodigoIngEgr = MyBase.Columns("CodigoIngEgr")
        Me.columnNombreIngEgr = MyBase.Columns("NombreIngEgr")
        Me.columnNombreCentroCosto = MyBase.Columns("NombreCentroCosto")
        Me.columnCodigoFlujoCaja = MyBase.Columns("CodigoFlujoCaja")
        Me.columnNombreFlujoCaja = MyBase.Columns("NombreFlujoCaja")
        Me.columnFlagDsctoAfpSnp = MyBase.Columns("FlagDsctoAfpSnp")
        Me.columnCodigoGastoReparable = MyBase.Columns("CodigoGastoReparable")
        Me.columnNombreGastoReparable = MyBase.Columns("NombreGastoReparable")
        Me.columnCantidad = MyBase.Columns("Cantidad")
        Me.columnCodigoAlmacen = MyBase.Columns("CodigoAlmacen")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnPeriodoRegContab = New Global.System.Data.DataColumn("PeriodoRegContab", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnPeriodoRegContab)
        Me.columnCodigoOrigen = New Global.System.Data.DataColumn("CodigoOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoOrigen)
        Me.columnNombreOrigen = New Global.System.Data.DataColumn("NombreOrigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreOrigen)
        Me.columnCodigoFile = New Global.System.Data.DataColumn("CodigoFile", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoFile)
        Me.columnNombreFile = New Global.System.Data.DataColumn("NombreFile", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreFile)
        Me.columnNumeroVoucherRegContab = New Global.System.Data.DataColumn("NumeroVoucherRegContab", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNumeroVoucherRegContab)
        Me.columnClaveRegContab = New Global.System.Data.DataColumn("ClaveRegContab", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnClaveRegContab)
        Me.columnDiaVoucherRegContab = New Global.System.Data.DataColumn("DiaVoucherRegContab", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnDiaVoucherRegContab)
        Me.columnFechaVoucherrgContab = New Global.System.Data.DataColumn("FechaVoucherrgContab", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnFechaVoucherrgContab)
        Me.columnCodigoAuxiliar = New Global.System.Data.DataColumn("CodigoAuxiliar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoAuxiliar)
        Me.columnDescripcionAuxiliar = New Global.System.Data.DataColumn("DescripcionAuxiliar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnDescripcionAuxiliar)
        Me.columnTipoDocumento = New Global.System.Data.DataColumn("TipoDocumento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnTipoDocumento)
        Me.columnNombreDocumento = New Global.System.Data.DataColumn("NombreDocumento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreDocumento)
        Me.columnSerieDocumento = New Global.System.Data.DataColumn("SerieDocumento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnSerieDocumento)
        Me.columnNumeroDocumento = New Global.System.Data.DataColumn("NumeroDocumento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNumeroDocumento)
        Me.columnFechaDocumento = New Global.System.Data.DataColumn("FechaDocumento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnFechaDocumento)
        Me.columnMonedaDocumento = New Global.System.Data.DataColumn("MonedaDocumento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnMonedaDocumento)
        Me.columnVentaTipoCambio = New Global.System.Data.DataColumn("VentaTipoCambio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnVentaTipoCambio)
        Me.columnPrecioVtaRegContab = New Global.System.Data.DataColumn("PrecioVtaRegContab", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnPrecioVtaRegContab)
        Me.columnExoneradoRegContab = New Global.System.Data.DataColumn("ExoneradoRegContab", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnExoneradoRegContab)
        Me.columnValorVtaRegContab = New Global.System.Data.DataColumn("ValorVtaRegContab", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnValorVtaRegContab)
        Me.columnIgvPar = New Global.System.Data.DataColumn("IgvPar", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnIgvPar)
        Me.columnPrecioVtaSolRegContab = New Global.System.Data.DataColumn("PrecioVtaSolRegContab", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnPrecioVtaSolRegContab)
        Me.columnExoneradoSolRegContab = New Global.System.Data.DataColumn("ExoneradoSolRegContab", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnExoneradoSolRegContab)
        Me.columnValorVtaSolRegContab = New Global.System.Data.DataColumn("ValorVtaSolRegContab", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnValorVtaSolRegContab)
        Me.columnIgvSolRegContab = New Global.System.Data.DataColumn("IgvSolRegContab", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnIgvSolRegContab)
        Me.columnValorVtaSolRegContab1 = New Global.System.Data.DataColumn("ValorVtaSolRegContab1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnValorVtaSolRegContab1)
        Me.columnIgvSolRegContab1 = New Global.System.Data.DataColumn("IgvSolRegContab1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnIgvSolRegContab1)
        Me.columnValorVtaSolRegContab2 = New Global.System.Data.DataColumn("ValorVtaSolRegContab2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnValorVtaSolRegContab2)
        Me.columnIgvSOlRegContab2 = New Global.System.Data.DataColumn("IgvSolRegContab2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        Me.columnIgvSOlRegContab2.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "IgvSOlRegContab2")
        Me.columnIgvSOlRegContab2.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "IgvSOlRegContab2Column")
        Me.columnIgvSOlRegContab2.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnIgvSOlRegContab2")
        Me.columnIgvSOlRegContab2.ExtendedProperties.Add("Generator_UserColumnName", "IgvSolRegContab2")
        MyBase.Columns.Add(Me.columnIgvSOlRegContab2)
        Me.columnGlosaRegContab = New Global.System.Data.DataColumn("GlosaRegContab", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnGlosaRegContab)
        Me.columnCodigoUsuarioAgrega_ = New Global.System.Data.DataColumn("CodigoUsuarioAgrega ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoUsuarioAgrega_)
        Me.columnCodigoPersonalAgrega_ = New Global.System.Data.DataColumn("CodigoPersonalAgrega ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoPersonalAgrega_)
        Me.columnNombreUsuarioAgrega = New Global.System.Data.DataColumn("NombreUsuarioAgrega", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreUsuarioAgrega)
        Me.columnFechaAgrega = New Global.System.Data.DataColumn("FechaAgrega", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnFechaAgrega)
        Me.columnCodigoUsuarioModifica = New Global.System.Data.DataColumn("CodigoUsuarioModifica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoUsuarioModifica)
        Me.columnCodigoPersonalModifica = New Global.System.Data.DataColumn("CodigoPersonalModifica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoPersonalModifica)
        Me.columnNombreUsuarioModifica = New Global.System.Data.DataColumn("NombreUsuarioModifica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreUsuarioModifica)
        Me.columnFechaModifica = New Global.System.Data.DataColumn("FechaModifica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnFechaModifica)
        Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnTipo)
        Me.columnIgv = New Global.System.Data.DataColumn("Igv", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnIgv)
        Me.columnFecha_Vencimiento = New Global.System.Data.DataColumn("Fecha Vencimiento", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnFecha_Vencimiento)
        Me.columnNumeroPapeleta = New Global.System.Data.DataColumn("NumeroPapeleta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNumeroPapeleta)
        Me.columnFechaDetraccion = New Global.System.Data.DataColumn("FechaDetraccion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnFechaDetraccion)
        Me.columnTipoDoc1 = New Global.System.Data.DataColumn("TipoDoc1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnTipoDoc1)
        Me.columnSerie1 = New Global.System.Data.DataColumn("Serie1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnSerie1)
        Me.columnNumero1 = New Global.System.Data.DataColumn("Numero1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNumero1)
        Me.columnFecha1 = New Global.System.Data.DataColumn("Fecha1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnFecha1)
        Me.columnCuenta = New Global.System.Data.DataColumn("Cuenta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta)
        Me.columnnombrecuenta = New Global.System.Data.DataColumn("nombrecuenta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnnombrecuenta)
        Me.columnDebeHaber = New Global.System.Data.DataColumn("DebeHaber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnDebeHaber)
        Me.columnImporteSol = New Global.System.Data.DataColumn("ImporteSol", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnImporteSol)
        Me.columnImporteDol = New Global.System.Data.DataColumn("ImporteDol", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnImporteDol)
        Me.columnTipoLibro = New Global.System.Data.DataColumn("TipoLibro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnTipoLibro)
        Me.columnCorrelativo = New Global.System.Data.DataColumn("Correlativo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCorrelativo)
        Me.columnImporteDebe = New Global.System.Data.DataColumn("ImporteDebe", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnImporteDebe)
        Me.columnImporteHaber = New Global.System.Data.DataColumn("ImporteHaber", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnImporteHaber)
        Me.columnImporteDebeAcumulado = New Global.System.Data.DataColumn("ImporteDebeAcumulado", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnImporteDebeAcumulado)
        Me.columnImporteHaberAcumulado = New Global.System.Data.DataColumn("ImporteHaberAcumulado", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnImporteHaberAcumulado)
        Me.columnCentroCosto = New Global.System.Data.DataColumn("CentroCosto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCentroCosto)
        Me.columnArea = New Global.System.Data.DataColumn("Area", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnArea)
        Me.columnSaldos = New Global.System.Data.DataColumn("Saldos", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnSaldos)
        Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnClave)
        Me.columnGirado = New Global.System.Data.DataColumn("Girado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnGirado)
        Me.columnImporteRegContabCabe = New Global.System.Data.DataColumn("ImporteRegContabCabe", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnImporteRegContabCabe)
        Me.columnRetencionRegContabCabe = New Global.System.Data.DataColumn("RetencionRegContabCabe", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnRetencionRegContabCabe)
        Me.columnCodigoIngEgr = New Global.System.Data.DataColumn("CodigoIngEgr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoIngEgr)
        Me.columnNombreIngEgr = New Global.System.Data.DataColumn("NombreIngEgr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreIngEgr)
        Me.columnNombreCentroCosto = New Global.System.Data.DataColumn("NombreCentroCosto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreCentroCosto)
        Me.columnCodigoFlujoCaja = New Global.System.Data.DataColumn("CodigoFlujoCaja", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoFlujoCaja)
        Me.columnNombreFlujoCaja = New Global.System.Data.DataColumn("NombreFlujoCaja", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreFlujoCaja)
        Me.columnFlagDsctoAfpSnp = New Global.System.Data.DataColumn("FlagDsctoAfpSnp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnFlagDsctoAfpSnp)
        Me.columnCodigoGastoReparable = New Global.System.Data.DataColumn("CodigoGastoReparable", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoGastoReparable)
        Me.columnNombreGastoReparable = New Global.System.Data.DataColumn("NombreGastoReparable", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreGastoReparable)
        Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCantidad)
        Me.columnCodigoAlmacen = New Global.System.Data.DataColumn("CodigoAlmacen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoAlmacen)
        Me.columnTipo.DefaultValue = CType("6", String)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewRegContabRow() As RegContabRow
        Return CType(Me.NewRow, RegContabRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New RegContabRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(RegContabRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.RegContabRowChangedEvent) Is Nothing) Then
            RaiseEvent RegContabRowChanged(Me, New RegContabRowChangeEvent(CType(e.Row, RegContabRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.RegContabRowChangingEvent) Is Nothing) Then
            RaiseEvent RegContabRowChanging(Me, New RegContabRowChangeEvent(CType(e.Row, RegContabRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.RegContabRowDeletedEvent) Is Nothing) Then
            RaiseEvent RegContabRowDeleted(Me, New RegContabRowChangeEvent(CType(e.Row, RegContabRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.RegContabRowDeletingEvent) Is Nothing) Then
            RaiseEvent RegContabRowDeleting(Me, New RegContabRowChangeEvent(CType(e.Row, RegContabRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemoveRegContabRow(ByVal row As RegContabRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "RegContabDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class ConceptosDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnCodigoPptoInterno As Global.System.Data.DataColumn

    Private columnPrecio As Global.System.Data.DataColumn

    Private columnMes As Global.System.Data.DataColumn

    Private columnConcepto As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "Conceptos"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoPptoInternoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoPptoInterno
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property PrecioColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnPrecio
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property MesColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnMes
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ConceptoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnConcepto
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As ConceptosRow
        Get
            Return CType(Me.Rows(index), ConceptosRow)
        End Get
    End Property

    Public Event ConceptosRowChanging As ConceptosRowChangeEventHandler

    Public Event ConceptosRowChanged As ConceptosRowChangeEventHandler

    Public Event ConceptosRowDeleting As ConceptosRowChangeEventHandler

    Public Event ConceptosRowDeleted As ConceptosRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddConceptosRow(ByVal row As ConceptosRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddConceptosRow(ByVal CodigoPptoInterno As String, ByVal Precio As Decimal, ByVal Mes As String, ByVal Concepto As String) As ConceptosRow
        Dim rowConceptosRow As ConceptosRow = CType(Me.NewRow, ConceptosRow)
        Dim columnValuesArray() As Object = New Object() {CodigoPptoInterno, Precio, Mes, Concepto}
        rowConceptosRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowConceptosRow)
        Return rowConceptosRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As ConceptosDataTable = CType(MyBase.Clone, ConceptosDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New ConceptosDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnCodigoPptoInterno = MyBase.Columns("CodigoPptoInterno")
        Me.columnPrecio = MyBase.Columns("Precio")
        Me.columnMes = MyBase.Columns("Mes")
        Me.columnConcepto = MyBase.Columns("Concepto")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnCodigoPptoInterno = New Global.System.Data.DataColumn("CodigoPptoInterno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoPptoInterno)
        Me.columnPrecio = New Global.System.Data.DataColumn("Precio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnPrecio)
        Me.columnMes = New Global.System.Data.DataColumn("Mes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnMes)
        Me.columnConcepto = New Global.System.Data.DataColumn("Concepto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnConcepto)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewConceptosRow() As ConceptosRow
        Return CType(Me.NewRow, ConceptosRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New ConceptosRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(ConceptosRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.ConceptosRowChangedEvent) Is Nothing) Then
            RaiseEvent ConceptosRowChanged(Me, New ConceptosRowChangeEvent(CType(e.Row, ConceptosRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.ConceptosRowChangingEvent) Is Nothing) Then
            RaiseEvent ConceptosRowChanging(Me, New ConceptosRowChangeEvent(CType(e.Row, ConceptosRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.ConceptosRowDeletedEvent) Is Nothing) Then
            RaiseEvent ConceptosRowDeleted(Me, New ConceptosRowChangeEvent(CType(e.Row, ConceptosRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.ConceptosRowDeletingEvent) Is Nothing) Then
            RaiseEvent ConceptosRowDeleting(Me, New ConceptosRowChangeEvent(CType(e.Row, ConceptosRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemoveConceptosRow(ByVal row As ConceptosRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "ConceptosDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class PerfilDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnCodigoGrupo As Global.System.Data.DataColumn

    Private columnNombreGrupo As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "Perfil"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoGrupoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoGrupo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreGrupoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreGrupo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As PerfilRow
        Get
            Return CType(Me.Rows(index), PerfilRow)
        End Get
    End Property

    Public Event PerfilRowChanging As PerfilRowChangeEventHandler

    Public Event PerfilRowChanged As PerfilRowChangeEventHandler

    Public Event PerfilRowDeleting As PerfilRowChangeEventHandler

    Public Event PerfilRowDeleted As PerfilRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddPerfilRow(ByVal row As PerfilRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddPerfilRow(ByVal CodigoGrupo As String, ByVal NombreGrupo As String) As PerfilRow
        Dim rowPerfilRow As PerfilRow = CType(Me.NewRow, PerfilRow)
        Dim columnValuesArray() As Object = New Object() {CodigoGrupo, NombreGrupo}
        rowPerfilRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowPerfilRow)
        Return rowPerfilRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As PerfilDataTable = CType(MyBase.Clone, PerfilDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New PerfilDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnCodigoGrupo = MyBase.Columns("CodigoGrupo")
        Me.columnNombreGrupo = MyBase.Columns("NombreGrupo")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnCodigoGrupo = New Global.System.Data.DataColumn("CodigoGrupo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoGrupo)
        Me.columnNombreGrupo = New Global.System.Data.DataColumn("NombreGrupo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreGrupo)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewPerfilRow() As PerfilRow
        Return CType(Me.NewRow, PerfilRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New PerfilRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(PerfilRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.PerfilRowChangedEvent) Is Nothing) Then
            RaiseEvent PerfilRowChanged(Me, New PerfilRowChangeEvent(CType(e.Row, PerfilRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.PerfilRowChangingEvent) Is Nothing) Then
            RaiseEvent PerfilRowChanging(Me, New PerfilRowChangeEvent(CType(e.Row, PerfilRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.PerfilRowDeletedEvent) Is Nothing) Then
            RaiseEvent PerfilRowDeleted(Me, New PerfilRowChangeEvent(CType(e.Row, PerfilRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.PerfilRowDeletingEvent) Is Nothing) Then
            RaiseEvent PerfilRowDeleting(Me, New PerfilRowChangeEvent(CType(e.Row, PerfilRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemovePerfilRow(ByVal row As PerfilRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "PerfilDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class CodigoInexistenteDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnFecha As Global.System.Data.DataColumn

    Private columnCodigo As Global.System.Data.DataColumn

    Private columnTipo As Global.System.Data.DataColumn

    Private columnNumeroHorasMovHoras As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "CodigoInexistente"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnFecha
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnTipo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NumeroHorasMovHorasColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNumeroHorasMovHoras
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As CodigoInexistenteRow
        Get
            Return CType(Me.Rows(index), CodigoInexistenteRow)
        End Get
    End Property

    Public Event CodigoInexistenteRowChanging As CodigoInexistenteRowChangeEventHandler

    Public Event CodigoInexistenteRowChanged As CodigoInexistenteRowChangeEventHandler

    Public Event CodigoInexistenteRowDeleting As CodigoInexistenteRowChangeEventHandler

    Public Event CodigoInexistenteRowDeleted As CodigoInexistenteRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddCodigoInexistenteRow(ByVal row As CodigoInexistenteRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddCodigoInexistenteRow(ByVal Fecha As String, ByVal Codigo As String, ByVal Tipo As String, ByVal NumeroHorasMovHoras As String) As CodigoInexistenteRow
        Dim rowCodigoInexistenteRow As CodigoInexistenteRow = CType(Me.NewRow, CodigoInexistenteRow)
        Dim columnValuesArray() As Object = New Object() {Fecha, Codigo, Tipo, NumeroHorasMovHoras}
        rowCodigoInexistenteRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowCodigoInexistenteRow)
        Return rowCodigoInexistenteRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As CodigoInexistenteDataTable = CType(MyBase.Clone, CodigoInexistenteDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New CodigoInexistenteDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnFecha = MyBase.Columns("Fecha")
        Me.columnCodigo = MyBase.Columns("Codigo")
        Me.columnTipo = MyBase.Columns("Tipo")
        Me.columnNumeroHorasMovHoras = MyBase.Columns("NumeroHorasMovHoras")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnFecha)
        Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigo)
        Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnTipo)
        Me.columnNumeroHorasMovHoras = New Global.System.Data.DataColumn("NumeroHorasMovHoras", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNumeroHorasMovHoras)
        Me.columnTipo.MaxLength = 100
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewCodigoInexistenteRow() As CodigoInexistenteRow
        Return CType(Me.NewRow, CodigoInexistenteRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New CodigoInexistenteRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(CodigoInexistenteRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.CodigoInexistenteRowChangedEvent) Is Nothing) Then
            RaiseEvent CodigoInexistenteRowChanged(Me, New CodigoInexistenteRowChangeEvent(CType(e.Row, CodigoInexistenteRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.CodigoInexistenteRowChangingEvent) Is Nothing) Then
            RaiseEvent CodigoInexistenteRowChanging(Me, New CodigoInexistenteRowChangeEvent(CType(e.Row, CodigoInexistenteRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.CodigoInexistenteRowDeletedEvent) Is Nothing) Then
            RaiseEvent CodigoInexistenteRowDeleted(Me, New CodigoInexistenteRowChangeEvent(CType(e.Row, CodigoInexistenteRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.CodigoInexistenteRowDeletingEvent) Is Nothing) Then
            RaiseEvent CodigoInexistenteRowDeleting(Me, New CodigoInexistenteRowChangeEvent(CType(e.Row, CodigoInexistenteRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemoveCodigoInexistenteRow(ByVal row As CodigoInexistenteRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "CodigoInexistenteDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class PlanillaDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnCodigoPersonal As Global.System.Data.DataColumn

    Private columnNombreCompletoPersonal As Global.System.Data.DataColumn

    Private columnCodigoContratacion As Global.System.Data.DataColumn

    Private columnNombreContratacion As Global.System.Data.DataColumn

    Private columnAnoPlla As Global.System.Data.DataColumn

    Private columnMesPlla As Global.System.Data.DataColumn

    Private columnNombreMes As Global.System.Data.DataColumn

    Private columnBasicoPlla As Global.System.Data.DataColumn

    Private columnComisionVentaPlla As Global.System.Data.DataColumn

    Private columnHorasExtrasPlla As Global.System.Data.DataColumn

    Private columnAsigFamiliarPlla As Global.System.Data.DataColumn

    Private columnDL26504Plla As Global.System.Data.DataColumn

    Private columnEducacionPlla As Global.System.Data.DataColumn

    Private columnMovilidadPlla As Global.System.Data.DataColumn

    Private columnAlimentosPlla As Global.System.Data.DataColumn

    Private columnGratificacionPlla As Global.System.Data.DataColumn

    Private columnCtsPlla As Global.System.Data.DataColumn

    Private columnESSaludPlla As Global.System.Data.DataColumn

    Private columnBonoExtraPlla As Global.System.Data.DataColumn

    Private columnAfectoPlla As Global.System.Data.DataColumn

    Private columnRenta4taPlla As Global.System.Data.DataColumn

    Private columnVacacionesPlla As Global.System.Data.DataColumn

    Private columnTotalPlla As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "Planilla"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoPersonalColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoPersonal
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreCompletoPersonalColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreCompletoPersonal
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoContratacionColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoContratacion
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreContratacionColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreContratacion
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property AnoPllaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnAnoPlla
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property MesPllaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnMesPlla
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreMesColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreMes
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property BasicoPllaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnBasicoPlla
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ComisionVentaPllaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnComisionVentaPlla
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property HorasExtrasPllaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnHorasExtrasPlla
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property AsigFamiliarPllaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnAsigFamiliarPlla
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property DL26504PllaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnDL26504Plla
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property EducacionPllaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnEducacionPlla
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property MovilidadPllaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnMovilidadPlla
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property AlimentosPllaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnAlimentosPlla
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property GratificacionPllaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnGratificacionPlla
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CtsPllaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCtsPlla
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ESSaludPllaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnESSaludPlla
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property BonoExtraPllaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnBonoExtraPlla
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property AfectoPllaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnAfectoPlla
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Renta4taPllaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnRenta4taPlla
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property VacacionesPllaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnVacacionesPlla
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property TotalPllaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnTotalPlla
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As PlanillaRow
        Get
            Return CType(Me.Rows(index), PlanillaRow)
        End Get
    End Property

    Public Event PlanillaRowChanging As PlanillaRowChangeEventHandler

    Public Event PlanillaRowChanged As PlanillaRowChangeEventHandler

    Public Event PlanillaRowDeleting As PlanillaRowChangeEventHandler

    Public Event PlanillaRowDeleted As PlanillaRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddPlanillaRow(ByVal row As PlanillaRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddPlanillaRow(
                    ByVal CodigoPersonal As String,
                    ByVal NombreCompletoPersonal As String,
                    ByVal CodigoContratacion As String,
                    ByVal NombreContratacion As String,
                    ByVal AnoPlla As String,
                    ByVal MesPlla As String,
                    ByVal NombreMes As String,
                    ByVal BasicoPlla As Decimal,
                    ByVal ComisionVentaPlla As Decimal,
                    ByVal HorasExtrasPlla As Decimal,
                    ByVal AsigFamiliarPlla As Decimal,
                    ByVal DL26504Plla As Decimal,
                    ByVal EducacionPlla As Decimal,
                    ByVal MovilidadPlla As Decimal,
                    ByVal AlimentosPlla As Decimal,
                    ByVal GratificacionPlla As Decimal,
                    ByVal CtsPlla As Decimal,
                    ByVal ESSaludPlla As Decimal,
                    ByVal BonoExtraPlla As Decimal,
                    ByVal AfectoPlla As String,
                    ByVal Renta4taPlla As Decimal,
                    ByVal VacacionesPlla As Decimal,
                    ByVal TotalPlla As Decimal) As PlanillaRow
        Dim rowPlanillaRow As PlanillaRow = CType(Me.NewRow, PlanillaRow)
        Dim columnValuesArray() As Object = New Object() {CodigoPersonal, NombreCompletoPersonal, CodigoContratacion, NombreContratacion, AnoPlla, MesPlla, NombreMes, BasicoPlla, ComisionVentaPlla, HorasExtrasPlla, AsigFamiliarPlla, DL26504Plla, EducacionPlla, MovilidadPlla, AlimentosPlla, GratificacionPlla, CtsPlla, ESSaludPlla, BonoExtraPlla, AfectoPlla, Renta4taPlla, VacacionesPlla, TotalPlla}
        rowPlanillaRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowPlanillaRow)
        Return rowPlanillaRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As PlanillaDataTable = CType(MyBase.Clone, PlanillaDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New PlanillaDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnCodigoPersonal = MyBase.Columns("CodigoPersonal")
        Me.columnNombreCompletoPersonal = MyBase.Columns("NombreCompletoPersonal")
        Me.columnCodigoContratacion = MyBase.Columns("CodigoContratacion")
        Me.columnNombreContratacion = MyBase.Columns("NombreContratacion")
        Me.columnAnoPlla = MyBase.Columns("AnoPlla")
        Me.columnMesPlla = MyBase.Columns("MesPlla")
        Me.columnNombreMes = MyBase.Columns("NombreMes")
        Me.columnBasicoPlla = MyBase.Columns("BasicoPlla")
        Me.columnComisionVentaPlla = MyBase.Columns("ComisionVentaPlla")
        Me.columnHorasExtrasPlla = MyBase.Columns("HorasExtrasPlla")
        Me.columnAsigFamiliarPlla = MyBase.Columns("AsigFamiliarPlla")
        Me.columnDL26504Plla = MyBase.Columns("DL26504Plla")
        Me.columnEducacionPlla = MyBase.Columns("EducacionPlla")
        Me.columnMovilidadPlla = MyBase.Columns("MovilidadPlla")
        Me.columnAlimentosPlla = MyBase.Columns("AlimentosPlla")
        Me.columnGratificacionPlla = MyBase.Columns("GratificacionPlla")
        Me.columnCtsPlla = MyBase.Columns("CtsPlla")
        Me.columnESSaludPlla = MyBase.Columns("ESSaludPlla")
        Me.columnBonoExtraPlla = MyBase.Columns("BonoExtraPlla")
        Me.columnAfectoPlla = MyBase.Columns("AfectoPlla")
        Me.columnRenta4taPlla = MyBase.Columns("Renta4taPlla")
        Me.columnVacacionesPlla = MyBase.Columns("VacacionesPlla")
        Me.columnTotalPlla = MyBase.Columns("TotalPlla")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnCodigoPersonal = New Global.System.Data.DataColumn("CodigoPersonal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoPersonal)
        Me.columnNombreCompletoPersonal = New Global.System.Data.DataColumn("NombreCompletoPersonal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreCompletoPersonal)
        Me.columnCodigoContratacion = New Global.System.Data.DataColumn("CodigoContratacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoContratacion)
        Me.columnNombreContratacion = New Global.System.Data.DataColumn("NombreContratacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreContratacion)
        Me.columnAnoPlla = New Global.System.Data.DataColumn("AnoPlla", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnAnoPlla)
        Me.columnMesPlla = New Global.System.Data.DataColumn("MesPlla", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnMesPlla)
        Me.columnNombreMes = New Global.System.Data.DataColumn("NombreMes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreMes)
        Me.columnBasicoPlla = New Global.System.Data.DataColumn("BasicoPlla", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnBasicoPlla)
        Me.columnComisionVentaPlla = New Global.System.Data.DataColumn("ComisionVentaPlla", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnComisionVentaPlla)
        Me.columnHorasExtrasPlla = New Global.System.Data.DataColumn("HorasExtrasPlla", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnHorasExtrasPlla)
        Me.columnAsigFamiliarPlla = New Global.System.Data.DataColumn("AsigFamiliarPlla", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnAsigFamiliarPlla)
        Me.columnDL26504Plla = New Global.System.Data.DataColumn("DL26504Plla", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnDL26504Plla)
        Me.columnEducacionPlla = New Global.System.Data.DataColumn("EducacionPlla", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnEducacionPlla)
        Me.columnMovilidadPlla = New Global.System.Data.DataColumn("MovilidadPlla", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnMovilidadPlla)
        Me.columnAlimentosPlla = New Global.System.Data.DataColumn("AlimentosPlla", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnAlimentosPlla)
        Me.columnGratificacionPlla = New Global.System.Data.DataColumn("GratificacionPlla", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnGratificacionPlla)
        Me.columnCtsPlla = New Global.System.Data.DataColumn("CtsPlla", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCtsPlla)
        Me.columnESSaludPlla = New Global.System.Data.DataColumn("ESSaludPlla", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnESSaludPlla)
        Me.columnBonoExtraPlla = New Global.System.Data.DataColumn("BonoExtraPlla", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnBonoExtraPlla)
        Me.columnAfectoPlla = New Global.System.Data.DataColumn("AfectoPlla", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnAfectoPlla)
        Me.columnRenta4taPlla = New Global.System.Data.DataColumn("Renta4taPlla", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnRenta4taPlla)
        Me.columnVacacionesPlla = New Global.System.Data.DataColumn("VacacionesPlla", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnVacacionesPlla)
        Me.columnTotalPlla = New Global.System.Data.DataColumn("TotalPlla", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnTotalPlla)
        Me.columnCodigoPersonal.Caption = "Column1"
        Me.columnNombreCompletoPersonal.Caption = "Column1"
        Me.columnCodigoContratacion.Caption = "Column1"
        Me.columnNombreContratacion.Caption = "Column1"
        Me.columnAnoPlla.Caption = "Column1"
        Me.columnMesPlla.Caption = "Column1"
        Me.columnNombreMes.Caption = "Column1"
        Me.columnBasicoPlla.Caption = "Column1"
        Me.columnComisionVentaPlla.Caption = "Column1"
        Me.columnHorasExtrasPlla.Caption = "Column1"
        Me.columnAsigFamiliarPlla.Caption = "Column1"
        Me.columnDL26504Plla.Caption = "Column1"
        Me.columnEducacionPlla.Caption = "Column1"
        Me.columnMovilidadPlla.Caption = "Column1"
        Me.columnAlimentosPlla.Caption = "Column1"
        Me.columnGratificacionPlla.Caption = "Column1"
        Me.columnCtsPlla.Caption = "Column1"
        Me.columnESSaludPlla.Caption = "Column1"
        Me.columnBonoExtraPlla.Caption = "Column1"
        Me.columnAfectoPlla.Caption = "Column1"
        Me.columnRenta4taPlla.Caption = "Column1"
        Me.columnVacacionesPlla.Caption = "Column1"
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewPlanillaRow() As PlanillaRow
        Return CType(Me.NewRow, PlanillaRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New PlanillaRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(PlanillaRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.PlanillaRowChangedEvent) Is Nothing) Then
            RaiseEvent PlanillaRowChanged(Me, New PlanillaRowChangeEvent(CType(e.Row, PlanillaRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.PlanillaRowChangingEvent) Is Nothing) Then
            RaiseEvent PlanillaRowChanging(Me, New PlanillaRowChangeEvent(CType(e.Row, PlanillaRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.PlanillaRowDeletedEvent) Is Nothing) Then
            RaiseEvent PlanillaRowDeleted(Me, New PlanillaRowChangeEvent(CType(e.Row, PlanillaRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.PlanillaRowDeletingEvent) Is Nothing) Then
            RaiseEvent PlanillaRowDeleting(Me, New PlanillaRowChangeEvent(CType(e.Row, PlanillaRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemovePlanillaRow(ByVal row As PlanillaRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "PlanillaDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class VistaSaldosDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnMes As Global.System.Data.DataColumn

    Private columnDebe As Global.System.Data.DataColumn

    Private columnHaber As Global.System.Data.DataColumn

    Private columnSaldo As Global.System.Data.DataColumn

    Private columnMayor As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "VistaSaldos"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property MesColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnMes
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property DebeColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnDebe
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property HaberColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnHaber
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property SaldoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnSaldo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property MayorColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnMayor
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As VistaSaldosRow
        Get
            Return CType(Me.Rows(index), VistaSaldosRow)
        End Get
    End Property

    Public Event VistaSaldosRowChanging As VistaSaldosRowChangeEventHandler

    Public Event VistaSaldosRowChanged As VistaSaldosRowChangeEventHandler

    Public Event VistaSaldosRowDeleting As VistaSaldosRowChangeEventHandler

    Public Event VistaSaldosRowDeleted As VistaSaldosRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddVistaSaldosRow(ByVal row As VistaSaldosRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddVistaSaldosRow(ByVal Mes As String, ByVal Debe As String, ByVal Haber As String, ByVal Saldo As String, ByVal Mayor As String) As VistaSaldosRow
        Dim rowVistaSaldosRow As VistaSaldosRow = CType(Me.NewRow, VistaSaldosRow)
        Dim columnValuesArray() As Object = New Object() {Mes, Debe, Haber, Saldo, Mayor}
        rowVistaSaldosRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowVistaSaldosRow)
        Return rowVistaSaldosRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As VistaSaldosDataTable = CType(MyBase.Clone, VistaSaldosDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New VistaSaldosDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnMes = MyBase.Columns("Mes")
        Me.columnDebe = MyBase.Columns("Debe")
        Me.columnHaber = MyBase.Columns("Haber")
        Me.columnSaldo = MyBase.Columns("Saldo")
        Me.columnMayor = MyBase.Columns("Mayor")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnMes = New Global.System.Data.DataColumn("Mes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnMes)
        Me.columnDebe = New Global.System.Data.DataColumn("Debe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnDebe)
        Me.columnHaber = New Global.System.Data.DataColumn("Haber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnHaber)
        Me.columnSaldo = New Global.System.Data.DataColumn("Saldo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnSaldo)
        Me.columnMayor = New Global.System.Data.DataColumn("Mayor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnMayor)
        Me.columnDebe.Caption = "Column1"
        Me.columnHaber.Caption = "Column1"
        Me.columnSaldo.Caption = "Column1"
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewVistaSaldosRow() As VistaSaldosRow
        Return CType(Me.NewRow, VistaSaldosRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New VistaSaldosRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(VistaSaldosRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.VistaSaldosRowChangedEvent) Is Nothing) Then
            RaiseEvent VistaSaldosRowChanged(Me, New VistaSaldosRowChangeEvent(CType(e.Row, VistaSaldosRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.VistaSaldosRowChangingEvent) Is Nothing) Then
            RaiseEvent VistaSaldosRowChanging(Me, New VistaSaldosRowChangeEvent(CType(e.Row, VistaSaldosRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.VistaSaldosRowDeletedEvent) Is Nothing) Then
            RaiseEvent VistaSaldosRowDeleted(Me, New VistaSaldosRowChangeEvent(CType(e.Row, VistaSaldosRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.VistaSaldosRowDeletingEvent) Is Nothing) Then
            RaiseEvent VistaSaldosRowDeleting(Me, New VistaSaldosRowChangeEvent(CType(e.Row, VistaSaldosRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemoveVistaSaldosRow(ByVal row As VistaSaldosRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "VistaSaldosDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class SaldosADigitosDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnCuenta As Global.System.Data.DataColumn

    Private columnDescripcion As Global.System.Data.DataColumn

    Private columnDebeMes As Global.System.Data.DataColumn

    Private columnHabeMes As Global.System.Data.DataColumn

    Private columnDebeAcu As Global.System.Data.DataColumn

    Private columnHabeAcu As Global.System.Data.DataColumn

    Private columnSumaDebe As Global.System.Data.DataColumn

    Private columnSumaHaber As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "SaldosADigitos"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CuentaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnDescripcion
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property DebeMesColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnDebeMes
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property HabeMesColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnHabeMes
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property DebeAcuColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnDebeAcu
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property HabeAcuColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnHabeAcu
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property SumaDebeColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnSumaDebe
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property SumaHaberColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnSumaHaber
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As SaldosADigitosRow
        Get
            Return CType(Me.Rows(index), SaldosADigitosRow)
        End Get
    End Property

    Public Event SaldosADigitosRowChanging As SaldosADigitosRowChangeEventHandler

    Public Event SaldosADigitosRowChanged As SaldosADigitosRowChangeEventHandler

    Public Event SaldosADigitosRowDeleting As SaldosADigitosRowChangeEventHandler

    Public Event SaldosADigitosRowDeleted As SaldosADigitosRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddSaldosADigitosRow(ByVal row As SaldosADigitosRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddSaldosADigitosRow(ByVal Cuenta As String, ByVal Descripcion As String, ByVal DebeMes As Decimal, ByVal HabeMes As Decimal, ByVal DebeAcu As Decimal, ByVal HabeAcu As Decimal, ByVal SumaDebe As Decimal, ByVal SumaHaber As Decimal) As SaldosADigitosRow
        Dim rowSaldosADigitosRow As SaldosADigitosRow = CType(Me.NewRow, SaldosADigitosRow)
        Dim columnValuesArray() As Object = New Object() {Cuenta, Descripcion, DebeMes, HabeMes, DebeAcu, HabeAcu, SumaDebe, SumaHaber}
        rowSaldosADigitosRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowSaldosADigitosRow)
        Return rowSaldosADigitosRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As SaldosADigitosDataTable = CType(MyBase.Clone, SaldosADigitosDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New SaldosADigitosDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnCuenta = MyBase.Columns("Cuenta")
        Me.columnDescripcion = MyBase.Columns("Descripcion")
        Me.columnDebeMes = MyBase.Columns("DebeMes")
        Me.columnHabeMes = MyBase.Columns("HabeMes")
        Me.columnDebeAcu = MyBase.Columns("DebeAcu")
        Me.columnHabeAcu = MyBase.Columns("HabeAcu")
        Me.columnSumaDebe = MyBase.Columns("SumaDebe")
        Me.columnSumaHaber = MyBase.Columns("SumaHaber")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnCuenta = New Global.System.Data.DataColumn("Cuenta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta)
        Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnDescripcion)
        Me.columnDebeMes = New Global.System.Data.DataColumn("DebeMes", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnDebeMes)
        Me.columnHabeMes = New Global.System.Data.DataColumn("HabeMes", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnHabeMes)
        Me.columnDebeAcu = New Global.System.Data.DataColumn("DebeAcu", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnDebeAcu)
        Me.columnHabeAcu = New Global.System.Data.DataColumn("HabeAcu", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnHabeAcu)
        Me.columnSumaDebe = New Global.System.Data.DataColumn("SumaDebe", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnSumaDebe)
        Me.columnSumaHaber = New Global.System.Data.DataColumn("SumaHaber", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnSumaHaber)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewSaldosADigitosRow() As SaldosADigitosRow
        Return CType(Me.NewRow, SaldosADigitosRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New SaldosADigitosRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(SaldosADigitosRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.SaldosADigitosRowChangedEvent) Is Nothing) Then
            RaiseEvent SaldosADigitosRowChanged(Me, New SaldosADigitosRowChangeEvent(CType(e.Row, SaldosADigitosRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.SaldosADigitosRowChangingEvent) Is Nothing) Then
            RaiseEvent SaldosADigitosRowChanging(Me, New SaldosADigitosRowChangeEvent(CType(e.Row, SaldosADigitosRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.SaldosADigitosRowDeletedEvent) Is Nothing) Then
            RaiseEvent SaldosADigitosRowDeleted(Me, New SaldosADigitosRowChangeEvent(CType(e.Row, SaldosADigitosRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.SaldosADigitosRowDeletingEvent) Is Nothing) Then
            RaiseEvent SaldosADigitosRowDeleting(Me, New SaldosADigitosRowChangeEvent(CType(e.Row, SaldosADigitosRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemoveSaldosADigitosRow(ByVal row As SaldosADigitosRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "SaldosADigitosDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class MovimientoDetalleDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnCodigoEmpresa As Global.System.Data.DataColumn

    Private columnRazonSocialEmpresa As Global.System.Data.DataColumn

    Private columnPeriodoRegContabCabe As Global.System.Data.DataColumn

    Private columnCodigoCuentaPcge As Global.System.Data.DataColumn

    Private columnDebeHaberRegContabDeta As Global.System.Data.DataColumn

    Private columnImporteSRegContabDeta As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "MovimientoDetalle"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoEmpresaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoEmpresa
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property RazonSocialEmpresaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnRazonSocialEmpresa
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property PeriodoRegContabCabeColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnPeriodoRegContabCabe
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoCuentaPcgeColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoCuentaPcge
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property DebeHaberRegContabDetaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnDebeHaberRegContabDeta
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ImporteSRegContabDetaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnImporteSRegContabDeta
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As MovimientoDetalleRow
        Get
            Return CType(Me.Rows(index), MovimientoDetalleRow)
        End Get
    End Property

    Public Event MovimientoDetalleRowChanging As MovimientoDetalleRowChangeEventHandler

    Public Event MovimientoDetalleRowChanged As MovimientoDetalleRowChangeEventHandler

    Public Event MovimientoDetalleRowDeleting As MovimientoDetalleRowChangeEventHandler

    Public Event MovimientoDetalleRowDeleted As MovimientoDetalleRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddMovimientoDetalleRow(ByVal row As MovimientoDetalleRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddMovimientoDetalleRow(ByVal CodigoEmpresa As String, ByVal RazonSocialEmpresa As String, ByVal PeriodoRegContabCabe As String, ByVal CodigoCuentaPcge As String, ByVal DebeHaberRegContabDeta As String, ByVal ImporteSRegContabDeta As String) As MovimientoDetalleRow
        Dim rowMovimientoDetalleRow As MovimientoDetalleRow = CType(Me.NewRow, MovimientoDetalleRow)
        Dim columnValuesArray() As Object = New Object() {CodigoEmpresa, RazonSocialEmpresa, PeriodoRegContabCabe, CodigoCuentaPcge, DebeHaberRegContabDeta, ImporteSRegContabDeta}
        rowMovimientoDetalleRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowMovimientoDetalleRow)
        Return rowMovimientoDetalleRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As MovimientoDetalleDataTable = CType(MyBase.Clone, MovimientoDetalleDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New MovimientoDetalleDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnCodigoEmpresa = MyBase.Columns("CodigoEmpresa")
        Me.columnRazonSocialEmpresa = MyBase.Columns("RazonSocialEmpresa")
        Me.columnPeriodoRegContabCabe = MyBase.Columns("PeriodoRegContabCabe")
        Me.columnCodigoCuentaPcge = MyBase.Columns("CodigoCuentaPcge")
        Me.columnDebeHaberRegContabDeta = MyBase.Columns("DebeHaberRegContabDeta")
        Me.columnImporteSRegContabDeta = MyBase.Columns("ImporteSRegContabDeta")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnCodigoEmpresa = New Global.System.Data.DataColumn("CodigoEmpresa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoEmpresa)
        Me.columnRazonSocialEmpresa = New Global.System.Data.DataColumn("RazonSocialEmpresa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnRazonSocialEmpresa)
        Me.columnPeriodoRegContabCabe = New Global.System.Data.DataColumn("PeriodoRegContabCabe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnPeriodoRegContabCabe)
        Me.columnCodigoCuentaPcge = New Global.System.Data.DataColumn("CodigoCuentaPcge", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoCuentaPcge)
        Me.columnDebeHaberRegContabDeta = New Global.System.Data.DataColumn("DebeHaberRegContabDeta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnDebeHaberRegContabDeta)
        Me.columnImporteSRegContabDeta = New Global.System.Data.DataColumn("ImporteSRegContabDeta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnImporteSRegContabDeta)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewMovimientoDetalleRow() As MovimientoDetalleRow
        Return CType(Me.NewRow, MovimientoDetalleRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New MovimientoDetalleRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(MovimientoDetalleRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.MovimientoDetalleRowChangedEvent) Is Nothing) Then
            RaiseEvent MovimientoDetalleRowChanged(Me, New MovimientoDetalleRowChangeEvent(CType(e.Row, MovimientoDetalleRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.MovimientoDetalleRowChangingEvent) Is Nothing) Then
            RaiseEvent MovimientoDetalleRowChanging(Me, New MovimientoDetalleRowChangeEvent(CType(e.Row, MovimientoDetalleRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.MovimientoDetalleRowDeletedEvent) Is Nothing) Then
            RaiseEvent MovimientoDetalleRowDeleted(Me, New MovimientoDetalleRowChangeEvent(CType(e.Row, MovimientoDetalleRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.MovimientoDetalleRowDeletingEvent) Is Nothing) Then
            RaiseEvent MovimientoDetalleRowDeleting(Me, New MovimientoDetalleRowChangeEvent(CType(e.Row, MovimientoDetalleRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemoveMovimientoDetalleRow(ByVal row As MovimientoDetalleRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "MovimientoDetalleDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class BalancesDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnCodigo As Global.System.Data.DataColumn

    Private columnCuenta As Global.System.Data.DataColumn

    Private columnMayorDebe As Global.System.Data.DataColumn

    Private columnMayorHaber As Global.System.Data.DataColumn

    Private columnSaldoDeudor As Global.System.Data.DataColumn

    Private columnSaldoAcreedor As Global.System.Data.DataColumn

    Private columnGestionDebe As Global.System.Data.DataColumn

    Private columnGestionHaber As Global.System.Data.DataColumn

    Private columnInvtarioActivo As Global.System.Data.DataColumn

    Private columnInvtarioPasivo As Global.System.Data.DataColumn

    Private columnResultadoPerdida As Global.System.Data.DataColumn

    Private columnResultadoGanancia As Global.System.Data.DataColumn

    Private columnResultado1 As Global.System.Data.DataColumn

    Private columnResultado2 As Global.System.Data.DataColumn

    Private columnResultado3 As Global.System.Data.DataColumn

    Private columnResultado4 As Global.System.Data.DataColumn

    Private columnCuadre1 As Global.System.Data.DataColumn

    Private columnCuadre2 As Global.System.Data.DataColumn

    Private columnCuadre3 As Global.System.Data.DataColumn

    Private columnCuadre4 As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "Balances"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CuentaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property MayorDebeColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnMayorDebe
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property MayorHaberColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnMayorHaber
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property SaldoDeudorColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnSaldoDeudor
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property SaldoAcreedorColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnSaldoAcreedor
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property GestionDebeColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnGestionDebe
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property GestionHaberColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnGestionHaber
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property InvtarioActivoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnInvtarioActivo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property InvtarioPasivoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnInvtarioPasivo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ResultadoPerdidaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnResultadoPerdida
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ResultadoGananciaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnResultadoGanancia
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Resultado1Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnResultado1
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Resultado2Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnResultado2
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Resultado3Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnResultado3
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Resultado4Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnResultado4
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuadre1Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuadre1
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuadre2Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuadre2
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuadre3Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuadre3
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuadre4Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuadre4
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As BalancesRow
        Get
            Return CType(Me.Rows(index), BalancesRow)
        End Get
    End Property

    Public Event BalancesRowChanging As BalancesRowChangeEventHandler

    Public Event BalancesRowChanged As BalancesRowChangeEventHandler

    Public Event BalancesRowDeleting As BalancesRowChangeEventHandler

    Public Event BalancesRowDeleted As BalancesRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddBalancesRow(ByVal row As BalancesRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddBalancesRow(
                    ByVal Codigo As String,
                    ByVal Cuenta As String,
                    ByVal MayorDebe As Decimal,
                    ByVal MayorHaber As Decimal,
                    ByVal SaldoDeudor As Decimal,
                    ByVal SaldoAcreedor As Decimal,
                    ByVal GestionDebe As Decimal,
                    ByVal GestionHaber As Decimal,
                    ByVal InvtarioActivo As Decimal,
                    ByVal InvtarioPasivo As Decimal,
                    ByVal ResultadoPerdida As Decimal,
                    ByVal ResultadoGanancia As Decimal,
                    ByVal Resultado1 As Decimal,
                    ByVal Resultado2 As Decimal,
                    ByVal Resultado3 As Decimal,
                    ByVal Resultado4 As Decimal,
                    ByVal Cuadre1 As Decimal,
                    ByVal Cuadre2 As Decimal,
                    ByVal Cuadre3 As Decimal,
                    ByVal Cuadre4 As Decimal) As BalancesRow
        Dim rowBalancesRow As BalancesRow = CType(Me.NewRow, BalancesRow)
        Dim columnValuesArray() As Object = New Object() {Codigo, Cuenta, MayorDebe, MayorHaber, SaldoDeudor, SaldoAcreedor, GestionDebe, GestionHaber, InvtarioActivo, InvtarioPasivo, ResultadoPerdida, ResultadoGanancia, Resultado1, Resultado2, Resultado3, Resultado4, Cuadre1, Cuadre2, Cuadre3, Cuadre4}
        rowBalancesRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowBalancesRow)
        Return rowBalancesRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As BalancesDataTable = CType(MyBase.Clone, BalancesDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New BalancesDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnCodigo = MyBase.Columns("Codigo")
        Me.columnCuenta = MyBase.Columns("Cuenta")
        Me.columnMayorDebe = MyBase.Columns("MayorDebe")
        Me.columnMayorHaber = MyBase.Columns("MayorHaber")
        Me.columnSaldoDeudor = MyBase.Columns("SaldoDeudor")
        Me.columnSaldoAcreedor = MyBase.Columns("SaldoAcreedor")
        Me.columnGestionDebe = MyBase.Columns("GestionDebe")
        Me.columnGestionHaber = MyBase.Columns("GestionHaber")
        Me.columnInvtarioActivo = MyBase.Columns("InvtarioActivo")
        Me.columnInvtarioPasivo = MyBase.Columns("InvtarioPasivo")
        Me.columnResultadoPerdida = MyBase.Columns("ResultadoPerdida")
        Me.columnResultadoGanancia = MyBase.Columns("ResultadoGanancia")
        Me.columnResultado1 = MyBase.Columns("Resultado1")
        Me.columnResultado2 = MyBase.Columns("Resultado2")
        Me.columnResultado3 = MyBase.Columns("Resultado3")
        Me.columnResultado4 = MyBase.Columns("Resultado4")
        Me.columnCuadre1 = MyBase.Columns("Cuadre1")
        Me.columnCuadre2 = MyBase.Columns("Cuadre2")
        Me.columnCuadre3 = MyBase.Columns("Cuadre3")
        Me.columnCuadre4 = MyBase.Columns("Cuadre4")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigo)
        Me.columnCuenta = New Global.System.Data.DataColumn("Cuenta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta)
        Me.columnMayorDebe = New Global.System.Data.DataColumn("MayorDebe", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnMayorDebe)
        Me.columnMayorHaber = New Global.System.Data.DataColumn("MayorHaber", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnMayorHaber)
        Me.columnSaldoDeudor = New Global.System.Data.DataColumn("SaldoDeudor", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnSaldoDeudor)
        Me.columnSaldoAcreedor = New Global.System.Data.DataColumn("SaldoAcreedor", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnSaldoAcreedor)
        Me.columnGestionDebe = New Global.System.Data.DataColumn("GestionDebe", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnGestionDebe)
        Me.columnGestionHaber = New Global.System.Data.DataColumn("GestionHaber", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnGestionHaber)
        Me.columnInvtarioActivo = New Global.System.Data.DataColumn("InvtarioActivo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnInvtarioActivo)
        Me.columnInvtarioPasivo = New Global.System.Data.DataColumn("InvtarioPasivo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnInvtarioPasivo)
        Me.columnResultadoPerdida = New Global.System.Data.DataColumn("ResultadoPerdida", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnResultadoPerdida)
        Me.columnResultadoGanancia = New Global.System.Data.DataColumn("ResultadoGanancia", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnResultadoGanancia)
        Me.columnResultado1 = New Global.System.Data.DataColumn("Resultado1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnResultado1)
        Me.columnResultado2 = New Global.System.Data.DataColumn("Resultado2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnResultado2)
        Me.columnResultado3 = New Global.System.Data.DataColumn("Resultado3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnResultado3)
        Me.columnResultado4 = New Global.System.Data.DataColumn("Resultado4", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnResultado4)
        Me.columnCuadre1 = New Global.System.Data.DataColumn("Cuadre1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuadre1)
        Me.columnCuadre2 = New Global.System.Data.DataColumn("Cuadre2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuadre2)
        Me.columnCuadre3 = New Global.System.Data.DataColumn("Cuadre3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuadre3)
        Me.columnCuadre4 = New Global.System.Data.DataColumn("Cuadre4", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuadre4)
        Me.columnMayorDebe.DefaultValue = CType(0, Decimal)
        Me.columnMayorHaber.DefaultValue = CType(0, Decimal)
        Me.columnSaldoDeudor.DefaultValue = CType(0, Decimal)
        Me.columnSaldoAcreedor.DefaultValue = CType(0, Decimal)
        Me.columnGestionDebe.DefaultValue = CType(0, Decimal)
        Me.columnGestionHaber.DefaultValue = CType(0, Decimal)
        Me.columnInvtarioActivo.DefaultValue = CType(0, Decimal)
        Me.columnInvtarioPasivo.DefaultValue = CType(0, Decimal)
        Me.columnResultadoPerdida.DefaultValue = CType(0, Decimal)
        Me.columnResultadoGanancia.DefaultValue = CType(0, Decimal)
        Me.columnResultado1.DefaultValue = CType(0, Decimal)
        Me.columnResultado2.DefaultValue = CType(0, Decimal)
        Me.columnResultado3.DefaultValue = CType(0, Decimal)
        Me.columnResultado4.DefaultValue = CType(0, Decimal)
        Me.columnCuadre1.DefaultValue = CType(0, Decimal)
        Me.columnCuadre2.DefaultValue = CType(0, Decimal)
        Me.columnCuadre3.DefaultValue = CType(0, Decimal)
        Me.columnCuadre4.DefaultValue = CType(0, Decimal)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewBalancesRow() As BalancesRow
        Return CType(Me.NewRow, BalancesRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New BalancesRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(BalancesRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.BalancesRowChangedEvent) Is Nothing) Then
            RaiseEvent BalancesRowChanged(Me, New BalancesRowChangeEvent(CType(e.Row, BalancesRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.BalancesRowChangingEvent) Is Nothing) Then
            RaiseEvent BalancesRowChanging(Me, New BalancesRowChangeEvent(CType(e.Row, BalancesRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.BalancesRowDeletedEvent) Is Nothing) Then
            RaiseEvent BalancesRowDeleted(Me, New BalancesRowChangeEvent(CType(e.Row, BalancesRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.BalancesRowDeletingEvent) Is Nothing) Then
            RaiseEvent BalancesRowDeleting(Me, New BalancesRowChangeEvent(CType(e.Row, BalancesRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemoveBalancesRow(ByVal row As BalancesRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "BalancesDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class AnexosDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnCodigo As Global.System.Data.DataColumn

    Private columnDescripcion As Global.System.Data.DataColumn

    Private columnCuenta As Global.System.Data.DataColumn

    Private columnNombre As Global.System.Data.DataColumn

    Private columnImporte As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "Anexos"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnDescripcion
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CuentaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombre
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ImporteColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnImporte
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As AnexosRow
        Get
            Return CType(Me.Rows(index), AnexosRow)
        End Get
    End Property

    Public Event AnexosRowChanging As AnexosRowChangeEventHandler

    Public Event AnexosRowChanged As AnexosRowChangeEventHandler

    Public Event AnexosRowDeleting As AnexosRowChangeEventHandler

    Public Event AnexosRowDeleted As AnexosRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddAnexosRow(ByVal row As AnexosRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddAnexosRow(ByVal Codigo As String, ByVal Descripcion As String, ByVal Cuenta As String, ByVal Nombre As String, ByVal Importe As Decimal) As AnexosRow
        Dim rowAnexosRow As AnexosRow = CType(Me.NewRow, AnexosRow)
        Dim columnValuesArray() As Object = New Object() {Codigo, Descripcion, Cuenta, Nombre, Importe}
        rowAnexosRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowAnexosRow)
        Return rowAnexosRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As AnexosDataTable = CType(MyBase.Clone, AnexosDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New AnexosDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnCodigo = MyBase.Columns("Codigo")
        Me.columnDescripcion = MyBase.Columns("Descripcion")
        Me.columnCuenta = MyBase.Columns("Cuenta")
        Me.columnNombre = MyBase.Columns("Nombre")
        Me.columnImporte = MyBase.Columns("Importe")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigo)
        Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnDescripcion)
        Me.columnCuenta = New Global.System.Data.DataColumn("Cuenta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta)
        Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombre)
        Me.columnImporte = New Global.System.Data.DataColumn("Importe", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnImporte)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewAnexosRow() As AnexosRow
        Return CType(Me.NewRow, AnexosRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New AnexosRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(AnexosRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.AnexosRowChangedEvent) Is Nothing) Then
            RaiseEvent AnexosRowChanged(Me, New AnexosRowChangeEvent(CType(e.Row, AnexosRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.AnexosRowChangingEvent) Is Nothing) Then
            RaiseEvent AnexosRowChanging(Me, New AnexosRowChangeEvent(CType(e.Row, AnexosRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.AnexosRowDeletedEvent) Is Nothing) Then
            RaiseEvent AnexosRowDeleted(Me, New AnexosRowChangeEvent(CType(e.Row, AnexosRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.AnexosRowDeletingEvent) Is Nothing) Then
            RaiseEvent AnexosRowDeleting(Me, New AnexosRowChangeEvent(CType(e.Row, AnexosRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemoveAnexosRow(ByVal row As AnexosRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "AnexosDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class PcgeDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnCuenta As Global.System.Data.DataColumn

    Private columnNombreCuenta As Global.System.Data.DataColumn

    Private columndocumento As Global.System.Data.DataColumn

    Private columnauxiliar As Global.System.Data.DataColumn

    Private columncosto As Global.System.Data.DataColumn

    Private columnalmacen As Global.System.Data.DataColumn

    Private columnarea As Global.System.Data.DataColumn

    Private columnflujo As Global.System.Data.DataColumn

    Private columndiferencia As Global.System.Data.DataColumn

    Private columnbanco As Global.System.Data.DataColumn

    Private columnformato As Global.System.Data.DataColumn

    Private columnAutomatica As Global.System.Data.DataColumn

    Private columnAutomatica1 As Global.System.Data.DataColumn

    Private columnAutomatica2 As Global.System.Data.DataColumn

    Private columnNumeroDigitos As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "Pcge"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CuentaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreCuentaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreCuenta
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property documentoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columndocumento
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property auxiliarColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnauxiliar
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property costoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columncosto
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property almacenColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnalmacen
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property areaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnarea
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property flujoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnflujo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property diferenciaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columndiferencia
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property bancoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnbanco
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property formatoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnformato
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property AutomaticaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnAutomatica
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Automatica1Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnAutomatica1
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Automatica2Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnAutomatica2
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NumeroDigitosColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNumeroDigitos
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As PcgeRow
        Get
            Return CType(Me.Rows(index), PcgeRow)
        End Get
    End Property

    Public Event PcgeRowChanging As PcgeRowChangeEventHandler

    Public Event PcgeRowChanged As PcgeRowChangeEventHandler

    Public Event PcgeRowDeleting As PcgeRowChangeEventHandler

    Public Event PcgeRowDeleted As PcgeRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddPcgeRow(ByVal row As PcgeRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddPcgeRow(ByVal Cuenta As String, ByVal NombreCuenta As String, ByVal documento As String, ByVal auxiliar As String, ByVal costo As String, ByVal almacen As String, ByVal area As String, ByVal flujo As String, ByVal diferencia As String, ByVal banco As String, ByVal formato As String, ByVal Automatica As String, ByVal Automatica1 As String, ByVal Automatica2 As String, ByVal NumeroDigitos As String) As PcgeRow
        Dim rowPcgeRow As PcgeRow = CType(Me.NewRow, PcgeRow)
        Dim columnValuesArray() As Object = New Object() {Cuenta, NombreCuenta, documento, auxiliar, costo, almacen, area, flujo, diferencia, banco, formato, Automatica, Automatica1, Automatica2, NumeroDigitos}
        rowPcgeRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowPcgeRow)
        Return rowPcgeRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As PcgeDataTable = CType(MyBase.Clone, PcgeDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New PcgeDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnCuenta = MyBase.Columns("Cuenta")
        Me.columnNombreCuenta = MyBase.Columns("NombreCuenta")
        Me.columndocumento = MyBase.Columns("documento")
        Me.columnauxiliar = MyBase.Columns("auxiliar")
        Me.columncosto = MyBase.Columns("costo")
        Me.columnalmacen = MyBase.Columns("almacen")
        Me.columnarea = MyBase.Columns("area")
        Me.columnflujo = MyBase.Columns("flujo")
        Me.columndiferencia = MyBase.Columns("diferencia")
        Me.columnbanco = MyBase.Columns("banco")
        Me.columnformato = MyBase.Columns("formato")
        Me.columnAutomatica = MyBase.Columns("Automatica")
        Me.columnAutomatica1 = MyBase.Columns("Automatica1")
        Me.columnAutomatica2 = MyBase.Columns("Automatica2")
        Me.columnNumeroDigitos = MyBase.Columns("NumeroDigitos")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnCuenta = New Global.System.Data.DataColumn("Cuenta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta)
        Me.columnNombreCuenta = New Global.System.Data.DataColumn("NombreCuenta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreCuenta)
        Me.columndocumento = New Global.System.Data.DataColumn("documento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columndocumento)
        Me.columnauxiliar = New Global.System.Data.DataColumn("auxiliar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnauxiliar)
        Me.columncosto = New Global.System.Data.DataColumn("costo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columncosto)
        Me.columnalmacen = New Global.System.Data.DataColumn("almacen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnalmacen)
        Me.columnarea = New Global.System.Data.DataColumn("area", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnarea)
        Me.columnflujo = New Global.System.Data.DataColumn("flujo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnflujo)
        Me.columndiferencia = New Global.System.Data.DataColumn("diferencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columndiferencia)
        Me.columnbanco = New Global.System.Data.DataColumn("banco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnbanco)
        Me.columnformato = New Global.System.Data.DataColumn("formato", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnformato)
        Me.columnAutomatica = New Global.System.Data.DataColumn("Automatica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnAutomatica)
        Me.columnAutomatica1 = New Global.System.Data.DataColumn("Automatica1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnAutomatica1)
        Me.columnAutomatica2 = New Global.System.Data.DataColumn("Automatica2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnAutomatica2)
        Me.columnNumeroDigitos = New Global.System.Data.DataColumn("NumeroDigitos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNumeroDigitos)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewPcgeRow() As PcgeRow
        Return CType(Me.NewRow, PcgeRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New PcgeRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(PcgeRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.PcgeRowChangedEvent) Is Nothing) Then
            RaiseEvent PcgeRowChanged(Me, New PcgeRowChangeEvent(CType(e.Row, PcgeRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.PcgeRowChangingEvent) Is Nothing) Then
            RaiseEvent PcgeRowChanging(Me, New PcgeRowChangeEvent(CType(e.Row, PcgeRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.PcgeRowDeletedEvent) Is Nothing) Then
            RaiseEvent PcgeRowDeleted(Me, New PcgeRowChangeEvent(CType(e.Row, PcgeRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.PcgeRowDeletingEvent) Is Nothing) Then
            RaiseEvent PcgeRowDeleting(Me, New PcgeRowChangeEvent(CType(e.Row, PcgeRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemovePcgeRow(ByVal row As PcgeRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "PcgeDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class DiarioSimplificadoDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnFecha As Global.System.Data.DataColumn

    Private columnOperacion As Global.System.Data.DataColumn

    Private columnCuenta10 As Global.System.Data.DataColumn

    Private columnCuenta12 As Global.System.Data.DataColumn

    Private columnCuenta16 As Global.System.Data.DataColumn

    Private columnCuenta20 As Global.System.Data.DataColumn

    Private columnCuenta21 As Global.System.Data.DataColumn

    Private columnCuenta33 As Global.System.Data.DataColumn

    Private columnCuenta34 As Global.System.Data.DataColumn

    Private columnCuenta38 As Global.System.Data.DataColumn

    Private columnCuenta39 As Global.System.Data.DataColumn

    Private columnCuentaAct As Global.System.Data.DataColumn

    Private columnCuenta4011D As Global.System.Data.DataColumn

    Private columnCuenta4011C As Global.System.Data.DataColumn

    Private columnCuenta4017D As Global.System.Data.DataColumn

    Private columnCuenta4017C As Global.System.Data.DataColumn

    Private columnCuenta402 As Global.System.Data.DataColumn

    Private columnCuenta42 As Global.System.Data.DataColumn

    Private columnCuenta46 As Global.System.Data.DataColumn

    Private columnCuentaPas As Global.System.Data.DataColumn

    Private columnCuenta50 As Global.System.Data.DataColumn

    Private columnCuenta58 As Global.System.Data.DataColumn

    Private columnCuenta59 As Global.System.Data.DataColumn

    Private columnCuentaPat As Global.System.Data.DataColumn

    Private columnCuenta60 As Global.System.Data.DataColumn

    Private columnCuenta61 As Global.System.Data.DataColumn

    Private columnCuenta62 As Global.System.Data.DataColumn

    Private columnCuenta63 As Global.System.Data.DataColumn

    Private columnCuenta65 As Global.System.Data.DataColumn

    Private columnCuenta66 As Global.System.Data.DataColumn

    Private columnCuenta67 As Global.System.Data.DataColumn

    Private columnCuenta68 As Global.System.Data.DataColumn

    Private columnCuenta69 As Global.System.Data.DataColumn

    Private columnCuenta96 As Global.System.Data.DataColumn

    Private columnCuenta97 As Global.System.Data.DataColumn

    Private columnCuentaGas As Global.System.Data.DataColumn

    Private columnCuenta70 As Global.System.Data.DataColumn

    Private columnCuenta75 As Global.System.Data.DataColumn

    Private columnCuenta76 As Global.System.Data.DataColumn

    Private columnCuenta77 As Global.System.Data.DataColumn

    Private columnCuenta79 As Global.System.Data.DataColumn

    Private columnCuentaIng As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "DiarioSimplificado"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnFecha
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property OperacionColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnOperacion
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta10Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta10
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta12Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta12
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta16Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta16
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta20Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta20
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta21Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta21
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta33Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta33
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta34Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta34
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta38Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta38
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta39Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta39
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CuentaActColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuentaAct
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta4011DColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta4011D
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta4011CColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta4011C
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta4017DColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta4017D
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta4017CColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta4017C
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta402Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta402
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta42Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta42
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta46Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta46
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CuentaPasColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuentaPas
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta50Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta50
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta58Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta58
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta59Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta59
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CuentaPatColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuentaPat
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta60Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta60
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta61Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta61
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta62Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta62
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta63Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta63
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta65Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta65
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta66Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta66
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta67Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta67
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta68Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta68
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta69Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta69
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta96Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta96
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta97Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta97
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CuentaGasColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuentaGas
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta70Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta70
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta75Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta75
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta76Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta76
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta77Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta77
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Cuenta79Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta79
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CuentaIngColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuentaIng
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As DiarioSimplificadoRow
        Get
            Return CType(Me.Rows(index), DiarioSimplificadoRow)
        End Get
    End Property

    Public Event DiarioSimplificadoRowChanging As DiarioSimplificadoRowChangeEventHandler

    Public Event DiarioSimplificadoRowChanged As DiarioSimplificadoRowChangeEventHandler

    Public Event DiarioSimplificadoRowDeleting As DiarioSimplificadoRowChangeEventHandler

    Public Event DiarioSimplificadoRowDeleted As DiarioSimplificadoRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddDiarioSimplificadoRow(ByVal row As DiarioSimplificadoRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddDiarioSimplificadoRow(
                    ByVal Fecha As String,
                    ByVal Operacion As String,
                    ByVal Cuenta10 As Decimal,
                    ByVal Cuenta12 As Decimal,
                    ByVal Cuenta16 As Decimal,
                    ByVal Cuenta20 As Decimal,
                    ByVal Cuenta21 As Decimal,
                    ByVal Cuenta33 As Decimal,
                    ByVal Cuenta34 As Decimal,
                    ByVal Cuenta38 As Decimal,
                    ByVal Cuenta39 As Decimal,
                    ByVal CuentaAct As String,
                    ByVal Cuenta4011D As Decimal,
                    ByVal Cuenta4011C As Decimal,
                    ByVal Cuenta4017D As Decimal,
                    ByVal Cuenta4017C As Decimal,
                    ByVal Cuenta402 As Decimal,
                    ByVal Cuenta42 As Decimal,
                    ByVal Cuenta46 As Decimal,
                    ByVal CuentaPas As String,
                    ByVal Cuenta50 As Decimal,
                    ByVal Cuenta58 As Decimal,
                    ByVal Cuenta59 As Decimal,
                    ByVal CuentaPat As String,
                    ByVal Cuenta60 As Decimal,
                    ByVal Cuenta61 As Decimal,
                    ByVal Cuenta62 As Decimal,
                    ByVal Cuenta63 As Decimal,
                    ByVal Cuenta65 As Decimal,
                    ByVal Cuenta66 As Decimal,
                    ByVal Cuenta67 As Decimal,
                    ByVal Cuenta68 As Decimal,
                    ByVal Cuenta69 As Decimal,
                    ByVal Cuenta96 As Decimal,
                    ByVal Cuenta97 As Decimal,
                    ByVal CuentaGas As String,
                    ByVal Cuenta70 As Decimal,
                    ByVal Cuenta75 As Decimal,
                    ByVal Cuenta76 As Decimal,
                    ByVal Cuenta77 As Decimal,
                    ByVal Cuenta79 As Decimal,
                    ByVal CuentaIng As String) As DiarioSimplificadoRow
        Dim rowDiarioSimplificadoRow As DiarioSimplificadoRow = CType(Me.NewRow, DiarioSimplificadoRow)
        Dim columnValuesArray() As Object = New Object() {Fecha, Operacion, Cuenta10, Cuenta12, Cuenta16, Cuenta20, Cuenta21, Cuenta33, Cuenta34, Cuenta38, Cuenta39, CuentaAct, Cuenta4011D, Cuenta4011C, Cuenta4017D, Cuenta4017C, Cuenta402, Cuenta42, Cuenta46, CuentaPas, Cuenta50, Cuenta58, Cuenta59, CuentaPat, Cuenta60, Cuenta61, Cuenta62, Cuenta63, Cuenta65, Cuenta66, Cuenta67, Cuenta68, Cuenta69, Cuenta96, Cuenta97, CuentaGas, Cuenta70, Cuenta75, Cuenta76, Cuenta77, Cuenta79, CuentaIng}
        rowDiarioSimplificadoRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowDiarioSimplificadoRow)
        Return rowDiarioSimplificadoRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As DiarioSimplificadoDataTable = CType(MyBase.Clone, DiarioSimplificadoDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New DiarioSimplificadoDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnFecha = MyBase.Columns("Fecha")
        Me.columnOperacion = MyBase.Columns("Operacion")
        Me.columnCuenta10 = MyBase.Columns("Cuenta10")
        Me.columnCuenta12 = MyBase.Columns("Cuenta12")
        Me.columnCuenta16 = MyBase.Columns("Cuenta16")
        Me.columnCuenta20 = MyBase.Columns("Cuenta20")
        Me.columnCuenta21 = MyBase.Columns("Cuenta21")
        Me.columnCuenta33 = MyBase.Columns("Cuenta33")
        Me.columnCuenta34 = MyBase.Columns("Cuenta34")
        Me.columnCuenta38 = MyBase.Columns("Cuenta38")
        Me.columnCuenta39 = MyBase.Columns("Cuenta39")
        Me.columnCuentaAct = MyBase.Columns("CuentaAct")
        Me.columnCuenta4011D = MyBase.Columns("Cuenta4011D")
        Me.columnCuenta4011C = MyBase.Columns("Cuenta4011C")
        Me.columnCuenta4017D = MyBase.Columns("Cuenta4017D")
        Me.columnCuenta4017C = MyBase.Columns("Cuenta4017C")
        Me.columnCuenta402 = MyBase.Columns("Cuenta402")
        Me.columnCuenta42 = MyBase.Columns("Cuenta42")
        Me.columnCuenta46 = MyBase.Columns("Cuenta46")
        Me.columnCuentaPas = MyBase.Columns("CuentaPas")
        Me.columnCuenta50 = MyBase.Columns("Cuenta50")
        Me.columnCuenta58 = MyBase.Columns("Cuenta58")
        Me.columnCuenta59 = MyBase.Columns("Cuenta59")
        Me.columnCuentaPat = MyBase.Columns("CuentaPat")
        Me.columnCuenta60 = MyBase.Columns("Cuenta60")
        Me.columnCuenta61 = MyBase.Columns("Cuenta61")
        Me.columnCuenta62 = MyBase.Columns("Cuenta62")
        Me.columnCuenta63 = MyBase.Columns("Cuenta63")
        Me.columnCuenta65 = MyBase.Columns("Cuenta65")
        Me.columnCuenta66 = MyBase.Columns("Cuenta66")
        Me.columnCuenta67 = MyBase.Columns("Cuenta67")
        Me.columnCuenta68 = MyBase.Columns("Cuenta68")
        Me.columnCuenta69 = MyBase.Columns("Cuenta69")
        Me.columnCuenta96 = MyBase.Columns("Cuenta96")
        Me.columnCuenta97 = MyBase.Columns("Cuenta97")
        Me.columnCuentaGas = MyBase.Columns("CuentaGas")
        Me.columnCuenta70 = MyBase.Columns("Cuenta70")
        Me.columnCuenta75 = MyBase.Columns("Cuenta75")
        Me.columnCuenta76 = MyBase.Columns("Cuenta76")
        Me.columnCuenta77 = MyBase.Columns("Cuenta77")
        Me.columnCuenta79 = MyBase.Columns("Cuenta79")
        Me.columnCuentaIng = MyBase.Columns("CuentaIng")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnFecha)
        Me.columnOperacion = New Global.System.Data.DataColumn("Operacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnOperacion)
        Me.columnCuenta10 = New Global.System.Data.DataColumn("Cuenta10", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta10)
        Me.columnCuenta12 = New Global.System.Data.DataColumn("Cuenta12", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta12)
        Me.columnCuenta16 = New Global.System.Data.DataColumn("Cuenta16", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta16)
        Me.columnCuenta20 = New Global.System.Data.DataColumn("Cuenta20", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta20)
        Me.columnCuenta21 = New Global.System.Data.DataColumn("Cuenta21", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta21)
        Me.columnCuenta33 = New Global.System.Data.DataColumn("Cuenta33", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta33)
        Me.columnCuenta34 = New Global.System.Data.DataColumn("Cuenta34", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta34)
        Me.columnCuenta38 = New Global.System.Data.DataColumn("Cuenta38", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta38)
        Me.columnCuenta39 = New Global.System.Data.DataColumn("Cuenta39", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta39)
        Me.columnCuentaAct = New Global.System.Data.DataColumn("CuentaAct", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuentaAct)
        Me.columnCuenta4011D = New Global.System.Data.DataColumn("Cuenta4011D", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta4011D)
        Me.columnCuenta4011C = New Global.System.Data.DataColumn("Cuenta4011C", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta4011C)
        Me.columnCuenta4017D = New Global.System.Data.DataColumn("Cuenta4017D", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta4017D)
        Me.columnCuenta4017C = New Global.System.Data.DataColumn("Cuenta4017C", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta4017C)
        Me.columnCuenta402 = New Global.System.Data.DataColumn("Cuenta402", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta402)
        Me.columnCuenta42 = New Global.System.Data.DataColumn("Cuenta42", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta42)
        Me.columnCuenta46 = New Global.System.Data.DataColumn("Cuenta46", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta46)
        Me.columnCuentaPas = New Global.System.Data.DataColumn("CuentaPas", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuentaPas)
        Me.columnCuenta50 = New Global.System.Data.DataColumn("Cuenta50", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta50)
        Me.columnCuenta58 = New Global.System.Data.DataColumn("Cuenta58", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta58)
        Me.columnCuenta59 = New Global.System.Data.DataColumn("Cuenta59", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta59)
        Me.columnCuentaPat = New Global.System.Data.DataColumn("CuentaPat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuentaPat)
        Me.columnCuenta60 = New Global.System.Data.DataColumn("Cuenta60", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta60)
        Me.columnCuenta61 = New Global.System.Data.DataColumn("Cuenta61", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta61)
        Me.columnCuenta62 = New Global.System.Data.DataColumn("Cuenta62", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta62)
        Me.columnCuenta63 = New Global.System.Data.DataColumn("Cuenta63", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta63)
        Me.columnCuenta65 = New Global.System.Data.DataColumn("Cuenta65", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta65)
        Me.columnCuenta66 = New Global.System.Data.DataColumn("Cuenta66", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta66)
        Me.columnCuenta67 = New Global.System.Data.DataColumn("Cuenta67", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta67)
        Me.columnCuenta68 = New Global.System.Data.DataColumn("Cuenta68", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta68)
        Me.columnCuenta69 = New Global.System.Data.DataColumn("Cuenta69", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta69)
        Me.columnCuenta96 = New Global.System.Data.DataColumn("Cuenta96", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta96)
        Me.columnCuenta97 = New Global.System.Data.DataColumn("Cuenta97", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta97)
        Me.columnCuentaGas = New Global.System.Data.DataColumn("CuentaGas", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuentaGas)
        Me.columnCuenta70 = New Global.System.Data.DataColumn("Cuenta70", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta70)
        Me.columnCuenta75 = New Global.System.Data.DataColumn("Cuenta75", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta75)
        Me.columnCuenta76 = New Global.System.Data.DataColumn("Cuenta76", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta76)
        Me.columnCuenta77 = New Global.System.Data.DataColumn("Cuenta77", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta77)
        Me.columnCuenta79 = New Global.System.Data.DataColumn("Cuenta79", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta79)
        Me.columnCuentaIng = New Global.System.Data.DataColumn("CuentaIng", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuentaIng)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewDiarioSimplificadoRow() As DiarioSimplificadoRow
        Return CType(Me.NewRow, DiarioSimplificadoRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New DiarioSimplificadoRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(DiarioSimplificadoRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.DiarioSimplificadoRowChangedEvent) Is Nothing) Then
            RaiseEvent DiarioSimplificadoRowChanged(Me, New DiarioSimplificadoRowChangeEvent(CType(e.Row, DiarioSimplificadoRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.DiarioSimplificadoRowChangingEvent) Is Nothing) Then
            RaiseEvent DiarioSimplificadoRowChanging(Me, New DiarioSimplificadoRowChangeEvent(CType(e.Row, DiarioSimplificadoRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.DiarioSimplificadoRowDeletedEvent) Is Nothing) Then
            RaiseEvent DiarioSimplificadoRowDeleted(Me, New DiarioSimplificadoRowChangeEvent(CType(e.Row, DiarioSimplificadoRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.DiarioSimplificadoRowDeletingEvent) Is Nothing) Then
            RaiseEvent DiarioSimplificadoRowDeleting(Me, New DiarioSimplificadoRowChangeEvent(CType(e.Row, DiarioSimplificadoRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemoveDiarioSimplificadoRow(ByVal row As DiarioSimplificadoRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "DiarioSimplificadoDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class FormatoContableDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnCodigoFC As Global.System.Data.DataColumn

    Private columnDescripcionFC As Global.System.Data.DataColumn

    Private columnGrupoFC As Global.System.Data.DataColumn

    Private columnNombreGrupoFC As Global.System.Data.DataColumn

    Private columnImporteSoles As Global.System.Data.DataColumn

    Private columnImporteDolares As Global.System.Data.DataColumn

    Private columnImporteEuros As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "FormatoContable"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoFCColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoFC
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property DescripcionFCColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnDescripcionFC
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property GrupoFCColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnGrupoFC
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreGrupoFCColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreGrupoFC
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ImporteSolesColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnImporteSoles
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ImporteDolaresColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnImporteDolares
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ImporteEurosColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnImporteEuros
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As FormatoContableRow
        Get
            Return CType(Me.Rows(index), FormatoContableRow)
        End Get
    End Property

    Public Event FormatoContableRowChanging As FormatoContableRowChangeEventHandler

    Public Event FormatoContableRowChanged As FormatoContableRowChangeEventHandler

    Public Event FormatoContableRowDeleting As FormatoContableRowChangeEventHandler

    Public Event FormatoContableRowDeleted As FormatoContableRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddFormatoContableRow(ByVal row As FormatoContableRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddFormatoContableRow(ByVal CodigoFC As String, ByVal DescripcionFC As String, ByVal GrupoFC As String, ByVal NombreGrupoFC As String, ByVal ImporteSoles As Decimal, ByVal ImporteDolares As Decimal, ByVal ImporteEuros As Decimal) As FormatoContableRow
        Dim rowFormatoContableRow As FormatoContableRow = CType(Me.NewRow, FormatoContableRow)
        Dim columnValuesArray() As Object = New Object() {CodigoFC, DescripcionFC, GrupoFC, NombreGrupoFC, ImporteSoles, ImporteDolares, ImporteEuros}
        rowFormatoContableRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowFormatoContableRow)
        Return rowFormatoContableRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As FormatoContableDataTable = CType(MyBase.Clone, FormatoContableDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New FormatoContableDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnCodigoFC = MyBase.Columns("CodigoFC")
        Me.columnDescripcionFC = MyBase.Columns("DescripcionFC")
        Me.columnGrupoFC = MyBase.Columns("GrupoFC")
        Me.columnNombreGrupoFC = MyBase.Columns("NombreGrupoFC")
        Me.columnImporteSoles = MyBase.Columns("ImporteSoles")
        Me.columnImporteDolares = MyBase.Columns("ImporteDolares")
        Me.columnImporteEuros = MyBase.Columns("ImporteEuros")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnCodigoFC = New Global.System.Data.DataColumn("CodigoFC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoFC)
        Me.columnDescripcionFC = New Global.System.Data.DataColumn("DescripcionFC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnDescripcionFC)
        Me.columnGrupoFC = New Global.System.Data.DataColumn("GrupoFC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnGrupoFC)
        Me.columnNombreGrupoFC = New Global.System.Data.DataColumn("NombreGrupoFC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreGrupoFC)
        Me.columnImporteSoles = New Global.System.Data.DataColumn("ImporteSoles", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnImporteSoles)
        Me.columnImporteDolares = New Global.System.Data.DataColumn("ImporteDolares", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnImporteDolares)
        Me.columnImporteEuros = New Global.System.Data.DataColumn("ImporteEuros", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnImporteEuros)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewFormatoContableRow() As FormatoContableRow
        Return CType(Me.NewRow, FormatoContableRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New FormatoContableRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(FormatoContableRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.FormatoContableRowChangedEvent) Is Nothing) Then
            RaiseEvent FormatoContableRowChanged(Me, New FormatoContableRowChangeEvent(CType(e.Row, FormatoContableRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.FormatoContableRowChangingEvent) Is Nothing) Then
            RaiseEvent FormatoContableRowChanging(Me, New FormatoContableRowChangeEvent(CType(e.Row, FormatoContableRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.FormatoContableRowDeletedEvent) Is Nothing) Then
            RaiseEvent FormatoContableRowDeleted(Me, New FormatoContableRowChangeEvent(CType(e.Row, FormatoContableRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.FormatoContableRowDeletingEvent) Is Nothing) Then
            RaiseEvent FormatoContableRowDeleting(Me, New FormatoContableRowChangeEvent(CType(e.Row, FormatoContableRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemoveFormatoContableRow(ByVal row As FormatoContableRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "FormatoContableDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class BalanceGeneralDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnNombreActivo As Global.System.Data.DataColumn

    Private columnMontoActivo As Global.System.Data.DataColumn

    Private columnNombrePasivo As Global.System.Data.DataColumn

    Private columnMontoPasivo As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "BalanceGeneral"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreActivoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreActivo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property MontoActivoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnMontoActivo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombrePasivoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombrePasivo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property MontoPasivoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnMontoPasivo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As BalanceGeneralRow
        Get
            Return CType(Me.Rows(index), BalanceGeneralRow)
        End Get
    End Property

    Public Event BalanceGeneralRowChanging As BalanceGeneralRowChangeEventHandler

    Public Event BalanceGeneralRowChanged As BalanceGeneralRowChangeEventHandler

    Public Event BalanceGeneralRowDeleting As BalanceGeneralRowChangeEventHandler

    Public Event BalanceGeneralRowDeleted As BalanceGeneralRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddBalanceGeneralRow(ByVal row As BalanceGeneralRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddBalanceGeneralRow(ByVal NombreActivo As String, ByVal MontoActivo As String, ByVal NombrePasivo As String, ByVal MontoPasivo As String) As BalanceGeneralRow
        Dim rowBalanceGeneralRow As BalanceGeneralRow = CType(Me.NewRow, BalanceGeneralRow)
        Dim columnValuesArray() As Object = New Object() {NombreActivo, MontoActivo, NombrePasivo, MontoPasivo}
        rowBalanceGeneralRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowBalanceGeneralRow)
        Return rowBalanceGeneralRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As BalanceGeneralDataTable = CType(MyBase.Clone, BalanceGeneralDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New BalanceGeneralDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnNombreActivo = MyBase.Columns("NombreActivo")
        Me.columnMontoActivo = MyBase.Columns("MontoActivo")
        Me.columnNombrePasivo = MyBase.Columns("NombrePasivo")
        Me.columnMontoPasivo = MyBase.Columns("MontoPasivo")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnNombreActivo = New Global.System.Data.DataColumn("NombreActivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreActivo)
        Me.columnMontoActivo = New Global.System.Data.DataColumn("MontoActivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnMontoActivo)
        Me.columnNombrePasivo = New Global.System.Data.DataColumn("NombrePasivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombrePasivo)
        Me.columnMontoPasivo = New Global.System.Data.DataColumn("MontoPasivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnMontoPasivo)
        Me.columnNombreActivo.DefaultValue = CType("", String)
        Me.columnMontoActivo.DefaultValue = CType("", String)
        Me.columnNombrePasivo.DefaultValue = CType("", String)
        Me.columnMontoPasivo.DefaultValue = CType("", String)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewBalanceGeneralRow() As BalanceGeneralRow
        Return CType(Me.NewRow, BalanceGeneralRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New BalanceGeneralRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(BalanceGeneralRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.BalanceGeneralRowChangedEvent) Is Nothing) Then
            RaiseEvent BalanceGeneralRowChanged(Me, New BalanceGeneralRowChangeEvent(CType(e.Row, BalanceGeneralRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.BalanceGeneralRowChangingEvent) Is Nothing) Then
            RaiseEvent BalanceGeneralRowChanging(Me, New BalanceGeneralRowChangeEvent(CType(e.Row, BalanceGeneralRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.BalanceGeneralRowDeletedEvent) Is Nothing) Then
            RaiseEvent BalanceGeneralRowDeleted(Me, New BalanceGeneralRowChangeEvent(CType(e.Row, BalanceGeneralRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.BalanceGeneralRowDeletingEvent) Is Nothing) Then
            RaiseEvent BalanceGeneralRowDeleting(Me, New BalanceGeneralRowChangeEvent(CType(e.Row, BalanceGeneralRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemoveBalanceGeneralRow(ByVal row As BalanceGeneralRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "BalanceGeneralDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class GananciaPerdidaDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnCodigo As Global.System.Data.DataColumn

    Private columnNombre As Global.System.Data.DataColumn

    Private columnMontoMes As Global.System.Data.DataColumn

    Private columnMontoAcumulado As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "GananciaPerdida"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombre
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property MontoMesColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnMontoMes
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property MontoAcumuladoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnMontoAcumulado
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As GananciaPerdidaRow
        Get
            Return CType(Me.Rows(index), GananciaPerdidaRow)
        End Get
    End Property

    Public Event GananciaPerdidaRowChanging As GananciaPerdidaRowChangeEventHandler

    Public Event GananciaPerdidaRowChanged As GananciaPerdidaRowChangeEventHandler

    Public Event GananciaPerdidaRowDeleting As GananciaPerdidaRowChangeEventHandler

    Public Event GananciaPerdidaRowDeleted As GananciaPerdidaRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddGananciaPerdidaRow(ByVal row As GananciaPerdidaRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddGananciaPerdidaRow(ByVal Codigo As String, ByVal Nombre As String, ByVal MontoMes As String, ByVal MontoAcumulado As String) As GananciaPerdidaRow
        Dim rowGananciaPerdidaRow As GananciaPerdidaRow = CType(Me.NewRow, GananciaPerdidaRow)
        Dim columnValuesArray() As Object = New Object() {Codigo, Nombre, MontoMes, MontoAcumulado}
        rowGananciaPerdidaRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowGananciaPerdidaRow)
        Return rowGananciaPerdidaRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As GananciaPerdidaDataTable = CType(MyBase.Clone, GananciaPerdidaDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New GananciaPerdidaDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnCodigo = MyBase.Columns("Codigo")
        Me.columnNombre = MyBase.Columns("Nombre")
        Me.columnMontoMes = MyBase.Columns("MontoMes")
        Me.columnMontoAcumulado = MyBase.Columns("MontoAcumulado")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigo)
        Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombre)
        Me.columnMontoMes = New Global.System.Data.DataColumn("MontoMes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnMontoMes)
        Me.columnMontoAcumulado = New Global.System.Data.DataColumn("MontoAcumulado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnMontoAcumulado)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewGananciaPerdidaRow() As GananciaPerdidaRow
        Return CType(Me.NewRow, GananciaPerdidaRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New GananciaPerdidaRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(GananciaPerdidaRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.GananciaPerdidaRowChangedEvent) Is Nothing) Then
            RaiseEvent GananciaPerdidaRowChanged(Me, New GananciaPerdidaRowChangeEvent(CType(e.Row, GananciaPerdidaRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.GananciaPerdidaRowChangingEvent) Is Nothing) Then
            RaiseEvent GananciaPerdidaRowChanging(Me, New GananciaPerdidaRowChangeEvent(CType(e.Row, GananciaPerdidaRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.GananciaPerdidaRowDeletedEvent) Is Nothing) Then
            RaiseEvent GananciaPerdidaRowDeleted(Me, New GananciaPerdidaRowChangeEvent(CType(e.Row, GananciaPerdidaRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.GananciaPerdidaRowDeletingEvent) Is Nothing) Then
            RaiseEvent GananciaPerdidaRowDeleting(Me, New GananciaPerdidaRowChangeEvent(CType(e.Row, GananciaPerdidaRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemoveGananciaPerdidaRow(ByVal row As GananciaPerdidaRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "GananciaPerdidaDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class GananciaPerdida1DataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnCodigo As Global.System.Data.DataColumn

    Private columnNombre As Global.System.Data.DataColumn

    Private columnMontoMes As Global.System.Data.DataColumn

    Private columnMontoAcumulado As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "GananciaPerdida1"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombre
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property MontoMesColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnMontoMes
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property MontoAcumuladoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnMontoAcumulado
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As GananciaPerdida1Row
        Get
            Return CType(Me.Rows(index), GananciaPerdida1Row)
        End Get
    End Property

    Public Event GananciaPerdida1RowChanging As GananciaPerdida1RowChangeEventHandler

    Public Event GananciaPerdida1RowChanged As GananciaPerdida1RowChangeEventHandler

    Public Event GananciaPerdida1RowDeleting As GananciaPerdida1RowChangeEventHandler

    Public Event GananciaPerdida1RowDeleted As GananciaPerdida1RowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddGananciaPerdida1Row(ByVal row As GananciaPerdida1Row)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddGananciaPerdida1Row(ByVal Codigo As String, ByVal Nombre As String, ByVal MontoMes As String, ByVal MontoAcumulado As String) As GananciaPerdida1Row
        Dim rowGananciaPerdida1Row As GananciaPerdida1Row = CType(Me.NewRow, GananciaPerdida1Row)
        Dim columnValuesArray() As Object = New Object() {Codigo, Nombre, MontoMes, MontoAcumulado}
        rowGananciaPerdida1Row.ItemArray = columnValuesArray
        Me.Rows.Add(rowGananciaPerdida1Row)
        Return rowGananciaPerdida1Row
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As GananciaPerdida1DataTable = CType(MyBase.Clone, GananciaPerdida1DataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New GananciaPerdida1DataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnCodigo = MyBase.Columns("Codigo")
        Me.columnNombre = MyBase.Columns("Nombre")
        Me.columnMontoMes = MyBase.Columns("MontoMes")
        Me.columnMontoAcumulado = MyBase.Columns("MontoAcumulado")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigo)
        Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombre)
        Me.columnMontoMes = New Global.System.Data.DataColumn("MontoMes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnMontoMes)
        Me.columnMontoAcumulado = New Global.System.Data.DataColumn("MontoAcumulado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnMontoAcumulado)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewGananciaPerdida1Row() As GananciaPerdida1Row
        Return CType(Me.NewRow, GananciaPerdida1Row)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New GananciaPerdida1Row(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(GananciaPerdida1Row)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.GananciaPerdida1RowChangedEvent) Is Nothing) Then
            RaiseEvent GananciaPerdida1RowChanged(Me, New GananciaPerdida1RowChangeEvent(CType(e.Row, GananciaPerdida1Row), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.GananciaPerdida1RowChangingEvent) Is Nothing) Then
            RaiseEvent GananciaPerdida1RowChanging(Me, New GananciaPerdida1RowChangeEvent(CType(e.Row, GananciaPerdida1Row), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.GananciaPerdida1RowDeletedEvent) Is Nothing) Then
            RaiseEvent GananciaPerdida1RowDeleted(Me, New GananciaPerdida1RowChangeEvent(CType(e.Row, GananciaPerdida1Row), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.GananciaPerdida1RowDeletingEvent) Is Nothing) Then
            RaiseEvent GananciaPerdida1RowDeleting(Me, New GananciaPerdida1RowChangeEvent(CType(e.Row, GananciaPerdida1Row), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemoveGananciaPerdida1Row(ByVal row As GananciaPerdida1Row)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "GananciaPerdida1DataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class SaldoBancoDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnCodigo As Global.System.Data.DataColumn

    Private columnBanco As Global.System.Data.DataColumn

    Private columnCuenta As Global.System.Data.DataColumn

    Private columnMoneda As Global.System.Data.DataColumn

    Private columnSaldo As Global.System.Data.DataColumn

    Private columnTipoCuenta As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "SaldoBanco"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property BancoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnBanco
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CuentaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCuenta
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property MonedaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnMoneda
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property SaldoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnSaldo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property TipoCuentaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnTipoCuenta
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As SaldoBancoRow
        Get
            Return CType(Me.Rows(index), SaldoBancoRow)
        End Get
    End Property

    Public Event SaldoBancoRowChanging As SaldoBancoRowChangeEventHandler

    Public Event SaldoBancoRowChanged As SaldoBancoRowChangeEventHandler

    Public Event SaldoBancoRowDeleting As SaldoBancoRowChangeEventHandler

    Public Event SaldoBancoRowDeleted As SaldoBancoRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddSaldoBancoRow(ByVal row As SaldoBancoRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddSaldoBancoRow(ByVal Codigo As String, ByVal Banco As String, ByVal Cuenta As String, ByVal Moneda As String, ByVal Saldo As Decimal, ByVal TipoCuenta As String) As SaldoBancoRow
        Dim rowSaldoBancoRow As SaldoBancoRow = CType(Me.NewRow, SaldoBancoRow)
        Dim columnValuesArray() As Object = New Object() {Codigo, Banco, Cuenta, Moneda, Saldo, TipoCuenta}
        rowSaldoBancoRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowSaldoBancoRow)
        Return rowSaldoBancoRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As SaldoBancoDataTable = CType(MyBase.Clone, SaldoBancoDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New SaldoBancoDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnCodigo = MyBase.Columns("Codigo")
        Me.columnBanco = MyBase.Columns("Banco")
        Me.columnCuenta = MyBase.Columns("Cuenta")
        Me.columnMoneda = MyBase.Columns("Moneda")
        Me.columnSaldo = MyBase.Columns("Saldo")
        Me.columnTipoCuenta = MyBase.Columns("TipoCuenta")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigo)
        Me.columnBanco = New Global.System.Data.DataColumn("Banco", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnBanco)
        Me.columnCuenta = New Global.System.Data.DataColumn("Cuenta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCuenta)
        Me.columnMoneda = New Global.System.Data.DataColumn("Moneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnMoneda)
        Me.columnSaldo = New Global.System.Data.DataColumn("Saldo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnSaldo)
        Me.columnTipoCuenta = New Global.System.Data.DataColumn("TipoCuenta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnTipoCuenta)
        Me.columnCodigo.Caption = "Column1"
        Me.columnBanco.Caption = "Column1"
        Me.columnCuenta.Caption = "Column1"
        Me.columnMoneda.Caption = "Column1"
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewSaldoBancoRow() As SaldoBancoRow
        Return CType(Me.NewRow, SaldoBancoRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New SaldoBancoRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(SaldoBancoRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.SaldoBancoRowChangedEvent) Is Nothing) Then
            RaiseEvent SaldoBancoRowChanged(Me, New SaldoBancoRowChangeEvent(CType(e.Row, SaldoBancoRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.SaldoBancoRowChangingEvent) Is Nothing) Then
            RaiseEvent SaldoBancoRowChanging(Me, New SaldoBancoRowChangeEvent(CType(e.Row, SaldoBancoRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.SaldoBancoRowDeletedEvent) Is Nothing) Then
            RaiseEvent SaldoBancoRowDeleted(Me, New SaldoBancoRowChangeEvent(CType(e.Row, SaldoBancoRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.SaldoBancoRowDeletingEvent) Is Nothing) Then
            RaiseEvent SaldoBancoRowDeleting(Me, New SaldoBancoRowChangeEvent(CType(e.Row, SaldoBancoRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemoveSaldoBancoRow(ByVal row As SaldoBancoRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "SaldoBancoDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class FlujoCajaDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnCodigo As Global.System.Data.DataColumn

    Private columnNombre As Global.System.Data.DataColumn

    Private columnIngresoSles As Global.System.Data.DataColumn

    Private columnEgresosSoles As Global.System.Data.DataColumn

    Private columnIngresoDolares As Global.System.Data.DataColumn

    Private columnEgresosDolares As Global.System.Data.DataColumn

    Private columnCantidad As Global.System.Data.DataColumn

    Private columnUnidad As Global.System.Data.DataColumn

    Private columnNumero As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "FlujoCaja"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombre
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property IngresoSlesColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnIngresoSles
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property EgresosSolesColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnEgresosSoles
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property IngresoDolaresColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnIngresoDolares
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property EgresosDolaresColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnEgresosDolares
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCantidad
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnUnidad
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NumeroColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNumero
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As FlujoCajaRow
        Get
            Return CType(Me.Rows(index), FlujoCajaRow)
        End Get
    End Property

    Public Event FlujoCajaRowChanging As FlujoCajaRowChangeEventHandler

    Public Event FlujoCajaRowChanged As FlujoCajaRowChangeEventHandler

    Public Event FlujoCajaRowDeleting As FlujoCajaRowChangeEventHandler

    Public Event FlujoCajaRowDeleted As FlujoCajaRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddFlujoCajaRow(ByVal row As FlujoCajaRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddFlujoCajaRow(ByVal Codigo As String, ByVal Nombre As String, ByVal IngresoSles As Decimal, ByVal EgresosSoles As Decimal, ByVal IngresoDolares As Decimal, ByVal EgresosDolares As Decimal, ByVal Cantidad As Decimal, ByVal Unidad As String, ByVal Numero As Decimal) As FlujoCajaRow
        Dim rowFlujoCajaRow As FlujoCajaRow = CType(Me.NewRow, FlujoCajaRow)
        Dim columnValuesArray() As Object = New Object() {Codigo, Nombre, IngresoSles, EgresosSoles, IngresoDolares, EgresosDolares, Cantidad, Unidad, Numero}
        rowFlujoCajaRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowFlujoCajaRow)
        Return rowFlujoCajaRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As FlujoCajaDataTable = CType(MyBase.Clone, FlujoCajaDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New FlujoCajaDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnCodigo = MyBase.Columns("Codigo")
        Me.columnNombre = MyBase.Columns("Nombre")
        Me.columnIngresoSles = MyBase.Columns("IngresoSles")
        Me.columnEgresosSoles = MyBase.Columns("EgresosSoles")
        Me.columnIngresoDolares = MyBase.Columns("IngresoDolares")
        Me.columnEgresosDolares = MyBase.Columns("EgresosDolares")
        Me.columnCantidad = MyBase.Columns("Cantidad")
        Me.columnUnidad = MyBase.Columns("Unidad")
        Me.columnNumero = MyBase.Columns("Numero")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigo)
        Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombre)
        Me.columnIngresoSles = New Global.System.Data.DataColumn("IngresoSles", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnIngresoSles)
        Me.columnEgresosSoles = New Global.System.Data.DataColumn("EgresosSoles", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnEgresosSoles)
        Me.columnIngresoDolares = New Global.System.Data.DataColumn("IngresoDolares", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnIngresoDolares)
        Me.columnEgresosDolares = New Global.System.Data.DataColumn("EgresosDolares", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnEgresosDolares)
        Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCantidad)
        Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnUnidad)
        Me.columnNumero = New Global.System.Data.DataColumn("Numero", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNumero)
        Me.columnCodigo.Caption = "Column1"
        Me.columnNombre.Caption = "Column1"
        Me.columnIngresoSles.Caption = "Column1"
        Me.columnEgresosSoles.Caption = "Column1"
        Me.columnIngresoDolares.Caption = "Column1"
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewFlujoCajaRow() As FlujoCajaRow
        Return CType(Me.NewRow, FlujoCajaRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New FlujoCajaRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(FlujoCajaRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.FlujoCajaRowChangedEvent) Is Nothing) Then
            RaiseEvent FlujoCajaRowChanged(Me, New FlujoCajaRowChangeEvent(CType(e.Row, FlujoCajaRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.FlujoCajaRowChangingEvent) Is Nothing) Then
            RaiseEvent FlujoCajaRowChanging(Me, New FlujoCajaRowChangeEvent(CType(e.Row, FlujoCajaRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.FlujoCajaRowDeletedEvent) Is Nothing) Then
            RaiseEvent FlujoCajaRowDeleted(Me, New FlujoCajaRowChangeEvent(CType(e.Row, FlujoCajaRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.FlujoCajaRowDeletingEvent) Is Nothing) Then
            RaiseEvent FlujoCajaRowDeleting(Me, New FlujoCajaRowChangeEvent(CType(e.Row, FlujoCajaRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemoveFlujoCajaRow(ByVal row As FlujoCajaRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "FlujoCajaDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class GastoDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnCodigo1 As Global.System.Data.DataColumn

    Private columnNombre1 As Global.System.Data.DataColumn

    Private columnCodigo2 As Global.System.Data.DataColumn

    Private columnNombre2 As Global.System.Data.DataColumn

    Private columnCargo As Global.System.Data.DataColumn

    Private columnAbono As Global.System.Data.DataColumn

    Private columnSaldo As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "Gasto"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Codigo1Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigo1
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Nombre1Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombre1
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Codigo2Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigo2
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Nombre2Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombre2
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CargoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCargo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property AbonoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnAbono
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property SaldoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnSaldo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As GastoRow
        Get
            Return CType(Me.Rows(index), GastoRow)
        End Get
    End Property

    Public Event GastoRowChanging As GastoRowChangeEventHandler

    Public Event GastoRowChanged As GastoRowChangeEventHandler

    Public Event GastoRowDeleting As GastoRowChangeEventHandler

    Public Event GastoRowDeleted As GastoRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddGastoRow(ByVal row As GastoRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddGastoRow(ByVal Codigo1 As String, ByVal Nombre1 As String, ByVal Codigo2 As String, ByVal Nombre2 As String, ByVal Cargo As Decimal, ByVal Abono As Decimal, ByVal Saldo As Decimal) As GastoRow
        Dim rowGastoRow As GastoRow = CType(Me.NewRow, GastoRow)
        Dim columnValuesArray() As Object = New Object() {Codigo1, Nombre1, Codigo2, Nombre2, Cargo, Abono, Saldo}
        rowGastoRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowGastoRow)
        Return rowGastoRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As GastoDataTable = CType(MyBase.Clone, GastoDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New GastoDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnCodigo1 = MyBase.Columns("Codigo1")
        Me.columnNombre1 = MyBase.Columns("Nombre1")
        Me.columnCodigo2 = MyBase.Columns("Codigo2")
        Me.columnNombre2 = MyBase.Columns("Nombre2")
        Me.columnCargo = MyBase.Columns("Cargo")
        Me.columnAbono = MyBase.Columns("Abono")
        Me.columnSaldo = MyBase.Columns("Saldo")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnCodigo1 = New Global.System.Data.DataColumn("Codigo1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigo1)
        Me.columnNombre1 = New Global.System.Data.DataColumn("Nombre1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombre1)
        Me.columnCodigo2 = New Global.System.Data.DataColumn("Codigo2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigo2)
        Me.columnNombre2 = New Global.System.Data.DataColumn("Nombre2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombre2)
        Me.columnCargo = New Global.System.Data.DataColumn("Cargo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCargo)
        Me.columnAbono = New Global.System.Data.DataColumn("Abono", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnAbono)
        Me.columnSaldo = New Global.System.Data.DataColumn("Saldo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnSaldo)
        Me.columnCodigo1.Caption = "Column1"
        Me.columnNombre1.Caption = "Column1"
        Me.columnCodigo2.Caption = "Column1"
        Me.columnNombre2.Caption = "Column1"
        Me.columnCargo.Caption = "Column1"
        Me.columnAbono.Caption = "Column1"
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewGastoRow() As GastoRow
        Return CType(Me.NewRow, GastoRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New GastoRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(GastoRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.GastoRowChangedEvent) Is Nothing) Then
            RaiseEvent GastoRowChanged(Me, New GastoRowChangeEvent(CType(e.Row, GastoRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.GastoRowChangingEvent) Is Nothing) Then
            RaiseEvent GastoRowChanging(Me, New GastoRowChangeEvent(CType(e.Row, GastoRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.GastoRowDeletedEvent) Is Nothing) Then
            RaiseEvent GastoRowDeleted(Me, New GastoRowChangeEvent(CType(e.Row, GastoRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.GastoRowDeletingEvent) Is Nothing) Then
            RaiseEvent GastoRowDeleting(Me, New GastoRowChangeEvent(CType(e.Row, GastoRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemoveGastoRow(ByVal row As GastoRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "GastoDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class DiferenciaCambioDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnCodigoAuxiliar As Global.System.Data.DataColumn

    Private columnNombreAuxiliar As Global.System.Data.DataColumn

    Private columnNumeroDocumento As Global.System.Data.DataColumn

    Private columnFechaDocumento As Global.System.Data.DataColumn

    Private columnCodigoCuentaPcge As Global.System.Data.DataColumn

    Private columnMonedaDocumento As Global.System.Data.DataColumn

    Private columnImporteDocumento As Global.System.Data.DataColumn

    Private columnTipoCambioDocumento As Global.System.Data.DataColumn

    Private columnImporteSolDocumento As Global.System.Data.DataColumn

    Private columnTipoCambioActDocumento As Global.System.Data.DataColumn

    Private columnImporteSolActDocumento As Global.System.Data.DataColumn

    Private columnImporteDebe As Global.System.Data.DataColumn

    Private columnImporteHaber As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "DiferenciaCambio"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoAuxiliarColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoAuxiliar
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreAuxiliarColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombreAuxiliar
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NumeroDocumentoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNumeroDocumento
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property FechaDocumentoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnFechaDocumento
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoCuentaPcgeColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigoCuentaPcge
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property MonedaDocumentoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnMonedaDocumento
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ImporteDocumentoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnImporteDocumento
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property TipoCambioDocumentoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnTipoCambioDocumento
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ImporteSolDocumentoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnImporteSolDocumento
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property TipoCambioActDocumentoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnTipoCambioActDocumento
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ImporteSolActDocumentoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnImporteSolActDocumento
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ImporteDebeColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnImporteDebe
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ImporteHaberColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnImporteHaber
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As DiferenciaCambioRow
        Get
            Return CType(Me.Rows(index), DiferenciaCambioRow)
        End Get
    End Property

    Public Event DiferenciaCambioRowChanging As DiferenciaCambioRowChangeEventHandler

    Public Event DiferenciaCambioRowChanged As DiferenciaCambioRowChangeEventHandler

    Public Event DiferenciaCambioRowDeleting As DiferenciaCambioRowChangeEventHandler

    Public Event DiferenciaCambioRowDeleted As DiferenciaCambioRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddDiferenciaCambioRow(ByVal row As DiferenciaCambioRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddDiferenciaCambioRow(ByVal CodigoAuxiliar As String, ByVal NombreAuxiliar As String, ByVal NumeroDocumento As String, ByVal FechaDocumento As Date, ByVal CodigoCuentaPcge As String, ByVal MonedaDocumento As String, ByVal ImporteDocumento As Decimal, ByVal TipoCambioDocumento As Decimal, ByVal ImporteSolDocumento As Decimal, ByVal TipoCambioActDocumento As Decimal, ByVal ImporteSolActDocumento As Decimal, ByVal ImporteDebe As Decimal, ByVal ImporteHaber As Decimal) As DiferenciaCambioRow
        Dim rowDiferenciaCambioRow As DiferenciaCambioRow = CType(Me.NewRow, DiferenciaCambioRow)
        Dim columnValuesArray() As Object = New Object() {CodigoAuxiliar, NombreAuxiliar, NumeroDocumento, FechaDocumento, CodigoCuentaPcge, MonedaDocumento, ImporteDocumento, TipoCambioDocumento, ImporteSolDocumento, TipoCambioActDocumento, ImporteSolActDocumento, ImporteDebe, ImporteHaber}
        rowDiferenciaCambioRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowDiferenciaCambioRow)
        Return rowDiferenciaCambioRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As DiferenciaCambioDataTable = CType(MyBase.Clone, DiferenciaCambioDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New DiferenciaCambioDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnCodigoAuxiliar = MyBase.Columns("CodigoAuxiliar")
        Me.columnNombreAuxiliar = MyBase.Columns("NombreAuxiliar")
        Me.columnNumeroDocumento = MyBase.Columns("NumeroDocumento")
        Me.columnFechaDocumento = MyBase.Columns("FechaDocumento")
        Me.columnCodigoCuentaPcge = MyBase.Columns("CodigoCuentaPcge")
        Me.columnMonedaDocumento = MyBase.Columns("MonedaDocumento")
        Me.columnImporteDocumento = MyBase.Columns("ImporteDocumento")
        Me.columnTipoCambioDocumento = MyBase.Columns("TipoCambioDocumento")
        Me.columnImporteSolDocumento = MyBase.Columns("ImporteSolDocumento")
        Me.columnTipoCambioActDocumento = MyBase.Columns("TipoCambioActDocumento")
        Me.columnImporteSolActDocumento = MyBase.Columns("ImporteSolActDocumento")
        Me.columnImporteDebe = MyBase.Columns("ImporteDebe")
        Me.columnImporteHaber = MyBase.Columns("ImporteHaber")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnCodigoAuxiliar = New Global.System.Data.DataColumn("CodigoAuxiliar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoAuxiliar)
        Me.columnNombreAuxiliar = New Global.System.Data.DataColumn("NombreAuxiliar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombreAuxiliar)
        Me.columnNumeroDocumento = New Global.System.Data.DataColumn("NumeroDocumento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNumeroDocumento)
        Me.columnFechaDocumento = New Global.System.Data.DataColumn("FechaDocumento", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnFechaDocumento)
        Me.columnCodigoCuentaPcge = New Global.System.Data.DataColumn("CodigoCuentaPcge", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigoCuentaPcge)
        Me.columnMonedaDocumento = New Global.System.Data.DataColumn("MonedaDocumento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnMonedaDocumento)
        Me.columnImporteDocumento = New Global.System.Data.DataColumn("ImporteDocumento", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnImporteDocumento)
        Me.columnTipoCambioDocumento = New Global.System.Data.DataColumn("TipoCambioDocumento", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnTipoCambioDocumento)
        Me.columnImporteSolDocumento = New Global.System.Data.DataColumn("ImporteSolDocumento", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnImporteSolDocumento)
        Me.columnTipoCambioActDocumento = New Global.System.Data.DataColumn("TipoCambioActDocumento", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnTipoCambioActDocumento)
        Me.columnImporteSolActDocumento = New Global.System.Data.DataColumn("ImporteSolActDocumento", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnImporteSolActDocumento)
        Me.columnImporteDebe = New Global.System.Data.DataColumn("ImporteDebe", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnImporteDebe)
        Me.columnImporteHaber = New Global.System.Data.DataColumn("ImporteHaber", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnImporteHaber)
        Me.columnCodigoAuxiliar.Caption = "d"
        Me.columnNombreAuxiliar.Caption = "d"
        Me.columnNumeroDocumento.Caption = "d"
        Me.columnFechaDocumento.Caption = "d"
        Me.columnCodigoCuentaPcge.Caption = "d"
        Me.columnMonedaDocumento.Caption = "d"
        Me.columnImporteDocumento.Caption = "d"
        Me.columnTipoCambioDocumento.Caption = "d"
        Me.columnImporteSolDocumento.Caption = "d"
        Me.columnTipoCambioActDocumento.Caption = "d"
        Me.columnImporteSolActDocumento.Caption = "d"
        Me.columnImporteDebe.Caption = "d"
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewDiferenciaCambioRow() As DiferenciaCambioRow
        Return CType(Me.NewRow, DiferenciaCambioRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New DiferenciaCambioRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(DiferenciaCambioRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.DiferenciaCambioRowChangedEvent) Is Nothing) Then
            RaiseEvent DiferenciaCambioRowChanged(Me, New DiferenciaCambioRowChangeEvent(CType(e.Row, DiferenciaCambioRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.DiferenciaCambioRowChangingEvent) Is Nothing) Then
            RaiseEvent DiferenciaCambioRowChanging(Me, New DiferenciaCambioRowChangeEvent(CType(e.Row, DiferenciaCambioRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.DiferenciaCambioRowDeletedEvent) Is Nothing) Then
            RaiseEvent DiferenciaCambioRowDeleted(Me, New DiferenciaCambioRowChangeEvent(CType(e.Row, DiferenciaCambioRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.DiferenciaCambioRowDeletingEvent) Is Nothing) Then
            RaiseEvent DiferenciaCambioRowDeleting(Me, New DiferenciaCambioRowChangeEvent(CType(e.Row, DiferenciaCambioRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemoveDiferenciaCambioRow(ByVal row As DiferenciaCambioRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "DiferenciaCambioDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class GastoXMesDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnCodigo As Global.System.Data.DataColumn

    Private columnNombre As Global.System.Data.DataColumn

    Private columnEnero As Global.System.Data.DataColumn

    Private columnFebrero As Global.System.Data.DataColumn

    Private columnMarzo As Global.System.Data.DataColumn

    Private columnAbril As Global.System.Data.DataColumn

    Private columnMayo As Global.System.Data.DataColumn

    Private columnJunio As Global.System.Data.DataColumn

    Private columnJulio As Global.System.Data.DataColumn

    Private columnAgosto As Global.System.Data.DataColumn

    Private columnSetiembre As Global.System.Data.DataColumn

    Private columnOctubre As Global.System.Data.DataColumn

    Private columnNoviembre As Global.System.Data.DataColumn

    Private columnDiciembre As Global.System.Data.DataColumn

    Private columnTotal As Global.System.Data.DataColumn

    Private columnCodigo1 As Global.System.Data.DataColumn

    Private columnNombre1 As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "GastoXMes"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombre
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property EneroColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnEnero
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property FebreroColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnFebrero
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property MarzoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnMarzo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property AbrilColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnAbril
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property MayoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnMayo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property JunioColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnJunio
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property JulioColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnJulio
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property AgostoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnAgosto
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property SetiembreColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnSetiembre
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property OctubreColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnOctubre
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NoviembreColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNoviembre
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property DiciembreColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnDiciembre
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property TotalColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnTotal
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Codigo1Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigo1
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Nombre1Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombre1
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As GastoXMesRow
        Get
            Return CType(Me.Rows(index), GastoXMesRow)
        End Get
    End Property

    Public Event GastoXMesRowChanging As GastoXMesRowChangeEventHandler

    Public Event GastoXMesRowChanged As GastoXMesRowChangeEventHandler

    Public Event GastoXMesRowDeleting As GastoXMesRowChangeEventHandler

    Public Event GastoXMesRowDeleted As GastoXMesRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddGastoXMesRow(ByVal row As GastoXMesRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddGastoXMesRow(
                    ByVal Codigo As String,
                    ByVal Nombre As String,
                    ByVal Enero As Decimal,
                    ByVal Febrero As Decimal,
                    ByVal Marzo As Decimal,
                    ByVal Abril As Decimal,
                    ByVal Mayo As Decimal,
                    ByVal Junio As Decimal,
                    ByVal Julio As Decimal,
                    ByVal Agosto As Decimal,
                    ByVal Setiembre As Decimal,
                    ByVal Octubre As Decimal,
                    ByVal Noviembre As Decimal,
                    ByVal Diciembre As Decimal,
                    ByVal Total As Decimal,
                    ByVal Codigo1 As String,
                    ByVal Nombre1 As String) As GastoXMesRow
        Dim rowGastoXMesRow As GastoXMesRow = CType(Me.NewRow, GastoXMesRow)
        Dim columnValuesArray() As Object = New Object() {Codigo, Nombre, Enero, Febrero, Marzo, Abril, Mayo, Junio, Julio, Agosto, Setiembre, Octubre, Noviembre, Diciembre, Total, Codigo1, Nombre1}
        rowGastoXMesRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowGastoXMesRow)
        Return rowGastoXMesRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As GastoXMesDataTable = CType(MyBase.Clone, GastoXMesDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New GastoXMesDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnCodigo = MyBase.Columns("Codigo")
        Me.columnNombre = MyBase.Columns("Nombre")
        Me.columnEnero = MyBase.Columns("Enero")
        Me.columnFebrero = MyBase.Columns("Febrero")
        Me.columnMarzo = MyBase.Columns("Marzo")
        Me.columnAbril = MyBase.Columns("Abril")
        Me.columnMayo = MyBase.Columns("Mayo")
        Me.columnJunio = MyBase.Columns("Junio")
        Me.columnJulio = MyBase.Columns("Julio")
        Me.columnAgosto = MyBase.Columns("Agosto")
        Me.columnSetiembre = MyBase.Columns("Setiembre")
        Me.columnOctubre = MyBase.Columns("Octubre")
        Me.columnNoviembre = MyBase.Columns("Noviembre")
        Me.columnDiciembre = MyBase.Columns("Diciembre")
        Me.columnTotal = MyBase.Columns("Total")
        Me.columnCodigo1 = MyBase.Columns("Codigo1")
        Me.columnNombre1 = MyBase.Columns("Nombre1")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigo)
        Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombre)
        Me.columnEnero = New Global.System.Data.DataColumn("Enero", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnEnero)
        Me.columnFebrero = New Global.System.Data.DataColumn("Febrero", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnFebrero)
        Me.columnMarzo = New Global.System.Data.DataColumn("Marzo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnMarzo)
        Me.columnAbril = New Global.System.Data.DataColumn("Abril", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnAbril)
        Me.columnMayo = New Global.System.Data.DataColumn("Mayo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnMayo)
        Me.columnJunio = New Global.System.Data.DataColumn("Junio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnJunio)
        Me.columnJulio = New Global.System.Data.DataColumn("Julio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnJulio)
        Me.columnAgosto = New Global.System.Data.DataColumn("Agosto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnAgosto)
        Me.columnSetiembre = New Global.System.Data.DataColumn("Setiembre", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnSetiembre)
        Me.columnOctubre = New Global.System.Data.DataColumn("Octubre", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnOctubre)
        Me.columnNoviembre = New Global.System.Data.DataColumn("Noviembre", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNoviembre)
        Me.columnDiciembre = New Global.System.Data.DataColumn("Diciembre", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnDiciembre)
        Me.columnTotal = New Global.System.Data.DataColumn("Total", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnTotal)
        Me.columnCodigo1 = New Global.System.Data.DataColumn("Codigo1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigo1)
        Me.columnNombre1 = New Global.System.Data.DataColumn("Nombre1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombre1)
        Me.columnCodigo.Caption = "Column1"
        Me.columnNombre.Caption = "Column1"
        Me.columnEnero.Caption = "Column1"
        Me.columnFebrero.Caption = "Column1"
        Me.columnMarzo.Caption = "Column1"
        Me.columnAbril.Caption = "Column1"
        Me.columnMayo.Caption = "Column1"
        Me.columnJunio.Caption = "Column1"
        Me.columnJulio.Caption = "Column1"
        Me.columnAgosto.Caption = "Column1"
        Me.columnSetiembre.Caption = "Column1"
        Me.columnOctubre.Caption = "Column1"
        Me.columnNoviembre.Caption = "Column1"
        Me.columnDiciembre.Caption = "Column1"
        Me.columnCodigo1.Caption = "Column1"
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewGastoXMesRow() As GastoXMesRow
        Return CType(Me.NewRow, GastoXMesRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New GastoXMesRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(GastoXMesRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.GastoXMesRowChangedEvent) Is Nothing) Then
            RaiseEvent GastoXMesRowChanged(Me, New GastoXMesRowChangeEvent(CType(e.Row, GastoXMesRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.GastoXMesRowChangingEvent) Is Nothing) Then
            RaiseEvent GastoXMesRowChanging(Me, New GastoXMesRowChangeEvent(CType(e.Row, GastoXMesRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.GastoXMesRowDeletedEvent) Is Nothing) Then
            RaiseEvent GastoXMesRowDeleted(Me, New GastoXMesRowChangeEvent(CType(e.Row, GastoXMesRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.GastoXMesRowDeletingEvent) Is Nothing) Then
            RaiseEvent GastoXMesRowDeleting(Me, New GastoXMesRowChangeEvent(CType(e.Row, GastoXMesRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemoveGastoXMesRow(ByVal row As GastoXMesRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "GastoXMesDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class GananciaPerdidaTotalDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnCodigo As Global.System.Data.DataColumn

    Private columnNombre As Global.System.Data.DataColumn

    Private columnMontoMes As Global.System.Data.DataColumn

    Private columnMontoAcumulado As Global.System.Data.DataColumn

    Private columnCodigo1 As Global.System.Data.DataColumn

    Private columnNombre1 As Global.System.Data.DataColumn

    Private columnMontoMes1 As Global.System.Data.DataColumn

    Private columnMontoAcumulado1 As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "GananciaPerdidaTotal"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CodigoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombre
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property MontoMesColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnMontoMes
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property MontoAcumuladoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnMontoAcumulado
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Codigo1Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnCodigo1
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property Nombre1Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnNombre1
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property MontoMes1Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnMontoMes1
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property MontoAcumulado1Column() As Global.System.Data.DataColumn
        Get
            Return Me.columnMontoAcumulado1
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As GananciaPerdidaTotalRow
        Get
            Return CType(Me.Rows(index), GananciaPerdidaTotalRow)
        End Get
    End Property

    Public Event GananciaPerdidaTotalRowChanging As GananciaPerdidaTotalRowChangeEventHandler

    Public Event GananciaPerdidaTotalRowChanged As GananciaPerdidaTotalRowChangeEventHandler

    Public Event GananciaPerdidaTotalRowDeleting As GananciaPerdidaTotalRowChangeEventHandler

    Public Event GananciaPerdidaTotalRowDeleted As GananciaPerdidaTotalRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddGananciaPerdidaTotalRow(ByVal row As GananciaPerdidaTotalRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddGananciaPerdidaTotalRow(ByVal Codigo As String, ByVal Nombre As String, ByVal MontoMes As String, ByVal MontoAcumulado As String, ByVal Codigo1 As String, ByVal Nombre1 As String, ByVal MontoMes1 As String, ByVal MontoAcumulado1 As String) As GananciaPerdidaTotalRow
        Dim rowGananciaPerdidaTotalRow As GananciaPerdidaTotalRow = CType(Me.NewRow, GananciaPerdidaTotalRow)
        Dim columnValuesArray() As Object = New Object() {Codigo, Nombre, MontoMes, MontoAcumulado, Codigo1, Nombre1, MontoMes1, MontoAcumulado1}
        rowGananciaPerdidaTotalRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowGananciaPerdidaTotalRow)
        Return rowGananciaPerdidaTotalRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As GananciaPerdidaTotalDataTable = CType(MyBase.Clone, GananciaPerdidaTotalDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New GananciaPerdidaTotalDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnCodigo = MyBase.Columns("Codigo")
        Me.columnNombre = MyBase.Columns("Nombre")
        Me.columnMontoMes = MyBase.Columns("MontoMes")
        Me.columnMontoAcumulado = MyBase.Columns("MontoAcumulado")
        Me.columnCodigo1 = MyBase.Columns("Codigo1")
        Me.columnNombre1 = MyBase.Columns("Nombre1")
        Me.columnMontoMes1 = MyBase.Columns("MontoMes1")
        Me.columnMontoAcumulado1 = MyBase.Columns("MontoAcumulado1")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnCodigo = New Global.System.Data.DataColumn("Codigo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigo)
        Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombre)
        Me.columnMontoMes = New Global.System.Data.DataColumn("MontoMes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnMontoMes)
        Me.columnMontoAcumulado = New Global.System.Data.DataColumn("MontoAcumulado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnMontoAcumulado)
        Me.columnCodigo1 = New Global.System.Data.DataColumn("Codigo1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCodigo1)
        Me.columnNombre1 = New Global.System.Data.DataColumn("Nombre1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNombre1)
        Me.columnMontoMes1 = New Global.System.Data.DataColumn("MontoMes1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnMontoMes1)
        Me.columnMontoAcumulado1 = New Global.System.Data.DataColumn("MontoAcumulado1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnMontoAcumulado1)
        Me.columnCodigo1.Caption = "Codigo"
        Me.columnNombre1.Caption = "Nombre"
        Me.columnMontoMes1.Caption = "MontoMes"
        Me.columnMontoAcumulado1.Caption = "MontoAcumulado"
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewGananciaPerdidaTotalRow() As GananciaPerdidaTotalRow
        Return CType(Me.NewRow, GananciaPerdidaTotalRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New GananciaPerdidaTotalRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(GananciaPerdidaTotalRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.GananciaPerdidaTotalRowChangedEvent) Is Nothing) Then
            RaiseEvent GananciaPerdidaTotalRowChanged(Me, New GananciaPerdidaTotalRowChangeEvent(CType(e.Row, GananciaPerdidaTotalRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.GananciaPerdidaTotalRowChangingEvent) Is Nothing) Then
            RaiseEvent GananciaPerdidaTotalRowChanging(Me, New GananciaPerdidaTotalRowChangeEvent(CType(e.Row, GananciaPerdidaTotalRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.GananciaPerdidaTotalRowDeletedEvent) Is Nothing) Then
            RaiseEvent GananciaPerdidaTotalRowDeleted(Me, New GananciaPerdidaTotalRowChangeEvent(CType(e.Row, GananciaPerdidaTotalRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.GananciaPerdidaTotalRowDeletingEvent) Is Nothing) Then
            RaiseEvent GananciaPerdidaTotalRowDeleting(Me, New GananciaPerdidaTotalRowChangeEvent(CType(e.Row, GananciaPerdidaTotalRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemoveGananciaPerdidaTotalRow(ByVal row As GananciaPerdidaTotalRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "GananciaPerdidaTotalDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents the strongly named DataTable class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),
     Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
Partial Public Class DaoResumenDetalleDataTable
    Inherits Global.System.Data.DataTable
    Implements Global.System.Collections.IEnumerable

    Private columnRuc As Global.System.Data.DataColumn

    Private columnDescripcionAuxiliar As Global.System.Data.DataColumn

    Private columnImporteDolares As Global.System.Data.DataColumn

    Private columnValorVenta As Global.System.Data.DataColumn

    Private columnValorIgv As Global.System.Data.DataColumn

    Private columnValorExonerado As Global.System.Data.DataColumn

    Private columnPrecioVenta As Global.System.Data.DataColumn

    Private columnOrigen As Global.System.Data.DataColumn

    Private columnFile As Global.System.Data.DataColumn

    Private columnNumeroVoucher As Global.System.Data.DataColumn

    Private columnFechaVoucher As Global.System.Data.DataColumn

    Private columnTipoDocumento As Global.System.Data.DataColumn

    Private columnSerieDocumento As Global.System.Data.DataColumn

    Private columnNumeroDocuemnto As Global.System.Data.DataColumn

    Private columnFechaDocumento As Global.System.Data.DataColumn

    Private columnCorrelativo As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub New()
        MyBase.New
        Me.TableName = "DaoResumenDetalle"
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
        MyBase.New
        Me.TableName = table.TableName
        If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
            Me.CaseSensitive = table.CaseSensitive
        End If
        If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
            Me.Locale = table.Locale
        End If
        If (table.Namespace <> table.DataSet.Namespace) Then
            Me.Namespace = table.Namespace
        End If
        Me.Prefix = table.Prefix
        Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        Me.InitVars
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property RucColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnRuc
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property DescripcionAuxiliarColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnDescripcionAuxiliar
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ImporteDolaresColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnImporteDolares
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ValorVentaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnValorVenta
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ValorIgvColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnValorIgv
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property ValorExoneradoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnValorExonerado
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property PrecioVentaColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnPrecioVenta
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property OrigenColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnOrigen
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property FileColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnFile
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NumeroVoucherColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNumeroVoucher
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property FechaVoucherColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnFechaVoucher
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property TipoDocumentoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnTipoDocumento
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property SerieDocumentoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnSerieDocumento
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property NumeroDocuemntoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnNumeroDocuemnto
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property FechaDocumentoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnFechaDocumento
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public ReadOnly Property CorrelativoColumn() As Global.System.Data.DataColumn
        Get
            Return Me.columnCorrelativo
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property Count() As Integer
        Get
            Return Me.Rows.Count
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Default Public ReadOnly Property Item(ByVal index As Integer) As DaoResumenDetalleRow
        Get
            Return CType(Me.Rows(index), DaoResumenDetalleRow)
        End Get
    End Property

    Public Event DaoResumenDetalleRowChanging As DaoResumenDetalleRowChangeEventHandler

    Public Event DaoResumenDetalleRowChanged As DaoResumenDetalleRowChangeEventHandler

    Public Event DaoResumenDetalleRowDeleting As DaoResumenDetalleRowChangeEventHandler

    Public Event DaoResumenDetalleRowDeleted As DaoResumenDetalleRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Sub AddDaoResumenDetalleRow(ByVal row As DaoResumenDetalleRow)
        Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overloads Function AddDaoResumenDetalleRow(
                    ByVal Ruc As String,
                    ByVal DescripcionAuxiliar As String,
                    ByVal ImporteDolares As Decimal,
                    ByVal ValorVenta As Decimal,
                    ByVal ValorIgv As Decimal,
                    ByVal ValorExonerado As Decimal,
                    ByVal PrecioVenta As Decimal,
                    ByVal Origen As String,
                    ByVal File As String,
                    ByVal NumeroVoucher As String,
                    ByVal FechaVoucher As String,
                    ByVal TipoDocumento As String,
                    ByVal SerieDocumento As String,
                    ByVal NumeroDocuemnto As String,
                    ByVal FechaDocumento As String,
                    ByVal Correlativo As Integer) As DaoResumenDetalleRow
        Dim rowDaoResumenDetalleRow As DaoResumenDetalleRow = CType(Me.NewRow, DaoResumenDetalleRow)
        Dim columnValuesArray() As Object = New Object() {Ruc, DescripcionAuxiliar, ImporteDolares, ValorVenta, ValorIgv, ValorExonerado, PrecioVenta, Origen, File, NumeroVoucher, FechaVoucher, TipoDocumento, SerieDocumento, NumeroDocuemnto, FechaDocumento, Correlativo}
        rowDaoResumenDetalleRow.ItemArray = columnValuesArray
        Me.Rows.Add(rowDaoResumenDetalleRow)
        Return rowDaoResumenDetalleRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
        Return Me.Rows.GetEnumerator
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Overrides Function Clone() As Global.System.Data.DataTable
        Dim cln As DaoResumenDetalleDataTable = CType(MyBase.Clone, DaoResumenDetalleDataTable)
        cln.InitVars
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
        Return New DaoResumenDetalleDataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub InitVars()
        Me.columnRuc = MyBase.Columns("Ruc")
        Me.columnDescripcionAuxiliar = MyBase.Columns("DescripcionAuxiliar")
        Me.columnImporteDolares = MyBase.Columns("ImporteDolares")
        Me.columnValorVenta = MyBase.Columns("ValorVenta")
        Me.columnValorIgv = MyBase.Columns("ValorIgv")
        Me.columnValorExonerado = MyBase.Columns("ValorExonerado")
        Me.columnPrecioVenta = MyBase.Columns("PrecioVenta")
        Me.columnOrigen = MyBase.Columns("Origen")
        Me.columnFile = MyBase.Columns("File")
        Me.columnNumeroVoucher = MyBase.Columns("NumeroVoucher")
        Me.columnFechaVoucher = MyBase.Columns("FechaVoucher")
        Me.columnTipoDocumento = MyBase.Columns("TipoDocumento")
        Me.columnSerieDocumento = MyBase.Columns("SerieDocumento")
        Me.columnNumeroDocuemnto = MyBase.Columns("NumeroDocuemnto")
        Me.columnFechaDocumento = MyBase.Columns("FechaDocumento")
        Me.columnCorrelativo = MyBase.Columns("Correlativo")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Private Sub InitClass()
        Me.columnRuc = New Global.System.Data.DataColumn("Ruc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnRuc)
        Me.columnDescripcionAuxiliar = New Global.System.Data.DataColumn("DescripcionAuxiliar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnDescripcionAuxiliar)
        Me.columnImporteDolares = New Global.System.Data.DataColumn("ImporteDolares", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnImporteDolares)
        Me.columnValorVenta = New Global.System.Data.DataColumn("ValorVenta", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnValorVenta)
        Me.columnValorIgv = New Global.System.Data.DataColumn("ValorIgv", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnValorIgv)
        Me.columnValorExonerado = New Global.System.Data.DataColumn("ValorExonerado", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnValorExonerado)
        Me.columnPrecioVenta = New Global.System.Data.DataColumn("PrecioVenta", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnPrecioVenta)
        Me.columnOrigen = New Global.System.Data.DataColumn("Origen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnOrigen)
        Me.columnFile = New Global.System.Data.DataColumn("File", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnFile)
        Me.columnNumeroVoucher = New Global.System.Data.DataColumn("NumeroVoucher", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNumeroVoucher)
        Me.columnFechaVoucher = New Global.System.Data.DataColumn("FechaVoucher", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnFechaVoucher)
        Me.columnTipoDocumento = New Global.System.Data.DataColumn("TipoDocumento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnTipoDocumento)
        Me.columnSerieDocumento = New Global.System.Data.DataColumn("SerieDocumento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnSerieDocumento)
        Me.columnNumeroDocuemnto = New Global.System.Data.DataColumn("NumeroDocuemnto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnNumeroDocuemnto)
        Me.columnFechaDocumento = New Global.System.Data.DataColumn("FechaDocumento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnFechaDocumento)
        Me.columnCorrelativo = New Global.System.Data.DataColumn("Correlativo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
        MyBase.Columns.Add(Me.columnCorrelativo)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function NewDaoResumenDetalleRow() As DaoResumenDetalleRow
        Return CType(Me.NewRow, DaoResumenDetalleRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
        Return New DaoResumenDetalleRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Function GetRowType() As Global.System.Type
        Return GetType(DaoResumenDetalleRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanged(e)
        If (Not (Me.DaoResumenDetalleRowChangedEvent) Is Nothing) Then
            RaiseEvent DaoResumenDetalleRowChanged(Me, New DaoResumenDetalleRowChangeEvent(CType(e.Row, DaoResumenDetalleRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowChanging(e)
        If (Not (Me.DaoResumenDetalleRowChangingEvent) Is Nothing) Then
            RaiseEvent DaoResumenDetalleRowChanging(Me, New DaoResumenDetalleRowChangeEvent(CType(e.Row, DaoResumenDetalleRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleted(e)
        If (Not (Me.DaoResumenDetalleRowDeletedEvent) Is Nothing) Then
            RaiseEvent DaoResumenDetalleRowDeleted(Me, New DaoResumenDetalleRowChangeEvent(CType(e.Row, DaoResumenDetalleRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
        MyBase.OnRowDeleting(e)
        If (Not (Me.DaoResumenDetalleRowDeletingEvent) Is Nothing) Then
            RaiseEvent DaoResumenDetalleRowDeleting(Me, New DaoResumenDetalleRowChangeEvent(CType(e.Row, DaoResumenDetalleRow), e.Action))
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub RemoveDaoResumenDetalleRow(ByVal row As DaoResumenDetalleRow)
        Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim ds As DataSet1 = New DataSet1
        Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any1.Namespace = "http://www.w3.org/2001/XMLSchema"
        any1.MinOccurs = New Decimal(0)
        any1.MaxOccurs = Decimal.MaxValue
        any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any1)
        Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
        any2.MinOccurs = New Decimal(1)
        any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
        sequence.Items.Add(any2)
        Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute1.Name = "namespace"
        attribute1.FixedValue = ds.Namespace
        type.Attributes.Add(attribute1)
        Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
        attribute2.Name = "tableTypeName"
        attribute2.FixedValue = "DaoResumenDetalleDataTable"
        type.Attributes.Add(attribute2)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class FiltroTablaRow
    Inherits Global.System.Data.DataRow

    Private tableFiltroTabla As FiltroTablaDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tableFiltroTabla = CType(Me.Table, FiltroTablaDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property TipoTabla() As String
        Get
            Try
                Return CType(Me(Me.tableFiltroTabla.TipoTablaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoTabla' de la tabla 'FiltroTabla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableFiltroTabla.TipoTablaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoItemTabla() As String
        Get
            Try
                Return CType(Me(Me.tableFiltroTabla.CodigoItemTablaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoItemTabla' de la tabla 'FiltroTabla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableFiltroTabla.CodigoItemTablaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreItemTabla() As String
        Get
            Try
                Return CType(Me(Me.tableFiltroTabla.NombreItemTablaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreItemTabla' de la tabla 'FiltroTabla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableFiltroTabla.NombreItemTablaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property EstadoRegistro() As String
        Get
            Try
                Return CType(Me(Me.tableFiltroTabla.EstadoRegistroColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EstadoRegistro' de la tabla 'FiltroTabla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableFiltroTabla.EstadoRegistroColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property EliminadoRegistro() As String
        Get
            Try
                Return CType(Me(Me.tableFiltroTabla.EliminadoRegistroColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EliminadoRegistro' de la tabla 'FiltroTabla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableFiltroTabla.EliminadoRegistroColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoUsuarioAgrega() As String
        Get
            Try
                Return CType(Me(Me.tableFiltroTabla.CodigoUsuarioAgregaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoUsuarioAgrega' de la tabla 'FiltroTabla' es DBNull." &
                            "", e)
            End Try
        End Get
        Set
            Me(Me.tableFiltroTabla.CodigoUsuarioAgregaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoPersonalAgrega() As String
        Get
            Try
                Return CType(Me(Me.tableFiltroTabla.CodigoPersonalAgregaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoPersonalAgrega' de la tabla 'FiltroTabla' es DBNull" &
                            ".", e)
            End Try
        End Get
        Set
            Me(Me.tableFiltroTabla.CodigoPersonalAgregaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreUsuarioAgrega() As String
        Get
            Try
                Return CType(Me(Me.tableFiltroTabla.NombreUsuarioAgregaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreUsuarioAgrega' de la tabla 'FiltroTabla' es DBNull." &
                            "", e)
            End Try
        End Get
        Set
            Me(Me.tableFiltroTabla.NombreUsuarioAgregaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property FechaAgrega() As String
        Get
            Try
                Return CType(Me(Me.tableFiltroTabla.FechaAgregaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaAgrega' de la tabla 'FiltroTabla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableFiltroTabla.FechaAgregaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoUsuarioModifica() As String
        Get
            Try
                Return CType(Me(Me.tableFiltroTabla.CodigoUsuarioModificaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoUsuarioModifica' de la tabla 'FiltroTabla' es DBNul" &
                            "l.", e)
            End Try
        End Get
        Set
            Me(Me.tableFiltroTabla.CodigoUsuarioModificaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoPersonalModifica() As String
        Get
            Try
                Return CType(Me(Me.tableFiltroTabla.CodigoPersonalModificaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoPersonalModifica' de la tabla 'FiltroTabla' es DBNu" &
                            "ll.", e)
            End Try
        End Get
        Set
            Me(Me.tableFiltroTabla.CodigoPersonalModificaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreUsuarioModifica() As String
        Get
            Try
                Return CType(Me(Me.tableFiltroTabla.NombreUsuarioModificaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreUsuarioModifica' de la tabla 'FiltroTabla' es DBNul" &
                            "l.", e)
            End Try
        End Get
        Set
            Me(Me.tableFiltroTabla.NombreUsuarioModificaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property FechaModifica() As String
        Get
            Try
                Return CType(Me(Me.tableFiltroTabla.FechaModificaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaModifica' de la tabla 'FiltroTabla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableFiltroTabla.FechaModificaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsTipoTablaNull() As Boolean
        Return Me.IsNull(Me.tableFiltroTabla.TipoTablaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetTipoTablaNull()
        Me(Me.tableFiltroTabla.TipoTablaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoItemTablaNull() As Boolean
        Return Me.IsNull(Me.tableFiltroTabla.CodigoItemTablaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoItemTablaNull()
        Me(Me.tableFiltroTabla.CodigoItemTablaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreItemTablaNull() As Boolean
        Return Me.IsNull(Me.tableFiltroTabla.NombreItemTablaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreItemTablaNull()
        Me(Me.tableFiltroTabla.NombreItemTablaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsEstadoRegistroNull() As Boolean
        Return Me.IsNull(Me.tableFiltroTabla.EstadoRegistroColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetEstadoRegistroNull()
        Me(Me.tableFiltroTabla.EstadoRegistroColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsEliminadoRegistroNull() As Boolean
        Return Me.IsNull(Me.tableFiltroTabla.EliminadoRegistroColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetEliminadoRegistroNull()
        Me(Me.tableFiltroTabla.EliminadoRegistroColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoUsuarioAgregaNull() As Boolean
        Return Me.IsNull(Me.tableFiltroTabla.CodigoUsuarioAgregaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoUsuarioAgregaNull()
        Me(Me.tableFiltroTabla.CodigoUsuarioAgregaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoPersonalAgregaNull() As Boolean
        Return Me.IsNull(Me.tableFiltroTabla.CodigoPersonalAgregaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoPersonalAgregaNull()
        Me(Me.tableFiltroTabla.CodigoPersonalAgregaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreUsuarioAgregaNull() As Boolean
        Return Me.IsNull(Me.tableFiltroTabla.NombreUsuarioAgregaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreUsuarioAgregaNull()
        Me(Me.tableFiltroTabla.NombreUsuarioAgregaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsFechaAgregaNull() As Boolean
        Return Me.IsNull(Me.tableFiltroTabla.FechaAgregaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetFechaAgregaNull()
        Me(Me.tableFiltroTabla.FechaAgregaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoUsuarioModificaNull() As Boolean
        Return Me.IsNull(Me.tableFiltroTabla.CodigoUsuarioModificaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoUsuarioModificaNull()
        Me(Me.tableFiltroTabla.CodigoUsuarioModificaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoPersonalModificaNull() As Boolean
        Return Me.IsNull(Me.tableFiltroTabla.CodigoPersonalModificaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoPersonalModificaNull()
        Me(Me.tableFiltroTabla.CodigoPersonalModificaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreUsuarioModificaNull() As Boolean
        Return Me.IsNull(Me.tableFiltroTabla.NombreUsuarioModificaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreUsuarioModificaNull()
        Me(Me.tableFiltroTabla.NombreUsuarioModificaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsFechaModificaNull() As Boolean
        Return Me.IsNull(Me.tableFiltroTabla.FechaModificaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetFechaModificaNull()
        Me(Me.tableFiltroTabla.FechaModificaColumn) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class UsuarioRow
    Inherits Global.System.Data.DataRow

    Private tableUsuario As UsuarioDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tableUsuario = CType(Me.Table, UsuarioDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoUsuario() As String
        Get
            Try
                Return CType(Me(Me.tableUsuario.CodigoUsuarioColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoUsuario' de la tabla 'Usuario' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableUsuario.CodigoUsuarioColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoPersonalUsuario() As String
        Get
            Try
                Return CType(Me(Me.tableUsuario.CodigoPersonalUsuarioColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoPersonalUsuario' de la tabla 'Usuario' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableUsuario.CodigoPersonalUsuarioColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombrePersonalUsuario() As String
        Get
            Try
                Return CType(Me(Me.tableUsuario.NombrePersonalUsuarioColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombrePersonalUsuario' de la tabla 'Usuario' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableUsuario.NombrePersonalUsuarioColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ClaveUsuario() As String
        Get
            Try
                Return CType(Me(Me.tableUsuario.ClaveUsuarioColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ClaveUsuario' de la tabla 'Usuario' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableUsuario.ClaveUsuarioColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoPregunta() As String
        Get
            Try
                Return CType(Me(Me.tableUsuario.CodigoPreguntaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoPregunta' de la tabla 'Usuario' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableUsuario.CodigoPreguntaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombrePregunta() As String
        Get
            Try
                Return CType(Me(Me.tableUsuario.NombrePreguntaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombrePregunta' de la tabla 'Usuario' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableUsuario.NombrePreguntaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property RespuestaUsuario() As String
        Get
            Try
                Return CType(Me(Me.tableUsuario.RespuestaUsuarioColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RespuestaUsuario' de la tabla 'Usuario' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableUsuario.RespuestaUsuarioColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoGrupo() As String
        Get
            Try
                Return CType(Me(Me.tableUsuario.CodigoGrupoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoGrupo' de la tabla 'Usuario' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableUsuario.CodigoGrupoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreGrupo() As String
        Get
            Try
                Return CType(Me(Me.tableUsuario.NombreGrupoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreGrupo' de la tabla 'Usuario' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableUsuario.NombreGrupoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property EstadoRegistro() As String
        Get
            Try
                Return CType(Me(Me.tableUsuario.EstadoRegistroColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EstadoRegistro' de la tabla 'Usuario' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableUsuario.EstadoRegistroColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property EliminadoRegistro() As String
        Get
            Try
                Return CType(Me(Me.tableUsuario.EliminadoRegistroColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EliminadoRegistro' de la tabla 'Usuario' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableUsuario.EliminadoRegistroColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoUsuarioAgrega() As String
        Get
            Try
                Return CType(Me(Me.tableUsuario.CodigoUsuarioAgregaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoUsuarioAgrega' de la tabla 'Usuario' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableUsuario.CodigoUsuarioAgregaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoPersonalAgrega() As String
        Get
            Try
                Return CType(Me(Me.tableUsuario.CodigoPersonalAgregaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoPersonalAgrega' de la tabla 'Usuario' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableUsuario.CodigoPersonalAgregaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreUsuarioAgrega() As String
        Get
            Try
                Return CType(Me(Me.tableUsuario.NombreUsuarioAgregaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreUsuarioAgrega' de la tabla 'Usuario' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableUsuario.NombreUsuarioAgregaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property FechaAgrega() As String
        Get
            Try
                Return CType(Me(Me.tableUsuario.FechaAgregaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaAgrega' de la tabla 'Usuario' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableUsuario.FechaAgregaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoUsuarioModifica() As String
        Get
            Try
                Return CType(Me(Me.tableUsuario.CodigoUsuarioModificaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoUsuarioModifica' de la tabla 'Usuario' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableUsuario.CodigoUsuarioModificaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoPersonalModifica() As String
        Get
            Try
                Return CType(Me(Me.tableUsuario.CodigoPersonalModificaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoPersonalModifica' de la tabla 'Usuario' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableUsuario.CodigoPersonalModificaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreUsuarioModifica() As String
        Get
            Try
                Return CType(Me(Me.tableUsuario.NombreUsuarioModificaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreUsuarioModifica' de la tabla 'Usuario' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableUsuario.NombreUsuarioModificaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property FechaModifica() As String
        Get
            Try
                Return CType(Me(Me.tableUsuario.FechaModificaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaModifica' de la tabla 'Usuario' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableUsuario.FechaModificaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoUsuarioNull() As Boolean
        Return Me.IsNull(Me.tableUsuario.CodigoUsuarioColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoUsuarioNull()
        Me(Me.tableUsuario.CodigoUsuarioColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoPersonalUsuarioNull() As Boolean
        Return Me.IsNull(Me.tableUsuario.CodigoPersonalUsuarioColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoPersonalUsuarioNull()
        Me(Me.tableUsuario.CodigoPersonalUsuarioColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombrePersonalUsuarioNull() As Boolean
        Return Me.IsNull(Me.tableUsuario.NombrePersonalUsuarioColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombrePersonalUsuarioNull()
        Me(Me.tableUsuario.NombrePersonalUsuarioColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsClaveUsuarioNull() As Boolean
        Return Me.IsNull(Me.tableUsuario.ClaveUsuarioColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetClaveUsuarioNull()
        Me(Me.tableUsuario.ClaveUsuarioColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoPreguntaNull() As Boolean
        Return Me.IsNull(Me.tableUsuario.CodigoPreguntaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoPreguntaNull()
        Me(Me.tableUsuario.CodigoPreguntaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombrePreguntaNull() As Boolean
        Return Me.IsNull(Me.tableUsuario.NombrePreguntaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombrePreguntaNull()
        Me(Me.tableUsuario.NombrePreguntaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsRespuestaUsuarioNull() As Boolean
        Return Me.IsNull(Me.tableUsuario.RespuestaUsuarioColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetRespuestaUsuarioNull()
        Me(Me.tableUsuario.RespuestaUsuarioColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoGrupoNull() As Boolean
        Return Me.IsNull(Me.tableUsuario.CodigoGrupoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoGrupoNull()
        Me(Me.tableUsuario.CodigoGrupoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreGrupoNull() As Boolean
        Return Me.IsNull(Me.tableUsuario.NombreGrupoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreGrupoNull()
        Me(Me.tableUsuario.NombreGrupoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsEstadoRegistroNull() As Boolean
        Return Me.IsNull(Me.tableUsuario.EstadoRegistroColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetEstadoRegistroNull()
        Me(Me.tableUsuario.EstadoRegistroColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsEliminadoRegistroNull() As Boolean
        Return Me.IsNull(Me.tableUsuario.EliminadoRegistroColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetEliminadoRegistroNull()
        Me(Me.tableUsuario.EliminadoRegistroColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoUsuarioAgregaNull() As Boolean
        Return Me.IsNull(Me.tableUsuario.CodigoUsuarioAgregaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoUsuarioAgregaNull()
        Me(Me.tableUsuario.CodigoUsuarioAgregaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoPersonalAgregaNull() As Boolean
        Return Me.IsNull(Me.tableUsuario.CodigoPersonalAgregaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoPersonalAgregaNull()
        Me(Me.tableUsuario.CodigoPersonalAgregaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreUsuarioAgregaNull() As Boolean
        Return Me.IsNull(Me.tableUsuario.NombreUsuarioAgregaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreUsuarioAgregaNull()
        Me(Me.tableUsuario.NombreUsuarioAgregaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsFechaAgregaNull() As Boolean
        Return Me.IsNull(Me.tableUsuario.FechaAgregaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetFechaAgregaNull()
        Me(Me.tableUsuario.FechaAgregaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoUsuarioModificaNull() As Boolean
        Return Me.IsNull(Me.tableUsuario.CodigoUsuarioModificaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoUsuarioModificaNull()
        Me(Me.tableUsuario.CodigoUsuarioModificaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoPersonalModificaNull() As Boolean
        Return Me.IsNull(Me.tableUsuario.CodigoPersonalModificaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoPersonalModificaNull()
        Me(Me.tableUsuario.CodigoPersonalModificaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreUsuarioModificaNull() As Boolean
        Return Me.IsNull(Me.tableUsuario.NombreUsuarioModificaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreUsuarioModificaNull()
        Me(Me.tableUsuario.NombreUsuarioModificaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsFechaModificaNull() As Boolean
        Return Me.IsNull(Me.tableUsuario.FechaModificaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetFechaModificaNull()
        Me(Me.tableUsuario.FechaModificaColumn) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class AuxiliarRow
    Inherits Global.System.Data.DataRow

    Private tableAuxiliar As AuxiliarDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tableAuxiliar = CType(Me.Table, AuxiliarDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoAuxiliar() As String
        Get
            Try
                Return CType(Me(Me.tableAuxiliar.CodigoAuxiliarColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoAuxiliar' de la tabla 'Auxiliar' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableAuxiliar.CodigoAuxiliarColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property DescripcionAuxiliar() As String
        Get
            Try
                Return CType(Me(Me.tableAuxiliar.DescripcionAuxiliarColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DescripcionAuxiliar' de la tabla 'Auxiliar' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableAuxiliar.DescripcionAuxiliarColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property DireccionAuxiliar() As String
        Get
            Try
                Return CType(Me(Me.tableAuxiliar.DireccionAuxiliarColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DireccionAuxiliar' de la tabla 'Auxiliar' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableAuxiliar.DireccionAuxiliarColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoDistrito() As String
        Get
            Try
                Return CType(Me(Me.tableAuxiliar.CodigoDistritoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoDistrito' de la tabla 'Auxiliar' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableAuxiliar.CodigoDistritoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreDistrito() As String
        Get
            Try
                Return CType(Me(Me.tableAuxiliar.NombreDistritoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreDistrito' de la tabla 'Auxiliar' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableAuxiliar.NombreDistritoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property TelefonoAuxiliar() As String
        Get
            Try
                Return CType(Me(Me.tableAuxiliar.TelefonoAuxiliarColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TelefonoAuxiliar' de la tabla 'Auxiliar' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableAuxiliar.TelefonoAuxiliarColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CelularAuxiliar() As String
        Get
            Try
                Return CType(Me(Me.tableAuxiliar.CelularAuxiliarColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CelularAuxiliar' de la tabla 'Auxiliar' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableAuxiliar.CelularAuxiliarColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CorreoAuxiliar() As String
        Get
            Try
                Return CType(Me(Me.tableAuxiliar.CorreoAuxiliarColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CorreoAuxiliar' de la tabla 'Auxiliar' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableAuxiliar.CorreoAuxiliarColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ReferenciaAuxiliar() As String
        Get
            Try
                Return CType(Me(Me.tableAuxiliar.ReferenciaAuxiliarColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ReferenciaAuxiliar' de la tabla 'Auxiliar' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableAuxiliar.ReferenciaAuxiliarColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property TipoAuxiliar() As String
        Get
            Try
                Return CType(Me(Me.tableAuxiliar.TipoAuxiliarColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoAuxiliar' de la tabla 'Auxiliar' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableAuxiliar.TipoAuxiliarColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property EstadoRegistro() As String
        Get
            Try
                Return CType(Me(Me.tableAuxiliar.EstadoRegistroColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EstadoRegistro' de la tabla 'Auxiliar' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableAuxiliar.EstadoRegistroColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property EliminadoRegistro() As String
        Get
            Try
                Return CType(Me(Me.tableAuxiliar.EliminadoRegistroColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EliminadoRegistro' de la tabla 'Auxiliar' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableAuxiliar.EliminadoRegistroColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoUsuarioAgrega() As String
        Get
            Try
                Return CType(Me(Me.tableAuxiliar.CodigoUsuarioAgregaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoUsuarioAgrega' de la tabla 'Auxiliar' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableAuxiliar.CodigoUsuarioAgregaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoPersonalAgrega() As String
        Get
            Try
                Return CType(Me(Me.tableAuxiliar.CodigoPersonalAgregaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoPersonalAgrega' de la tabla 'Auxiliar' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableAuxiliar.CodigoPersonalAgregaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreUsuarioAgrega() As String
        Get
            Try
                Return CType(Me(Me.tableAuxiliar.NombreUsuarioAgregaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreUsuarioAgrega' de la tabla 'Auxiliar' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableAuxiliar.NombreUsuarioAgregaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property FechaAgrega() As String
        Get
            Try
                Return CType(Me(Me.tableAuxiliar.FechaAgregaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaAgrega' de la tabla 'Auxiliar' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableAuxiliar.FechaAgregaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoUsuarioModifica() As String
        Get
            Try
                Return CType(Me(Me.tableAuxiliar.CodigoUsuarioModificaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoUsuarioModifica' de la tabla 'Auxiliar' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableAuxiliar.CodigoUsuarioModificaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoPersonalModifica() As String
        Get
            Try
                Return CType(Me(Me.tableAuxiliar.CodigoPersonalModificaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoPersonalModifica' de la tabla 'Auxiliar' es DBNull." &
                            "", e)
            End Try
        End Get
        Set
            Me(Me.tableAuxiliar.CodigoPersonalModificaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreUsuarioModifica() As String
        Get
            Try
                Return CType(Me(Me.tableAuxiliar.NombreUsuarioModificaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreUsuarioModifica' de la tabla 'Auxiliar' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableAuxiliar.NombreUsuarioModificaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property FechaModifica() As String
        Get
            Try
                Return CType(Me(Me.tableAuxiliar.FechaModificaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaModifica' de la tabla 'Auxiliar' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableAuxiliar.FechaModificaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoAuxiliarNull() As Boolean
        Return Me.IsNull(Me.tableAuxiliar.CodigoAuxiliarColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoAuxiliarNull()
        Me(Me.tableAuxiliar.CodigoAuxiliarColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsDescripcionAuxiliarNull() As Boolean
        Return Me.IsNull(Me.tableAuxiliar.DescripcionAuxiliarColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetDescripcionAuxiliarNull()
        Me(Me.tableAuxiliar.DescripcionAuxiliarColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsDireccionAuxiliarNull() As Boolean
        Return Me.IsNull(Me.tableAuxiliar.DireccionAuxiliarColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetDireccionAuxiliarNull()
        Me(Me.tableAuxiliar.DireccionAuxiliarColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoDistritoNull() As Boolean
        Return Me.IsNull(Me.tableAuxiliar.CodigoDistritoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoDistritoNull()
        Me(Me.tableAuxiliar.CodigoDistritoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreDistritoNull() As Boolean
        Return Me.IsNull(Me.tableAuxiliar.NombreDistritoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreDistritoNull()
        Me(Me.tableAuxiliar.NombreDistritoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsTelefonoAuxiliarNull() As Boolean
        Return Me.IsNull(Me.tableAuxiliar.TelefonoAuxiliarColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetTelefonoAuxiliarNull()
        Me(Me.tableAuxiliar.TelefonoAuxiliarColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCelularAuxiliarNull() As Boolean
        Return Me.IsNull(Me.tableAuxiliar.CelularAuxiliarColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCelularAuxiliarNull()
        Me(Me.tableAuxiliar.CelularAuxiliarColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCorreoAuxiliarNull() As Boolean
        Return Me.IsNull(Me.tableAuxiliar.CorreoAuxiliarColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCorreoAuxiliarNull()
        Me(Me.tableAuxiliar.CorreoAuxiliarColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsReferenciaAuxiliarNull() As Boolean
        Return Me.IsNull(Me.tableAuxiliar.ReferenciaAuxiliarColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetReferenciaAuxiliarNull()
        Me(Me.tableAuxiliar.ReferenciaAuxiliarColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsTipoAuxiliarNull() As Boolean
        Return Me.IsNull(Me.tableAuxiliar.TipoAuxiliarColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetTipoAuxiliarNull()
        Me(Me.tableAuxiliar.TipoAuxiliarColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsEstadoRegistroNull() As Boolean
        Return Me.IsNull(Me.tableAuxiliar.EstadoRegistroColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetEstadoRegistroNull()
        Me(Me.tableAuxiliar.EstadoRegistroColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsEliminadoRegistroNull() As Boolean
        Return Me.IsNull(Me.tableAuxiliar.EliminadoRegistroColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetEliminadoRegistroNull()
        Me(Me.tableAuxiliar.EliminadoRegistroColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoUsuarioAgregaNull() As Boolean
        Return Me.IsNull(Me.tableAuxiliar.CodigoUsuarioAgregaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoUsuarioAgregaNull()
        Me(Me.tableAuxiliar.CodigoUsuarioAgregaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoPersonalAgregaNull() As Boolean
        Return Me.IsNull(Me.tableAuxiliar.CodigoPersonalAgregaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoPersonalAgregaNull()
        Me(Me.tableAuxiliar.CodigoPersonalAgregaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreUsuarioAgregaNull() As Boolean
        Return Me.IsNull(Me.tableAuxiliar.NombreUsuarioAgregaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreUsuarioAgregaNull()
        Me(Me.tableAuxiliar.NombreUsuarioAgregaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsFechaAgregaNull() As Boolean
        Return Me.IsNull(Me.tableAuxiliar.FechaAgregaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetFechaAgregaNull()
        Me(Me.tableAuxiliar.FechaAgregaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoUsuarioModificaNull() As Boolean
        Return Me.IsNull(Me.tableAuxiliar.CodigoUsuarioModificaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoUsuarioModificaNull()
        Me(Me.tableAuxiliar.CodigoUsuarioModificaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoPersonalModificaNull() As Boolean
        Return Me.IsNull(Me.tableAuxiliar.CodigoPersonalModificaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoPersonalModificaNull()
        Me(Me.tableAuxiliar.CodigoPersonalModificaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreUsuarioModificaNull() As Boolean
        Return Me.IsNull(Me.tableAuxiliar.NombreUsuarioModificaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreUsuarioModificaNull()
        Me(Me.tableAuxiliar.NombreUsuarioModificaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsFechaModificaNull() As Boolean
        Return Me.IsNull(Me.tableAuxiliar.FechaModificaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetFechaModificaNull()
        Me(Me.tableAuxiliar.FechaModificaColumn) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class DiasPorMesRow
    Inherits Global.System.Data.DataRow

    Private tableDiasPorMes As DiasPorMesDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tableDiasPorMes = CType(Me.Table, DiasPorMesDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property AnoMesDiasPorMes() As String
        Get
            Try
                Return CType(Me(Me.tableDiasPorMes.AnoMesDiasPorMesColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AnoMesDiasPorMes' de la tabla 'DiasPorMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiasPorMes.AnoMesDiasPorMesColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property AnoDiasPorMes() As String
        Get
            Try
                Return CType(Me(Me.tableDiasPorMes.AnoDiasPorMesColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AnoDiasPorMes' de la tabla 'DiasPorMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiasPorMes.AnoDiasPorMesColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoMes() As String
        Get
            Try
                Return CType(Me(Me.tableDiasPorMes.CodigoMesColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoMes' de la tabla 'DiasPorMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiasPorMes.CodigoMesColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreMes() As String
        Get
            Try
                Return CType(Me(Me.tableDiasPorMes.NombreMesColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreMes' de la tabla 'DiasPorMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiasPorMes.NombreMesColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NumerodiasPorMes() As String
        Get
            Try
                Return CType(Me(Me.tableDiasPorMes.NumerodiasPorMesColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumerodiasPorMes' de la tabla 'DiasPorMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiasPorMes.NumerodiasPorMesColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property EstadoRegistro() As String
        Get
            Try
                Return CType(Me(Me.tableDiasPorMes.EstadoRegistroColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EstadoRegistro' de la tabla 'DiasPorMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiasPorMes.EstadoRegistroColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property EliminadoRegistro() As String
        Get
            Try
                Return CType(Me(Me.tableDiasPorMes.EliminadoRegistroColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EliminadoRegistro' de la tabla 'DiasPorMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiasPorMes.EliminadoRegistroColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoUsuarioAgrega() As String
        Get
            Try
                Return CType(Me(Me.tableDiasPorMes.CodigoUsuarioAgregaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoUsuarioAgrega' de la tabla 'DiasPorMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiasPorMes.CodigoUsuarioAgregaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoPersonalAgrega() As String
        Get
            Try
                Return CType(Me(Me.tableDiasPorMes.CodigoPersonalAgregaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoPersonalAgrega' de la tabla 'DiasPorMes' es DBNull." &
                            "", e)
            End Try
        End Get
        Set
            Me(Me.tableDiasPorMes.CodigoPersonalAgregaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreUsuarioAgrega() As String
        Get
            Try
                Return CType(Me(Me.tableDiasPorMes.NombreUsuarioAgregaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreUsuarioAgrega' de la tabla 'DiasPorMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiasPorMes.NombreUsuarioAgregaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property FechaAgrega() As String
        Get
            Try
                Return CType(Me(Me.tableDiasPorMes.FechaAgregaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaAgrega' de la tabla 'DiasPorMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiasPorMes.FechaAgregaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoUsuarioModifica() As String
        Get
            Try
                Return CType(Me(Me.tableDiasPorMes.CodigoUsuarioModificaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoUsuarioModifica' de la tabla 'DiasPorMes' es DBNull" &
                            ".", e)
            End Try
        End Get
        Set
            Me(Me.tableDiasPorMes.CodigoUsuarioModificaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoPersonalModifica() As String
        Get
            Try
                Return CType(Me(Me.tableDiasPorMes.CodigoPersonalModificaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoPersonalModifica' de la tabla 'DiasPorMes' es DBNul" &
                            "l.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiasPorMes.CodigoPersonalModificaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreUsuarioModifica() As String
        Get
            Try
                Return CType(Me(Me.tableDiasPorMes.NombreUsuarioModificaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreUsuarioModifica' de la tabla 'DiasPorMes' es DBNull" &
                            ".", e)
            End Try
        End Get
        Set
            Me(Me.tableDiasPorMes.NombreUsuarioModificaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property FechaModifica() As String
        Get
            Try
                Return CType(Me(Me.tableDiasPorMes.FechaModificaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaModifica' de la tabla 'DiasPorMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiasPorMes.FechaModificaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsAnoMesDiasPorMesNull() As Boolean
        Return Me.IsNull(Me.tableDiasPorMes.AnoMesDiasPorMesColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetAnoMesDiasPorMesNull()
        Me(Me.tableDiasPorMes.AnoMesDiasPorMesColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsAnoDiasPorMesNull() As Boolean
        Return Me.IsNull(Me.tableDiasPorMes.AnoDiasPorMesColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetAnoDiasPorMesNull()
        Me(Me.tableDiasPorMes.AnoDiasPorMesColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoMesNull() As Boolean
        Return Me.IsNull(Me.tableDiasPorMes.CodigoMesColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoMesNull()
        Me(Me.tableDiasPorMes.CodigoMesColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreMesNull() As Boolean
        Return Me.IsNull(Me.tableDiasPorMes.NombreMesColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreMesNull()
        Me(Me.tableDiasPorMes.NombreMesColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNumerodiasPorMesNull() As Boolean
        Return Me.IsNull(Me.tableDiasPorMes.NumerodiasPorMesColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNumerodiasPorMesNull()
        Me(Me.tableDiasPorMes.NumerodiasPorMesColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsEstadoRegistroNull() As Boolean
        Return Me.IsNull(Me.tableDiasPorMes.EstadoRegistroColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetEstadoRegistroNull()
        Me(Me.tableDiasPorMes.EstadoRegistroColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsEliminadoRegistroNull() As Boolean
        Return Me.IsNull(Me.tableDiasPorMes.EliminadoRegistroColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetEliminadoRegistroNull()
        Me(Me.tableDiasPorMes.EliminadoRegistroColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoUsuarioAgregaNull() As Boolean
        Return Me.IsNull(Me.tableDiasPorMes.CodigoUsuarioAgregaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoUsuarioAgregaNull()
        Me(Me.tableDiasPorMes.CodigoUsuarioAgregaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoPersonalAgregaNull() As Boolean
        Return Me.IsNull(Me.tableDiasPorMes.CodigoPersonalAgregaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoPersonalAgregaNull()
        Me(Me.tableDiasPorMes.CodigoPersonalAgregaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreUsuarioAgregaNull() As Boolean
        Return Me.IsNull(Me.tableDiasPorMes.NombreUsuarioAgregaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreUsuarioAgregaNull()
        Me(Me.tableDiasPorMes.NombreUsuarioAgregaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsFechaAgregaNull() As Boolean
        Return Me.IsNull(Me.tableDiasPorMes.FechaAgregaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetFechaAgregaNull()
        Me(Me.tableDiasPorMes.FechaAgregaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoUsuarioModificaNull() As Boolean
        Return Me.IsNull(Me.tableDiasPorMes.CodigoUsuarioModificaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoUsuarioModificaNull()
        Me(Me.tableDiasPorMes.CodigoUsuarioModificaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoPersonalModificaNull() As Boolean
        Return Me.IsNull(Me.tableDiasPorMes.CodigoPersonalModificaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoPersonalModificaNull()
        Me(Me.tableDiasPorMes.CodigoPersonalModificaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreUsuarioModificaNull() As Boolean
        Return Me.IsNull(Me.tableDiasPorMes.NombreUsuarioModificaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreUsuarioModificaNull()
        Me(Me.tableDiasPorMes.NombreUsuarioModificaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsFechaModificaNull() As Boolean
        Return Me.IsNull(Me.tableDiasPorMes.FechaModificaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetFechaModificaNull()
        Me(Me.tableDiasPorMes.FechaModificaColumn) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class TipoCambioRow
    Inherits Global.System.Data.DataRow

    Private tableTipoCambio As TipoCambioDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tableTipoCambio = CType(Me.Table, TipoCambioDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property FechaTipoCambio() As String
        Get
            Try
                Return CType(Me(Me.tableTipoCambio.FechaTipoCambioColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaTipoCambio' de la tabla 'TipoCambio' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableTipoCambio.FechaTipoCambioColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CompraTipoCambio() As Decimal
        Get
            Try
                Return CType(Me(Me.tableTipoCambio.CompraTipoCambioColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CompraTipoCambio' de la tabla 'TipoCambio' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableTipoCambio.CompraTipoCambioColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property VentaTipoCambio() As Decimal
        Get
            Try
                Return CType(Me(Me.tableTipoCambio.VentaTipoCambioColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VentaTipoCambio' de la tabla 'TipoCambio' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableTipoCambio.VentaTipoCambioColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property MesTipoCambio() As String
        Get
            Try
                Return CType(Me(Me.tableTipoCambio.MesTipoCambioColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MesTipoCambio' de la tabla 'TipoCambio' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableTipoCambio.MesTipoCambioColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property AnoTipoCambio() As String
        Get
            Try
                Return CType(Me(Me.tableTipoCambio.AnoTipoCambioColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AnoTipoCambio' de la tabla 'TipoCambio' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableTipoCambio.AnoTipoCambioColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property EstadoRegistro() As String
        Get
            Try
                Return CType(Me(Me.tableTipoCambio.EstadoRegistroColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EstadoRegistro' de la tabla 'TipoCambio' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableTipoCambio.EstadoRegistroColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property EliminadoRegistro() As String
        Get
            Try
                Return CType(Me(Me.tableTipoCambio.EliminadoRegistroColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EliminadoRegistro' de la tabla 'TipoCambio' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableTipoCambio.EliminadoRegistroColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoUsuarioAgrega() As String
        Get
            Try
                Return CType(Me(Me.tableTipoCambio.CodigoUsuarioAgregaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoUsuarioAgrega' de la tabla 'TipoCambio' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableTipoCambio.CodigoUsuarioAgregaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoPersonalAgrega() As String
        Get
            Try
                Return CType(Me(Me.tableTipoCambio.CodigoPersonalAgregaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoPersonalAgrega' de la tabla 'TipoCambio' es DBNull." &
                            "", e)
            End Try
        End Get
        Set
            Me(Me.tableTipoCambio.CodigoPersonalAgregaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreUsuarioAgrega() As String
        Get
            Try
                Return CType(Me(Me.tableTipoCambio.NombreUsuarioAgregaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreUsuarioAgrega' de la tabla 'TipoCambio' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableTipoCambio.NombreUsuarioAgregaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property FechaAgrega() As String
        Get
            Try
                Return CType(Me(Me.tableTipoCambio.FechaAgregaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaAgrega' de la tabla 'TipoCambio' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableTipoCambio.FechaAgregaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoUsuarioModifica() As String
        Get
            Try
                Return CType(Me(Me.tableTipoCambio.CodigoUsuarioModificaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoUsuarioModifica' de la tabla 'TipoCambio' es DBNull" &
                            ".", e)
            End Try
        End Get
        Set
            Me(Me.tableTipoCambio.CodigoUsuarioModificaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoPersonalModifica() As String
        Get
            Try
                Return CType(Me(Me.tableTipoCambio.CodigoPersonalModificaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoPersonalModifica' de la tabla 'TipoCambio' es DBNul" &
                            "l.", e)
            End Try
        End Get
        Set
            Me(Me.tableTipoCambio.CodigoPersonalModificaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreUsuarioModifica() As String
        Get
            Try
                Return CType(Me(Me.tableTipoCambio.NombreUsuarioModificaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreUsuarioModifica' de la tabla 'TipoCambio' es DBNull" &
                            ".", e)
            End Try
        End Get
        Set
            Me(Me.tableTipoCambio.NombreUsuarioModificaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property FechaModifica() As String
        Get
            Try
                Return CType(Me(Me.tableTipoCambio.FechaModificaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaModifica' de la tabla 'TipoCambio' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableTipoCambio.FechaModificaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CompraEurTipoCambio() As Decimal
        Get
            Try
                Return CType(Me(Me.tableTipoCambio.CompraEurTipoCambioColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CompraEurTipoCambio' de la tabla 'TipoCambio' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableTipoCambio.CompraEurTipoCambioColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property VentaEurTipoCambio() As Decimal
        Get
            Try
                Return CType(Me(Me.tableTipoCambio.VentaEurTipoCambioColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VentaEurTipoCambio' de la tabla 'TipoCambio' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableTipoCambio.VentaEurTipoCambioColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsFechaTipoCambioNull() As Boolean
        Return Me.IsNull(Me.tableTipoCambio.FechaTipoCambioColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetFechaTipoCambioNull()
        Me(Me.tableTipoCambio.FechaTipoCambioColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCompraTipoCambioNull() As Boolean
        Return Me.IsNull(Me.tableTipoCambio.CompraTipoCambioColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCompraTipoCambioNull()
        Me(Me.tableTipoCambio.CompraTipoCambioColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsVentaTipoCambioNull() As Boolean
        Return Me.IsNull(Me.tableTipoCambio.VentaTipoCambioColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetVentaTipoCambioNull()
        Me(Me.tableTipoCambio.VentaTipoCambioColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsMesTipoCambioNull() As Boolean
        Return Me.IsNull(Me.tableTipoCambio.MesTipoCambioColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetMesTipoCambioNull()
        Me(Me.tableTipoCambio.MesTipoCambioColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsAnoTipoCambioNull() As Boolean
        Return Me.IsNull(Me.tableTipoCambio.AnoTipoCambioColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetAnoTipoCambioNull()
        Me(Me.tableTipoCambio.AnoTipoCambioColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsEstadoRegistroNull() As Boolean
        Return Me.IsNull(Me.tableTipoCambio.EstadoRegistroColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetEstadoRegistroNull()
        Me(Me.tableTipoCambio.EstadoRegistroColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsEliminadoRegistroNull() As Boolean
        Return Me.IsNull(Me.tableTipoCambio.EliminadoRegistroColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetEliminadoRegistroNull()
        Me(Me.tableTipoCambio.EliminadoRegistroColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoUsuarioAgregaNull() As Boolean
        Return Me.IsNull(Me.tableTipoCambio.CodigoUsuarioAgregaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoUsuarioAgregaNull()
        Me(Me.tableTipoCambio.CodigoUsuarioAgregaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoPersonalAgregaNull() As Boolean
        Return Me.IsNull(Me.tableTipoCambio.CodigoPersonalAgregaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoPersonalAgregaNull()
        Me(Me.tableTipoCambio.CodigoPersonalAgregaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreUsuarioAgregaNull() As Boolean
        Return Me.IsNull(Me.tableTipoCambio.NombreUsuarioAgregaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreUsuarioAgregaNull()
        Me(Me.tableTipoCambio.NombreUsuarioAgregaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsFechaAgregaNull() As Boolean
        Return Me.IsNull(Me.tableTipoCambio.FechaAgregaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetFechaAgregaNull()
        Me(Me.tableTipoCambio.FechaAgregaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoUsuarioModificaNull() As Boolean
        Return Me.IsNull(Me.tableTipoCambio.CodigoUsuarioModificaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoUsuarioModificaNull()
        Me(Me.tableTipoCambio.CodigoUsuarioModificaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoPersonalModificaNull() As Boolean
        Return Me.IsNull(Me.tableTipoCambio.CodigoPersonalModificaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoPersonalModificaNull()
        Me(Me.tableTipoCambio.CodigoPersonalModificaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreUsuarioModificaNull() As Boolean
        Return Me.IsNull(Me.tableTipoCambio.NombreUsuarioModificaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreUsuarioModificaNull()
        Me(Me.tableTipoCambio.NombreUsuarioModificaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsFechaModificaNull() As Boolean
        Return Me.IsNull(Me.tableTipoCambio.FechaModificaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetFechaModificaNull()
        Me(Me.tableTipoCambio.FechaModificaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCompraEurTipoCambioNull() As Boolean
        Return Me.IsNull(Me.tableTipoCambio.CompraEurTipoCambioColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCompraEurTipoCambioNull()
        Me(Me.tableTipoCambio.CompraEurTipoCambioColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsVentaEurTipoCambioNull() As Boolean
        Return Me.IsNull(Me.tableTipoCambio.VentaEurTipoCambioColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetVentaEurTipoCambioNull()
        Me(Me.tableTipoCambio.VentaEurTipoCambioColumn) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class ReportePersonalActivoHorasRow
    Inherits Global.System.Data.DataRow

    Private tableReportePersonalActivoHoras As ReportePersonalActivoHorasDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tableReportePersonalActivoHoras = CType(Me.Table, ReportePersonalActivoHorasDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property PersonalActivo() As String
        Get
            Try
                Return CType(Me(Me.tableReportePersonalActivoHoras.PersonalActivoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PersonalActivo' de la tabla 'ReportePersonalActivoHoras' " &
                            "es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableReportePersonalActivoHoras.PersonalActivoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property PersonalActivoCivil() As String
        Get
            Try
                Return CType(Me(Me.tableReportePersonalActivoHoras.PersonalActivoCivilColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PersonalActivoCivil' de la tabla 'ReportePersonalActivoHo" &
                            "ras' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableReportePersonalActivoHoras.PersonalActivoCivilColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property PersonalActivoElectromecanica() As String
        Get
            Try
                Return CType(Me(Me.tableReportePersonalActivoHoras.PersonalActivoElectromecanicaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PersonalActivoElectromecanica' de la tabla 'ReportePerson" &
                            "alActivoHoras' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableReportePersonalActivoHoras.PersonalActivoElectromecanicaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property PersonalActivoSupervision() As String
        Get
            Try
                Return CType(Me(Me.tableReportePersonalActivoHoras.PersonalActivoSupervisionColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PersonalActivoSupervision' de la tabla 'ReportePersonalAc" &
                            "tivoHoras' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableReportePersonalActivoHoras.PersonalActivoSupervisionColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property PersonalActivoAdmOfe() As String
        Get
            Try
                Return CType(Me(Me.tableReportePersonalActivoHoras.PersonalActivoAdmOfeColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PersonalActivoAdmOfe' de la tabla 'ReportePersonalActivoH" &
                            "oras' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableReportePersonalActivoHoras.PersonalActivoAdmOfeColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property PersonalActivoCalidad() As String
        Get
            Try
                Return CType(Me(Me.tableReportePersonalActivoHoras.PersonalActivoCalidadColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PersonalActivoCalidad' de la tabla 'ReportePersonalActivo" &
                            "Horas' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableReportePersonalActivoHoras.PersonalActivoCalidadColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsPersonalActivoNull() As Boolean
        Return Me.IsNull(Me.tableReportePersonalActivoHoras.PersonalActivoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetPersonalActivoNull()
        Me(Me.tableReportePersonalActivoHoras.PersonalActivoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsPersonalActivoCivilNull() As Boolean
        Return Me.IsNull(Me.tableReportePersonalActivoHoras.PersonalActivoCivilColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetPersonalActivoCivilNull()
        Me(Me.tableReportePersonalActivoHoras.PersonalActivoCivilColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsPersonalActivoElectromecanicaNull() As Boolean
        Return Me.IsNull(Me.tableReportePersonalActivoHoras.PersonalActivoElectromecanicaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetPersonalActivoElectromecanicaNull()
        Me(Me.tableReportePersonalActivoHoras.PersonalActivoElectromecanicaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsPersonalActivoSupervisionNull() As Boolean
        Return Me.IsNull(Me.tableReportePersonalActivoHoras.PersonalActivoSupervisionColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetPersonalActivoSupervisionNull()
        Me(Me.tableReportePersonalActivoHoras.PersonalActivoSupervisionColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsPersonalActivoAdmOfeNull() As Boolean
        Return Me.IsNull(Me.tableReportePersonalActivoHoras.PersonalActivoAdmOfeColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetPersonalActivoAdmOfeNull()
        Me(Me.tableReportePersonalActivoHoras.PersonalActivoAdmOfeColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsPersonalActivoCalidadNull() As Boolean
        Return Me.IsNull(Me.tableReportePersonalActivoHoras.PersonalActivoCalidadColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetPersonalActivoCalidadNull()
        Me(Me.tableReportePersonalActivoHoras.PersonalActivoCalidadColumn) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class RegContabRow
    Inherits Global.System.Data.DataRow

    Private tableRegContab As RegContabDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tableRegContab = CType(Me.Table, RegContabDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property PeriodoRegContab() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.PeriodoRegContabColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PeriodoRegContab' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.PeriodoRegContabColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoOrigen() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.CodigoOrigenColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoOrigen' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.CodigoOrigenColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreOrigen() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.NombreOrigenColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreOrigen' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.NombreOrigenColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoFile() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.CodigoFileColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoFile' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.CodigoFileColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreFile() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.NombreFileColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreFile' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.NombreFileColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NumeroVoucherRegContab() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.NumeroVoucherRegContabColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroVoucherRegContab' de la tabla 'RegContab' es DBNull" &
                            ".", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.NumeroVoucherRegContabColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ClaveRegContab() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.ClaveRegContabColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ClaveRegContab' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.ClaveRegContabColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property DiaVoucherRegContab() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.DiaVoucherRegContabColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DiaVoucherRegContab' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.DiaVoucherRegContabColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property FechaVoucherrgContab() As Date
        Get
            Try
                Return CType(Me(Me.tableRegContab.FechaVoucherrgContabColumn), Date)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaVoucherrgContab' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.FechaVoucherrgContabColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoAuxiliar() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.CodigoAuxiliarColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoAuxiliar' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.CodigoAuxiliarColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property DescripcionAuxiliar() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.DescripcionAuxiliarColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DescripcionAuxiliar' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.DescripcionAuxiliarColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property TipoDocumento() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.TipoDocumentoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoDocumento' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.TipoDocumentoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreDocumento() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.NombreDocumentoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreDocumento' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.NombreDocumentoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property SerieDocumento() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.SerieDocumentoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SerieDocumento' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.SerieDocumentoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NumeroDocumento() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.NumeroDocumentoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroDocumento' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.NumeroDocumentoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property FechaDocumento() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.FechaDocumentoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaDocumento' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.FechaDocumentoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property MonedaDocumento() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.MonedaDocumentoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MonedaDocumento' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.MonedaDocumentoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property VentaTipoCambio() As Decimal
        Get
            Try
                Return CType(Me(Me.tableRegContab.VentaTipoCambioColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VentaTipoCambio' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.VentaTipoCambioColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property PrecioVtaRegContab() As Decimal
        Get
            Try
                Return CType(Me(Me.tableRegContab.PrecioVtaRegContabColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PrecioVtaRegContab' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.PrecioVtaRegContabColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ExoneradoRegContab() As Decimal
        Get
            Try
                Return CType(Me(Me.tableRegContab.ExoneradoRegContabColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ExoneradoRegContab' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.ExoneradoRegContabColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ValorVtaRegContab() As Decimal
        Get
            Try
                Return CType(Me(Me.tableRegContab.ValorVtaRegContabColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ValorVtaRegContab' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.ValorVtaRegContabColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property IgvPar() As Decimal
        Get
            Try
                Return CType(Me(Me.tableRegContab.IgvParColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IgvPar' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.IgvParColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property PrecioVtaSolRegContab() As Decimal
        Get
            Try
                Return CType(Me(Me.tableRegContab.PrecioVtaSolRegContabColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PrecioVtaSolRegContab' de la tabla 'RegContab' es DBNull." &
                            "", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.PrecioVtaSolRegContabColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ExoneradoSolRegContab() As Decimal
        Get
            Try
                Return CType(Me(Me.tableRegContab.ExoneradoSolRegContabColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ExoneradoSolRegContab' de la tabla 'RegContab' es DBNull." &
                            "", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.ExoneradoSolRegContabColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ValorVtaSolRegContab() As Decimal
        Get
            Try
                Return CType(Me(Me.tableRegContab.ValorVtaSolRegContabColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ValorVtaSolRegContab' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.ValorVtaSolRegContabColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property IgvSolRegContab() As Decimal
        Get
            Try
                Return CType(Me(Me.tableRegContab.IgvSolRegContabColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IgvSolRegContab' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.IgvSolRegContabColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ValorVtaSolRegContab1() As Decimal
        Get
            Try
                Return CType(Me(Me.tableRegContab.ValorVtaSolRegContab1Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ValorVtaSolRegContab1' de la tabla 'RegContab' es DBNull." &
                            "", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.ValorVtaSolRegContab1Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property IgvSolRegContab1() As Decimal
        Get
            Try
                Return CType(Me(Me.tableRegContab.IgvSolRegContab1Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IgvSolRegContab1' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.IgvSolRegContab1Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ValorVtaSolRegContab2() As Decimal
        Get
            Try
                Return CType(Me(Me.tableRegContab.ValorVtaSolRegContab2Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ValorVtaSolRegContab2' de la tabla 'RegContab' es DBNull." &
                            "", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.ValorVtaSolRegContab2Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property IgvSOlRegContab2() As Decimal
        Get
            Try
                Return CType(Me(Me.tableRegContab.IgvSOlRegContab2Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IgvSolRegContab2' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.IgvSOlRegContab2Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property GlosaRegContab() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.GlosaRegContabColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'GlosaRegContab' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.GlosaRegContabColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoUsuarioAgrega_() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.CodigoUsuarioAgrega_Column), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoUsuarioAgrega ' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.CodigoUsuarioAgrega_Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoPersonalAgrega_() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.CodigoPersonalAgrega_Column), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoPersonalAgrega ' de la tabla 'RegContab' es DBNull." &
                            "", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.CodigoPersonalAgrega_Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreUsuarioAgrega() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.NombreUsuarioAgregaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreUsuarioAgrega' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.NombreUsuarioAgregaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property FechaAgrega() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.FechaAgregaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaAgrega' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.FechaAgregaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoUsuarioModifica() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.CodigoUsuarioModificaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoUsuarioModifica' de la tabla 'RegContab' es DBNull." &
                            "", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.CodigoUsuarioModificaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoPersonalModifica() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.CodigoPersonalModificaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoPersonalModifica' de la tabla 'RegContab' es DBNull" &
                            ".", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.CodigoPersonalModificaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreUsuarioModifica() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.NombreUsuarioModificaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreUsuarioModifica' de la tabla 'RegContab' es DBNull." &
                            "", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.NombreUsuarioModificaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property FechaModifica() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.FechaModificaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaModifica' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.FechaModificaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Tipo() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.TipoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.TipoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Igv() As Decimal
        Get
            Try
                Return CType(Me(Me.tableRegContab.IgvColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Igv' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.IgvColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Fecha_Vencimiento() As Date
        Get
            Try
                Return CType(Me(Me.tableRegContab.Fecha_VencimientoColumn), Date)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Fecha Vencimiento' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.Fecha_VencimientoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NumeroPapeleta() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.NumeroPapeletaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroPapeleta' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.NumeroPapeletaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property FechaDetraccion() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.FechaDetraccionColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaDetraccion' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.FechaDetraccionColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property TipoDoc1() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.TipoDoc1Column), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoDoc1' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.TipoDoc1Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Serie1() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.Serie1Column), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Serie1' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.Serie1Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Numero1() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.Numero1Column), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Numero1' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.Numero1Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Fecha1() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.Fecha1Column), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Fecha1' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.Fecha1Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.CuentaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.CuentaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property nombrecuenta() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.nombrecuentaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nombrecuenta' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.nombrecuentaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property DebeHaber() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.DebeHaberColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DebeHaber' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.DebeHaberColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ImporteSol() As Decimal
        Get
            Try
                Return CType(Me(Me.tableRegContab.ImporteSolColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImporteSol' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.ImporteSolColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ImporteDol() As Decimal
        Get
            Try
                Return CType(Me(Me.tableRegContab.ImporteDolColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImporteDol' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.ImporteDolColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property TipoLibro() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.TipoLibroColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoLibro' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.TipoLibroColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Correlativo() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.CorrelativoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Correlativo' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.CorrelativoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ImporteDebe() As Decimal
        Get
            Try
                Return CType(Me(Me.tableRegContab.ImporteDebeColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImporteDebe' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.ImporteDebeColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ImporteHaber() As Decimal
        Get
            Try
                Return CType(Me(Me.tableRegContab.ImporteHaberColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImporteHaber' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.ImporteHaberColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ImporteDebeAcumulado() As Decimal
        Get
            Try
                Return CType(Me(Me.tableRegContab.ImporteDebeAcumuladoColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImporteDebeAcumulado' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.ImporteDebeAcumuladoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ImporteHaberAcumulado() As Decimal
        Get
            Try
                Return CType(Me(Me.tableRegContab.ImporteHaberAcumuladoColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImporteHaberAcumulado' de la tabla 'RegContab' es DBNull." &
                            "", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.ImporteHaberAcumuladoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CentroCosto() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.CentroCostoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CentroCosto' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.CentroCostoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Area() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.AreaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Area' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.AreaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Saldos() As Decimal
        Get
            Try
                Return CType(Me(Me.tableRegContab.SaldosColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Saldos' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.SaldosColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Clave() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.ClaveColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.ClaveColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Girado() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.GiradoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Girado' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.GiradoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ImporteRegContabCabe() As Decimal
        Get
            Try
                Return CType(Me(Me.tableRegContab.ImporteRegContabCabeColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImporteRegContabCabe' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.ImporteRegContabCabeColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property RetencionRegContabCabe() As Decimal
        Get
            Try
                Return CType(Me(Me.tableRegContab.RetencionRegContabCabeColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RetencionRegContabCabe' de la tabla 'RegContab' es DBNull" &
                            ".", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.RetencionRegContabCabeColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoIngEgr() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.CodigoIngEgrColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoIngEgr' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.CodigoIngEgrColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreIngEgr() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.NombreIngEgrColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreIngEgr' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.NombreIngEgrColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreCentroCosto() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.NombreCentroCostoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreCentroCosto' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.NombreCentroCostoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoFlujoCaja() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.CodigoFlujoCajaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoFlujoCaja' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.CodigoFlujoCajaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreFlujoCaja() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.NombreFlujoCajaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreFlujoCaja' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.NombreFlujoCajaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property FlagDsctoAfpSnp() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.FlagDsctoAfpSnpColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FlagDsctoAfpSnp' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.FlagDsctoAfpSnpColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoGastoReparable() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.CodigoGastoReparableColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoGastoReparable' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.CodigoGastoReparableColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreGastoReparable() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.NombreGastoReparableColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreGastoReparable' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.NombreGastoReparableColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cantidad() As Decimal
        Get
            Try
                Return CType(Me(Me.tableRegContab.CantidadColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cantidad' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.CantidadColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoAlmacen() As String
        Get
            Try
                Return CType(Me(Me.tableRegContab.CodigoAlmacenColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoAlmacen' de la tabla 'RegContab' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableRegContab.CodigoAlmacenColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsPeriodoRegContabNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.PeriodoRegContabColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetPeriodoRegContabNull()
        Me(Me.tableRegContab.PeriodoRegContabColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoOrigenNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.CodigoOrigenColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoOrigenNull()
        Me(Me.tableRegContab.CodigoOrigenColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreOrigenNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.NombreOrigenColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreOrigenNull()
        Me(Me.tableRegContab.NombreOrigenColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoFileNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.CodigoFileColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoFileNull()
        Me(Me.tableRegContab.CodigoFileColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreFileNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.NombreFileColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreFileNull()
        Me(Me.tableRegContab.NombreFileColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNumeroVoucherRegContabNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.NumeroVoucherRegContabColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNumeroVoucherRegContabNull()
        Me(Me.tableRegContab.NumeroVoucherRegContabColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsClaveRegContabNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.ClaveRegContabColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetClaveRegContabNull()
        Me(Me.tableRegContab.ClaveRegContabColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsDiaVoucherRegContabNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.DiaVoucherRegContabColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetDiaVoucherRegContabNull()
        Me(Me.tableRegContab.DiaVoucherRegContabColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsFechaVoucherrgContabNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.FechaVoucherrgContabColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetFechaVoucherrgContabNull()
        Me(Me.tableRegContab.FechaVoucherrgContabColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoAuxiliarNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.CodigoAuxiliarColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoAuxiliarNull()
        Me(Me.tableRegContab.CodigoAuxiliarColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsDescripcionAuxiliarNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.DescripcionAuxiliarColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetDescripcionAuxiliarNull()
        Me(Me.tableRegContab.DescripcionAuxiliarColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsTipoDocumentoNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.TipoDocumentoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetTipoDocumentoNull()
        Me(Me.tableRegContab.TipoDocumentoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreDocumentoNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.NombreDocumentoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreDocumentoNull()
        Me(Me.tableRegContab.NombreDocumentoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsSerieDocumentoNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.SerieDocumentoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetSerieDocumentoNull()
        Me(Me.tableRegContab.SerieDocumentoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNumeroDocumentoNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.NumeroDocumentoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNumeroDocumentoNull()
        Me(Me.tableRegContab.NumeroDocumentoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsFechaDocumentoNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.FechaDocumentoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetFechaDocumentoNull()
        Me(Me.tableRegContab.FechaDocumentoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsMonedaDocumentoNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.MonedaDocumentoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetMonedaDocumentoNull()
        Me(Me.tableRegContab.MonedaDocumentoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsVentaTipoCambioNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.VentaTipoCambioColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetVentaTipoCambioNull()
        Me(Me.tableRegContab.VentaTipoCambioColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsPrecioVtaRegContabNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.PrecioVtaRegContabColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetPrecioVtaRegContabNull()
        Me(Me.tableRegContab.PrecioVtaRegContabColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsExoneradoRegContabNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.ExoneradoRegContabColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetExoneradoRegContabNull()
        Me(Me.tableRegContab.ExoneradoRegContabColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsValorVtaRegContabNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.ValorVtaRegContabColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetValorVtaRegContabNull()
        Me(Me.tableRegContab.ValorVtaRegContabColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsIgvParNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.IgvParColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetIgvParNull()
        Me(Me.tableRegContab.IgvParColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsPrecioVtaSolRegContabNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.PrecioVtaSolRegContabColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetPrecioVtaSolRegContabNull()
        Me(Me.tableRegContab.PrecioVtaSolRegContabColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsExoneradoSolRegContabNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.ExoneradoSolRegContabColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetExoneradoSolRegContabNull()
        Me(Me.tableRegContab.ExoneradoSolRegContabColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsValorVtaSolRegContabNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.ValorVtaSolRegContabColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetValorVtaSolRegContabNull()
        Me(Me.tableRegContab.ValorVtaSolRegContabColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsIgvSolRegContabNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.IgvSolRegContabColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetIgvSolRegContabNull()
        Me(Me.tableRegContab.IgvSolRegContabColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsValorVtaSolRegContab1Null() As Boolean
        Return Me.IsNull(Me.tableRegContab.ValorVtaSolRegContab1Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetValorVtaSolRegContab1Null()
        Me(Me.tableRegContab.ValorVtaSolRegContab1Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsIgvSolRegContab1Null() As Boolean
        Return Me.IsNull(Me.tableRegContab.IgvSolRegContab1Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetIgvSolRegContab1Null()
        Me(Me.tableRegContab.IgvSolRegContab1Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsValorVtaSolRegContab2Null() As Boolean
        Return Me.IsNull(Me.tableRegContab.ValorVtaSolRegContab2Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetValorVtaSolRegContab2Null()
        Me(Me.tableRegContab.ValorVtaSolRegContab2Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsIgvSOlRegContab2Null() As Boolean
        Return Me.IsNull(Me.tableRegContab.IgvSOlRegContab2Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetIgvSOlRegContab2Null()
        Me(Me.tableRegContab.IgvSOlRegContab2Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsGlosaRegContabNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.GlosaRegContabColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetGlosaRegContabNull()
        Me(Me.tableRegContab.GlosaRegContabColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoUsuarioAgrega_Null() As Boolean
        Return Me.IsNull(Me.tableRegContab.CodigoUsuarioAgrega_Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoUsuarioAgrega_Null()
        Me(Me.tableRegContab.CodigoUsuarioAgrega_Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoPersonalAgrega_Null() As Boolean
        Return Me.IsNull(Me.tableRegContab.CodigoPersonalAgrega_Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoPersonalAgrega_Null()
        Me(Me.tableRegContab.CodigoPersonalAgrega_Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreUsuarioAgregaNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.NombreUsuarioAgregaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreUsuarioAgregaNull()
        Me(Me.tableRegContab.NombreUsuarioAgregaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsFechaAgregaNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.FechaAgregaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetFechaAgregaNull()
        Me(Me.tableRegContab.FechaAgregaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoUsuarioModificaNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.CodigoUsuarioModificaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoUsuarioModificaNull()
        Me(Me.tableRegContab.CodigoUsuarioModificaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoPersonalModificaNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.CodigoPersonalModificaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoPersonalModificaNull()
        Me(Me.tableRegContab.CodigoPersonalModificaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreUsuarioModificaNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.NombreUsuarioModificaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreUsuarioModificaNull()
        Me(Me.tableRegContab.NombreUsuarioModificaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsFechaModificaNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.FechaModificaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetFechaModificaNull()
        Me(Me.tableRegContab.FechaModificaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsTipoNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.TipoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetTipoNull()
        Me(Me.tableRegContab.TipoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsIgvNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.IgvColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetIgvNull()
        Me(Me.tableRegContab.IgvColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsFecha_VencimientoNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.Fecha_VencimientoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetFecha_VencimientoNull()
        Me(Me.tableRegContab.Fecha_VencimientoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNumeroPapeletaNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.NumeroPapeletaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNumeroPapeletaNull()
        Me(Me.tableRegContab.NumeroPapeletaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsFechaDetraccionNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.FechaDetraccionColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetFechaDetraccionNull()
        Me(Me.tableRegContab.FechaDetraccionColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsTipoDoc1Null() As Boolean
        Return Me.IsNull(Me.tableRegContab.TipoDoc1Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetTipoDoc1Null()
        Me(Me.tableRegContab.TipoDoc1Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsSerie1Null() As Boolean
        Return Me.IsNull(Me.tableRegContab.Serie1Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetSerie1Null()
        Me(Me.tableRegContab.Serie1Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNumero1Null() As Boolean
        Return Me.IsNull(Me.tableRegContab.Numero1Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNumero1Null()
        Me(Me.tableRegContab.Numero1Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsFecha1Null() As Boolean
        Return Me.IsNull(Me.tableRegContab.Fecha1Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetFecha1Null()
        Me(Me.tableRegContab.Fecha1Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuentaNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.CuentaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuentaNull()
        Me(Me.tableRegContab.CuentaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsnombrecuentaNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.nombrecuentaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetnombrecuentaNull()
        Me(Me.tableRegContab.nombrecuentaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsDebeHaberNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.DebeHaberColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetDebeHaberNull()
        Me(Me.tableRegContab.DebeHaberColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsImporteSolNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.ImporteSolColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetImporteSolNull()
        Me(Me.tableRegContab.ImporteSolColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsImporteDolNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.ImporteDolColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetImporteDolNull()
        Me(Me.tableRegContab.ImporteDolColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsTipoLibroNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.TipoLibroColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetTipoLibroNull()
        Me(Me.tableRegContab.TipoLibroColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCorrelativoNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.CorrelativoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCorrelativoNull()
        Me(Me.tableRegContab.CorrelativoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsImporteDebeNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.ImporteDebeColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetImporteDebeNull()
        Me(Me.tableRegContab.ImporteDebeColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsImporteHaberNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.ImporteHaberColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetImporteHaberNull()
        Me(Me.tableRegContab.ImporteHaberColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsImporteDebeAcumuladoNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.ImporteDebeAcumuladoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetImporteDebeAcumuladoNull()
        Me(Me.tableRegContab.ImporteDebeAcumuladoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsImporteHaberAcumuladoNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.ImporteHaberAcumuladoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetImporteHaberAcumuladoNull()
        Me(Me.tableRegContab.ImporteHaberAcumuladoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCentroCostoNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.CentroCostoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCentroCostoNull()
        Me(Me.tableRegContab.CentroCostoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsAreaNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.AreaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetAreaNull()
        Me(Me.tableRegContab.AreaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsSaldosNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.SaldosColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetSaldosNull()
        Me(Me.tableRegContab.SaldosColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsClaveNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.ClaveColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetClaveNull()
        Me(Me.tableRegContab.ClaveColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsGiradoNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.GiradoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetGiradoNull()
        Me(Me.tableRegContab.GiradoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsImporteRegContabCabeNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.ImporteRegContabCabeColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetImporteRegContabCabeNull()
        Me(Me.tableRegContab.ImporteRegContabCabeColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsRetencionRegContabCabeNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.RetencionRegContabCabeColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetRetencionRegContabCabeNull()
        Me(Me.tableRegContab.RetencionRegContabCabeColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoIngEgrNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.CodigoIngEgrColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoIngEgrNull()
        Me(Me.tableRegContab.CodigoIngEgrColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreIngEgrNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.NombreIngEgrColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreIngEgrNull()
        Me(Me.tableRegContab.NombreIngEgrColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreCentroCostoNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.NombreCentroCostoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreCentroCostoNull()
        Me(Me.tableRegContab.NombreCentroCostoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoFlujoCajaNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.CodigoFlujoCajaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoFlujoCajaNull()
        Me(Me.tableRegContab.CodigoFlujoCajaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreFlujoCajaNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.NombreFlujoCajaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreFlujoCajaNull()
        Me(Me.tableRegContab.NombreFlujoCajaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsFlagDsctoAfpSnpNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.FlagDsctoAfpSnpColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetFlagDsctoAfpSnpNull()
        Me(Me.tableRegContab.FlagDsctoAfpSnpColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoGastoReparableNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.CodigoGastoReparableColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoGastoReparableNull()
        Me(Me.tableRegContab.CodigoGastoReparableColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreGastoReparableNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.NombreGastoReparableColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreGastoReparableNull()
        Me(Me.tableRegContab.NombreGastoReparableColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCantidadNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.CantidadColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCantidadNull()
        Me(Me.tableRegContab.CantidadColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoAlmacenNull() As Boolean
        Return Me.IsNull(Me.tableRegContab.CodigoAlmacenColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoAlmacenNull()
        Me(Me.tableRegContab.CodigoAlmacenColumn) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class ConceptosRow
    Inherits Global.System.Data.DataRow

    Private tableConceptos As ConceptosDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tableConceptos = CType(Me.Table, ConceptosDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoPptoInterno() As String
        Get
            Try
                Return CType(Me(Me.tableConceptos.CodigoPptoInternoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoPptoInterno' de la tabla 'Conceptos' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableConceptos.CodigoPptoInternoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Precio() As Decimal
        Get
            Try
                Return CType(Me(Me.tableConceptos.PrecioColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Precio' de la tabla 'Conceptos' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableConceptos.PrecioColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Mes() As String
        Get
            Try
                Return CType(Me(Me.tableConceptos.MesColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Mes' de la tabla 'Conceptos' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableConceptos.MesColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Concepto() As String
        Get
            Try
                Return CType(Me(Me.tableConceptos.ConceptoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Concepto' de la tabla 'Conceptos' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableConceptos.ConceptoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoPptoInternoNull() As Boolean
        Return Me.IsNull(Me.tableConceptos.CodigoPptoInternoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoPptoInternoNull()
        Me(Me.tableConceptos.CodigoPptoInternoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsPrecioNull() As Boolean
        Return Me.IsNull(Me.tableConceptos.PrecioColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetPrecioNull()
        Me(Me.tableConceptos.PrecioColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsMesNull() As Boolean
        Return Me.IsNull(Me.tableConceptos.MesColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetMesNull()
        Me(Me.tableConceptos.MesColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsConceptoNull() As Boolean
        Return Me.IsNull(Me.tableConceptos.ConceptoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetConceptoNull()
        Me(Me.tableConceptos.ConceptoColumn) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class PerfilRow
    Inherits Global.System.Data.DataRow

    Private tablePerfil As PerfilDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tablePerfil = CType(Me.Table, PerfilDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoGrupo() As String
        Get
            Try
                Return CType(Me(Me.tablePerfil.CodigoGrupoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoGrupo' de la tabla 'Perfil' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePerfil.CodigoGrupoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreGrupo() As String
        Get
            Try
                Return CType(Me(Me.tablePerfil.NombreGrupoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreGrupo' de la tabla 'Perfil' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePerfil.NombreGrupoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoGrupoNull() As Boolean
        Return Me.IsNull(Me.tablePerfil.CodigoGrupoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoGrupoNull()
        Me(Me.tablePerfil.CodigoGrupoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreGrupoNull() As Boolean
        Return Me.IsNull(Me.tablePerfil.NombreGrupoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreGrupoNull()
        Me(Me.tablePerfil.NombreGrupoColumn) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class CodigoInexistenteRow
    Inherits Global.System.Data.DataRow

    Private tableCodigoInexistente As CodigoInexistenteDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tableCodigoInexistente = CType(Me.Table, CodigoInexistenteDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Fecha() As String
        Get
            Try
                Return CType(Me(Me.tableCodigoInexistente.FechaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Fecha' de la tabla 'CodigoInexistente' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableCodigoInexistente.FechaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Codigo() As String
        Get
            Try
                Return CType(Me(Me.tableCodigoInexistente.CodigoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Codigo' de la tabla 'CodigoInexistente' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableCodigoInexistente.CodigoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Tipo() As String
        Get
            Try
                Return CType(Me(Me.tableCodigoInexistente.TipoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo' de la tabla 'CodigoInexistente' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableCodigoInexistente.TipoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NumeroHorasMovHoras() As String
        Get
            Try
                Return CType(Me(Me.tableCodigoInexistente.NumeroHorasMovHorasColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroHorasMovHoras' de la tabla 'CodigoInexistente' es D" &
                            "BNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableCodigoInexistente.NumeroHorasMovHorasColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsFechaNull() As Boolean
        Return Me.IsNull(Me.tableCodigoInexistente.FechaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetFechaNull()
        Me(Me.tableCodigoInexistente.FechaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoNull() As Boolean
        Return Me.IsNull(Me.tableCodigoInexistente.CodigoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoNull()
        Me(Me.tableCodigoInexistente.CodigoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsTipoNull() As Boolean
        Return Me.IsNull(Me.tableCodigoInexistente.TipoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetTipoNull()
        Me(Me.tableCodigoInexistente.TipoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNumeroHorasMovHorasNull() As Boolean
        Return Me.IsNull(Me.tableCodigoInexistente.NumeroHorasMovHorasColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNumeroHorasMovHorasNull()
        Me(Me.tableCodigoInexistente.NumeroHorasMovHorasColumn) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class PlanillaRow
    Inherits Global.System.Data.DataRow

    Private tablePlanilla As PlanillaDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tablePlanilla = CType(Me.Table, PlanillaDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoPersonal() As String
        Get
            Try
                Return CType(Me(Me.tablePlanilla.CodigoPersonalColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoPersonal' de la tabla 'Planilla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePlanilla.CodigoPersonalColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreCompletoPersonal() As String
        Get
            Try
                Return CType(Me(Me.tablePlanilla.NombreCompletoPersonalColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreCompletoPersonal' de la tabla 'Planilla' es DBNull." &
                            "", e)
            End Try
        End Get
        Set
            Me(Me.tablePlanilla.NombreCompletoPersonalColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoContratacion() As String
        Get
            Try
                Return CType(Me(Me.tablePlanilla.CodigoContratacionColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoContratacion' de la tabla 'Planilla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePlanilla.CodigoContratacionColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreContratacion() As String
        Get
            Try
                Return CType(Me(Me.tablePlanilla.NombreContratacionColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreContratacion' de la tabla 'Planilla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePlanilla.NombreContratacionColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property AnoPlla() As String
        Get
            Try
                Return CType(Me(Me.tablePlanilla.AnoPllaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AnoPlla' de la tabla 'Planilla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePlanilla.AnoPllaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property MesPlla() As String
        Get
            Try
                Return CType(Me(Me.tablePlanilla.MesPllaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MesPlla' de la tabla 'Planilla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePlanilla.MesPllaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreMes() As String
        Get
            Try
                Return CType(Me(Me.tablePlanilla.NombreMesColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreMes' de la tabla 'Planilla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePlanilla.NombreMesColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property BasicoPlla() As Decimal
        Get
            Try
                Return CType(Me(Me.tablePlanilla.BasicoPllaColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'BasicoPlla' de la tabla 'Planilla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePlanilla.BasicoPllaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ComisionVentaPlla() As Decimal
        Get
            Try
                Return CType(Me(Me.tablePlanilla.ComisionVentaPllaColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ComisionVentaPlla' de la tabla 'Planilla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePlanilla.ComisionVentaPllaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property HorasExtrasPlla() As Decimal
        Get
            Try
                Return CType(Me(Me.tablePlanilla.HorasExtrasPllaColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'HorasExtrasPlla' de la tabla 'Planilla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePlanilla.HorasExtrasPllaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property AsigFamiliarPlla() As Decimal
        Get
            Try
                Return CType(Me(Me.tablePlanilla.AsigFamiliarPllaColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AsigFamiliarPlla' de la tabla 'Planilla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePlanilla.AsigFamiliarPllaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property DL26504Plla() As Decimal
        Get
            Try
                Return CType(Me(Me.tablePlanilla.DL26504PllaColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DL26504Plla' de la tabla 'Planilla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePlanilla.DL26504PllaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property EducacionPlla() As Decimal
        Get
            Try
                Return CType(Me(Me.tablePlanilla.EducacionPllaColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EducacionPlla' de la tabla 'Planilla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePlanilla.EducacionPllaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property MovilidadPlla() As Decimal
        Get
            Try
                Return CType(Me(Me.tablePlanilla.MovilidadPllaColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MovilidadPlla' de la tabla 'Planilla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePlanilla.MovilidadPllaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property AlimentosPlla() As Decimal
        Get
            Try
                Return CType(Me(Me.tablePlanilla.AlimentosPllaColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AlimentosPlla' de la tabla 'Planilla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePlanilla.AlimentosPllaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property GratificacionPlla() As Decimal
        Get
            Try
                Return CType(Me(Me.tablePlanilla.GratificacionPllaColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'GratificacionPlla' de la tabla 'Planilla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePlanilla.GratificacionPllaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CtsPlla() As Decimal
        Get
            Try
                Return CType(Me(Me.tablePlanilla.CtsPllaColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CtsPlla' de la tabla 'Planilla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePlanilla.CtsPllaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ESSaludPlla() As Decimal
        Get
            Try
                Return CType(Me(Me.tablePlanilla.ESSaludPllaColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ESSaludPlla' de la tabla 'Planilla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePlanilla.ESSaludPllaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property BonoExtraPlla() As Decimal
        Get
            Try
                Return CType(Me(Me.tablePlanilla.BonoExtraPllaColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'BonoExtraPlla' de la tabla 'Planilla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePlanilla.BonoExtraPllaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property AfectoPlla() As String
        Get
            Try
                Return CType(Me(Me.tablePlanilla.AfectoPllaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AfectoPlla' de la tabla 'Planilla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePlanilla.AfectoPllaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Renta4taPlla() As Decimal
        Get
            Try
                Return CType(Me(Me.tablePlanilla.Renta4taPllaColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Renta4taPlla' de la tabla 'Planilla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePlanilla.Renta4taPllaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property VacacionesPlla() As Decimal
        Get
            Try
                Return CType(Me(Me.tablePlanilla.VacacionesPllaColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VacacionesPlla' de la tabla 'Planilla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePlanilla.VacacionesPllaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property TotalPlla() As Decimal
        Get
            Try
                Return CType(Me(Me.tablePlanilla.TotalPllaColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TotalPlla' de la tabla 'Planilla' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePlanilla.TotalPllaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoPersonalNull() As Boolean
        Return Me.IsNull(Me.tablePlanilla.CodigoPersonalColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoPersonalNull()
        Me(Me.tablePlanilla.CodigoPersonalColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreCompletoPersonalNull() As Boolean
        Return Me.IsNull(Me.tablePlanilla.NombreCompletoPersonalColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreCompletoPersonalNull()
        Me(Me.tablePlanilla.NombreCompletoPersonalColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoContratacionNull() As Boolean
        Return Me.IsNull(Me.tablePlanilla.CodigoContratacionColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoContratacionNull()
        Me(Me.tablePlanilla.CodigoContratacionColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreContratacionNull() As Boolean
        Return Me.IsNull(Me.tablePlanilla.NombreContratacionColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreContratacionNull()
        Me(Me.tablePlanilla.NombreContratacionColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsAnoPllaNull() As Boolean
        Return Me.IsNull(Me.tablePlanilla.AnoPllaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetAnoPllaNull()
        Me(Me.tablePlanilla.AnoPllaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsMesPllaNull() As Boolean
        Return Me.IsNull(Me.tablePlanilla.MesPllaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetMesPllaNull()
        Me(Me.tablePlanilla.MesPllaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreMesNull() As Boolean
        Return Me.IsNull(Me.tablePlanilla.NombreMesColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreMesNull()
        Me(Me.tablePlanilla.NombreMesColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsBasicoPllaNull() As Boolean
        Return Me.IsNull(Me.tablePlanilla.BasicoPllaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetBasicoPllaNull()
        Me(Me.tablePlanilla.BasicoPllaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsComisionVentaPllaNull() As Boolean
        Return Me.IsNull(Me.tablePlanilla.ComisionVentaPllaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetComisionVentaPllaNull()
        Me(Me.tablePlanilla.ComisionVentaPllaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsHorasExtrasPllaNull() As Boolean
        Return Me.IsNull(Me.tablePlanilla.HorasExtrasPllaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetHorasExtrasPllaNull()
        Me(Me.tablePlanilla.HorasExtrasPllaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsAsigFamiliarPllaNull() As Boolean
        Return Me.IsNull(Me.tablePlanilla.AsigFamiliarPllaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetAsigFamiliarPllaNull()
        Me(Me.tablePlanilla.AsigFamiliarPllaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsDL26504PllaNull() As Boolean
        Return Me.IsNull(Me.tablePlanilla.DL26504PllaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetDL26504PllaNull()
        Me(Me.tablePlanilla.DL26504PllaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsEducacionPllaNull() As Boolean
        Return Me.IsNull(Me.tablePlanilla.EducacionPllaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetEducacionPllaNull()
        Me(Me.tablePlanilla.EducacionPllaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsMovilidadPllaNull() As Boolean
        Return Me.IsNull(Me.tablePlanilla.MovilidadPllaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetMovilidadPllaNull()
        Me(Me.tablePlanilla.MovilidadPllaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsAlimentosPllaNull() As Boolean
        Return Me.IsNull(Me.tablePlanilla.AlimentosPllaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetAlimentosPllaNull()
        Me(Me.tablePlanilla.AlimentosPllaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsGratificacionPllaNull() As Boolean
        Return Me.IsNull(Me.tablePlanilla.GratificacionPllaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetGratificacionPllaNull()
        Me(Me.tablePlanilla.GratificacionPllaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCtsPllaNull() As Boolean
        Return Me.IsNull(Me.tablePlanilla.CtsPllaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCtsPllaNull()
        Me(Me.tablePlanilla.CtsPllaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsESSaludPllaNull() As Boolean
        Return Me.IsNull(Me.tablePlanilla.ESSaludPllaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetESSaludPllaNull()
        Me(Me.tablePlanilla.ESSaludPllaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsBonoExtraPllaNull() As Boolean
        Return Me.IsNull(Me.tablePlanilla.BonoExtraPllaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetBonoExtraPllaNull()
        Me(Me.tablePlanilla.BonoExtraPllaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsAfectoPllaNull() As Boolean
        Return Me.IsNull(Me.tablePlanilla.AfectoPllaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetAfectoPllaNull()
        Me(Me.tablePlanilla.AfectoPllaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsRenta4taPllaNull() As Boolean
        Return Me.IsNull(Me.tablePlanilla.Renta4taPllaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetRenta4taPllaNull()
        Me(Me.tablePlanilla.Renta4taPllaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsVacacionesPllaNull() As Boolean
        Return Me.IsNull(Me.tablePlanilla.VacacionesPllaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetVacacionesPllaNull()
        Me(Me.tablePlanilla.VacacionesPllaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsTotalPllaNull() As Boolean
        Return Me.IsNull(Me.tablePlanilla.TotalPllaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetTotalPllaNull()
        Me(Me.tablePlanilla.TotalPllaColumn) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class VistaSaldosRow
    Inherits Global.System.Data.DataRow

    Private tableVistaSaldos As VistaSaldosDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tableVistaSaldos = CType(Me.Table, VistaSaldosDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Mes() As String
        Get
            Try
                Return CType(Me(Me.tableVistaSaldos.MesColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Mes' de la tabla 'VistaSaldos' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableVistaSaldos.MesColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Debe() As String
        Get
            Try
                Return CType(Me(Me.tableVistaSaldos.DebeColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Debe' de la tabla 'VistaSaldos' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableVistaSaldos.DebeColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Haber() As String
        Get
            Try
                Return CType(Me(Me.tableVistaSaldos.HaberColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Haber' de la tabla 'VistaSaldos' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableVistaSaldos.HaberColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Saldo() As String
        Get
            Try
                Return CType(Me(Me.tableVistaSaldos.SaldoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Saldo' de la tabla 'VistaSaldos' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableVistaSaldos.SaldoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Mayor() As String
        Get
            Try
                Return CType(Me(Me.tableVistaSaldos.MayorColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Mayor' de la tabla 'VistaSaldos' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableVistaSaldos.MayorColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsMesNull() As Boolean
        Return Me.IsNull(Me.tableVistaSaldos.MesColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetMesNull()
        Me(Me.tableVistaSaldos.MesColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsDebeNull() As Boolean
        Return Me.IsNull(Me.tableVistaSaldos.DebeColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetDebeNull()
        Me(Me.tableVistaSaldos.DebeColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsHaberNull() As Boolean
        Return Me.IsNull(Me.tableVistaSaldos.HaberColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetHaberNull()
        Me(Me.tableVistaSaldos.HaberColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsSaldoNull() As Boolean
        Return Me.IsNull(Me.tableVistaSaldos.SaldoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetSaldoNull()
        Me(Me.tableVistaSaldos.SaldoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsMayorNull() As Boolean
        Return Me.IsNull(Me.tableVistaSaldos.MayorColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetMayorNull()
        Me(Me.tableVistaSaldos.MayorColumn) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class SaldosADigitosRow
    Inherits Global.System.Data.DataRow

    Private tableSaldosADigitos As SaldosADigitosDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tableSaldosADigitos = CType(Me.Table, SaldosADigitosDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta() As String
        Get
            Try
                Return CType(Me(Me.tableSaldosADigitos.CuentaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta' de la tabla 'SaldosADigitos' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableSaldosADigitos.CuentaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Descripcion() As String
        Get
            Try
                Return CType(Me(Me.tableSaldosADigitos.DescripcionColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Descripcion' de la tabla 'SaldosADigitos' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableSaldosADigitos.DescripcionColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property DebeMes() As Decimal
        Get
            Try
                Return CType(Me(Me.tableSaldosADigitos.DebeMesColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DebeMes' de la tabla 'SaldosADigitos' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableSaldosADigitos.DebeMesColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property HabeMes() As Decimal
        Get
            Try
                Return CType(Me(Me.tableSaldosADigitos.HabeMesColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'HabeMes' de la tabla 'SaldosADigitos' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableSaldosADigitos.HabeMesColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property DebeAcu() As Decimal
        Get
            Try
                Return CType(Me(Me.tableSaldosADigitos.DebeAcuColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DebeAcu' de la tabla 'SaldosADigitos' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableSaldosADigitos.DebeAcuColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property HabeAcu() As Decimal
        Get
            Try
                Return CType(Me(Me.tableSaldosADigitos.HabeAcuColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'HabeAcu' de la tabla 'SaldosADigitos' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableSaldosADigitos.HabeAcuColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property SumaDebe() As Decimal
        Get
            Try
                Return CType(Me(Me.tableSaldosADigitos.SumaDebeColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SumaDebe' de la tabla 'SaldosADigitos' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableSaldosADigitos.SumaDebeColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property SumaHaber() As Decimal
        Get
            Try
                Return CType(Me(Me.tableSaldosADigitos.SumaHaberColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SumaHaber' de la tabla 'SaldosADigitos' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableSaldosADigitos.SumaHaberColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuentaNull() As Boolean
        Return Me.IsNull(Me.tableSaldosADigitos.CuentaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuentaNull()
        Me(Me.tableSaldosADigitos.CuentaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsDescripcionNull() As Boolean
        Return Me.IsNull(Me.tableSaldosADigitos.DescripcionColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetDescripcionNull()
        Me(Me.tableSaldosADigitos.DescripcionColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsDebeMesNull() As Boolean
        Return Me.IsNull(Me.tableSaldosADigitos.DebeMesColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetDebeMesNull()
        Me(Me.tableSaldosADigitos.DebeMesColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsHabeMesNull() As Boolean
        Return Me.IsNull(Me.tableSaldosADigitos.HabeMesColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetHabeMesNull()
        Me(Me.tableSaldosADigitos.HabeMesColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsDebeAcuNull() As Boolean
        Return Me.IsNull(Me.tableSaldosADigitos.DebeAcuColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetDebeAcuNull()
        Me(Me.tableSaldosADigitos.DebeAcuColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsHabeAcuNull() As Boolean
        Return Me.IsNull(Me.tableSaldosADigitos.HabeAcuColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetHabeAcuNull()
        Me(Me.tableSaldosADigitos.HabeAcuColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsSumaDebeNull() As Boolean
        Return Me.IsNull(Me.tableSaldosADigitos.SumaDebeColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetSumaDebeNull()
        Me(Me.tableSaldosADigitos.SumaDebeColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsSumaHaberNull() As Boolean
        Return Me.IsNull(Me.tableSaldosADigitos.SumaHaberColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetSumaHaberNull()
        Me(Me.tableSaldosADigitos.SumaHaberColumn) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class MovimientoDetalleRow
    Inherits Global.System.Data.DataRow

    Private tableMovimientoDetalle As MovimientoDetalleDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tableMovimientoDetalle = CType(Me.Table, MovimientoDetalleDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoEmpresa() As String
        Get
            Try
                Return CType(Me(Me.tableMovimientoDetalle.CodigoEmpresaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoEmpresa' de la tabla 'MovimientoDetalle' es DBNull." &
                            "", e)
            End Try
        End Get
        Set
            Me(Me.tableMovimientoDetalle.CodigoEmpresaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property RazonSocialEmpresa() As String
        Get
            Try
                Return CType(Me(Me.tableMovimientoDetalle.RazonSocialEmpresaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RazonSocialEmpresa' de la tabla 'MovimientoDetalle' es DB" &
                            "Null.", e)
            End Try
        End Get
        Set
            Me(Me.tableMovimientoDetalle.RazonSocialEmpresaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property PeriodoRegContabCabe() As String
        Get
            Try
                Return CType(Me(Me.tableMovimientoDetalle.PeriodoRegContabCabeColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PeriodoRegContabCabe' de la tabla 'MovimientoDetalle' es " &
                            "DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableMovimientoDetalle.PeriodoRegContabCabeColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoCuentaPcge() As String
        Get
            Try
                Return CType(Me(Me.tableMovimientoDetalle.CodigoCuentaPcgeColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoCuentaPcge' de la tabla 'MovimientoDetalle' es DBNu" &
                            "ll.", e)
            End Try
        End Get
        Set
            Me(Me.tableMovimientoDetalle.CodigoCuentaPcgeColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property DebeHaberRegContabDeta() As String
        Get
            Try
                Return CType(Me(Me.tableMovimientoDetalle.DebeHaberRegContabDetaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DebeHaberRegContabDeta' de la tabla 'MovimientoDetalle' e" &
                            "s DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableMovimientoDetalle.DebeHaberRegContabDetaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ImporteSRegContabDeta() As String
        Get
            Try
                Return CType(Me(Me.tableMovimientoDetalle.ImporteSRegContabDetaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImporteSRegContabDeta' de la tabla 'MovimientoDetalle' es" &
                            " DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableMovimientoDetalle.ImporteSRegContabDetaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoEmpresaNull() As Boolean
        Return Me.IsNull(Me.tableMovimientoDetalle.CodigoEmpresaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoEmpresaNull()
        Me(Me.tableMovimientoDetalle.CodigoEmpresaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsRazonSocialEmpresaNull() As Boolean
        Return Me.IsNull(Me.tableMovimientoDetalle.RazonSocialEmpresaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetRazonSocialEmpresaNull()
        Me(Me.tableMovimientoDetalle.RazonSocialEmpresaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsPeriodoRegContabCabeNull() As Boolean
        Return Me.IsNull(Me.tableMovimientoDetalle.PeriodoRegContabCabeColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetPeriodoRegContabCabeNull()
        Me(Me.tableMovimientoDetalle.PeriodoRegContabCabeColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoCuentaPcgeNull() As Boolean
        Return Me.IsNull(Me.tableMovimientoDetalle.CodigoCuentaPcgeColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoCuentaPcgeNull()
        Me(Me.tableMovimientoDetalle.CodigoCuentaPcgeColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsDebeHaberRegContabDetaNull() As Boolean
        Return Me.IsNull(Me.tableMovimientoDetalle.DebeHaberRegContabDetaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetDebeHaberRegContabDetaNull()
        Me(Me.tableMovimientoDetalle.DebeHaberRegContabDetaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsImporteSRegContabDetaNull() As Boolean
        Return Me.IsNull(Me.tableMovimientoDetalle.ImporteSRegContabDetaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetImporteSRegContabDetaNull()
        Me(Me.tableMovimientoDetalle.ImporteSRegContabDetaColumn) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class BalancesRow
    Inherits Global.System.Data.DataRow

    Private tableBalances As BalancesDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tableBalances = CType(Me.Table, BalancesDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Codigo() As String
        Get
            Try
                Return CType(Me(Me.tableBalances.CodigoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Codigo' de la tabla 'Balances' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableBalances.CodigoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta() As String
        Get
            Try
                Return CType(Me(Me.tableBalances.CuentaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta' de la tabla 'Balances' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableBalances.CuentaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property MayorDebe() As Decimal
        Get
            Try
                Return CType(Me(Me.tableBalances.MayorDebeColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MayorDebe' de la tabla 'Balances' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableBalances.MayorDebeColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property MayorHaber() As Decimal
        Get
            Try
                Return CType(Me(Me.tableBalances.MayorHaberColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MayorHaber' de la tabla 'Balances' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableBalances.MayorHaberColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property SaldoDeudor() As Decimal
        Get
            Try
                Return CType(Me(Me.tableBalances.SaldoDeudorColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SaldoDeudor' de la tabla 'Balances' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableBalances.SaldoDeudorColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property SaldoAcreedor() As Decimal
        Get
            Try
                Return CType(Me(Me.tableBalances.SaldoAcreedorColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SaldoAcreedor' de la tabla 'Balances' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableBalances.SaldoAcreedorColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property GestionDebe() As Decimal
        Get
            Try
                Return CType(Me(Me.tableBalances.GestionDebeColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'GestionDebe' de la tabla 'Balances' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableBalances.GestionDebeColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property GestionHaber() As Decimal
        Get
            Try
                Return CType(Me(Me.tableBalances.GestionHaberColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'GestionHaber' de la tabla 'Balances' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableBalances.GestionHaberColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property InvtarioActivo() As Decimal
        Get
            Try
                Return CType(Me(Me.tableBalances.InvtarioActivoColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'InvtarioActivo' de la tabla 'Balances' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableBalances.InvtarioActivoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property InvtarioPasivo() As Decimal
        Get
            Try
                Return CType(Me(Me.tableBalances.InvtarioPasivoColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'InvtarioPasivo' de la tabla 'Balances' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableBalances.InvtarioPasivoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ResultadoPerdida() As Decimal
        Get
            Try
                Return CType(Me(Me.tableBalances.ResultadoPerdidaColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ResultadoPerdida' de la tabla 'Balances' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableBalances.ResultadoPerdidaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ResultadoGanancia() As Decimal
        Get
            Try
                Return CType(Me(Me.tableBalances.ResultadoGananciaColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ResultadoGanancia' de la tabla 'Balances' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableBalances.ResultadoGananciaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Resultado1() As Decimal
        Get
            Try
                Return CType(Me(Me.tableBalances.Resultado1Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Resultado1' de la tabla 'Balances' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableBalances.Resultado1Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Resultado2() As Decimal
        Get
            Try
                Return CType(Me(Me.tableBalances.Resultado2Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Resultado2' de la tabla 'Balances' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableBalances.Resultado2Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Resultado3() As Decimal
        Get
            Try
                Return CType(Me(Me.tableBalances.Resultado3Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Resultado3' de la tabla 'Balances' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableBalances.Resultado3Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Resultado4() As Decimal
        Get
            Try
                Return CType(Me(Me.tableBalances.Resultado4Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Resultado4' de la tabla 'Balances' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableBalances.Resultado4Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuadre1() As Decimal
        Get
            Try
                Return CType(Me(Me.tableBalances.Cuadre1Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuadre1' de la tabla 'Balances' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableBalances.Cuadre1Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuadre2() As Decimal
        Get
            Try
                Return CType(Me(Me.tableBalances.Cuadre2Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuadre2' de la tabla 'Balances' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableBalances.Cuadre2Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuadre3() As Decimal
        Get
            Try
                Return CType(Me(Me.tableBalances.Cuadre3Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuadre3' de la tabla 'Balances' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableBalances.Cuadre3Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuadre4() As Decimal
        Get
            Try
                Return CType(Me(Me.tableBalances.Cuadre4Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuadre4' de la tabla 'Balances' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableBalances.Cuadre4Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoNull() As Boolean
        Return Me.IsNull(Me.tableBalances.CodigoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoNull()
        Me(Me.tableBalances.CodigoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuentaNull() As Boolean
        Return Me.IsNull(Me.tableBalances.CuentaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuentaNull()
        Me(Me.tableBalances.CuentaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsMayorDebeNull() As Boolean
        Return Me.IsNull(Me.tableBalances.MayorDebeColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetMayorDebeNull()
        Me(Me.tableBalances.MayorDebeColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsMayorHaberNull() As Boolean
        Return Me.IsNull(Me.tableBalances.MayorHaberColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetMayorHaberNull()
        Me(Me.tableBalances.MayorHaberColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsSaldoDeudorNull() As Boolean
        Return Me.IsNull(Me.tableBalances.SaldoDeudorColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetSaldoDeudorNull()
        Me(Me.tableBalances.SaldoDeudorColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsSaldoAcreedorNull() As Boolean
        Return Me.IsNull(Me.tableBalances.SaldoAcreedorColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetSaldoAcreedorNull()
        Me(Me.tableBalances.SaldoAcreedorColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsGestionDebeNull() As Boolean
        Return Me.IsNull(Me.tableBalances.GestionDebeColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetGestionDebeNull()
        Me(Me.tableBalances.GestionDebeColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsGestionHaberNull() As Boolean
        Return Me.IsNull(Me.tableBalances.GestionHaberColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetGestionHaberNull()
        Me(Me.tableBalances.GestionHaberColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsInvtarioActivoNull() As Boolean
        Return Me.IsNull(Me.tableBalances.InvtarioActivoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetInvtarioActivoNull()
        Me(Me.tableBalances.InvtarioActivoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsInvtarioPasivoNull() As Boolean
        Return Me.IsNull(Me.tableBalances.InvtarioPasivoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetInvtarioPasivoNull()
        Me(Me.tableBalances.InvtarioPasivoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsResultadoPerdidaNull() As Boolean
        Return Me.IsNull(Me.tableBalances.ResultadoPerdidaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetResultadoPerdidaNull()
        Me(Me.tableBalances.ResultadoPerdidaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsResultadoGananciaNull() As Boolean
        Return Me.IsNull(Me.tableBalances.ResultadoGananciaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetResultadoGananciaNull()
        Me(Me.tableBalances.ResultadoGananciaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsResultado1Null() As Boolean
        Return Me.IsNull(Me.tableBalances.Resultado1Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetResultado1Null()
        Me(Me.tableBalances.Resultado1Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsResultado2Null() As Boolean
        Return Me.IsNull(Me.tableBalances.Resultado2Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetResultado2Null()
        Me(Me.tableBalances.Resultado2Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsResultado3Null() As Boolean
        Return Me.IsNull(Me.tableBalances.Resultado3Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetResultado3Null()
        Me(Me.tableBalances.Resultado3Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsResultado4Null() As Boolean
        Return Me.IsNull(Me.tableBalances.Resultado4Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetResultado4Null()
        Me(Me.tableBalances.Resultado4Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuadre1Null() As Boolean
        Return Me.IsNull(Me.tableBalances.Cuadre1Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuadre1Null()
        Me(Me.tableBalances.Cuadre1Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuadre2Null() As Boolean
        Return Me.IsNull(Me.tableBalances.Cuadre2Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuadre2Null()
        Me(Me.tableBalances.Cuadre2Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuadre3Null() As Boolean
        Return Me.IsNull(Me.tableBalances.Cuadre3Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuadre3Null()
        Me(Me.tableBalances.Cuadre3Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuadre4Null() As Boolean
        Return Me.IsNull(Me.tableBalances.Cuadre4Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuadre4Null()
        Me(Me.tableBalances.Cuadre4Column) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class AnexosRow
    Inherits Global.System.Data.DataRow

    Private tableAnexos As AnexosDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tableAnexos = CType(Me.Table, AnexosDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Codigo() As String
        Get
            Try
                Return CType(Me(Me.tableAnexos.CodigoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Codigo' de la tabla 'Anexos' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableAnexos.CodigoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Descripcion() As String
        Get
            Try
                Return CType(Me(Me.tableAnexos.DescripcionColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Descripcion' de la tabla 'Anexos' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableAnexos.DescripcionColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta() As String
        Get
            Try
                Return CType(Me(Me.tableAnexos.CuentaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta' de la tabla 'Anexos' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableAnexos.CuentaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Nombre() As String
        Get
            Try
                Return CType(Me(Me.tableAnexos.NombreColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'Anexos' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableAnexos.NombreColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Importe() As Decimal
        Get
            Try
                Return CType(Me(Me.tableAnexos.ImporteColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Importe' de la tabla 'Anexos' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableAnexos.ImporteColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoNull() As Boolean
        Return Me.IsNull(Me.tableAnexos.CodigoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoNull()
        Me(Me.tableAnexos.CodigoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsDescripcionNull() As Boolean
        Return Me.IsNull(Me.tableAnexos.DescripcionColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetDescripcionNull()
        Me(Me.tableAnexos.DescripcionColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuentaNull() As Boolean
        Return Me.IsNull(Me.tableAnexos.CuentaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuentaNull()
        Me(Me.tableAnexos.CuentaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreNull() As Boolean
        Return Me.IsNull(Me.tableAnexos.NombreColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreNull()
        Me(Me.tableAnexos.NombreColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsImporteNull() As Boolean
        Return Me.IsNull(Me.tableAnexos.ImporteColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetImporteNull()
        Me(Me.tableAnexos.ImporteColumn) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class PcgeRow
    Inherits Global.System.Data.DataRow

    Private tablePcge As PcgeDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tablePcge = CType(Me.Table, PcgeDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta() As String
        Get
            Try
                Return CType(Me(Me.tablePcge.CuentaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta' de la tabla 'Pcge' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePcge.CuentaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreCuenta() As String
        Get
            Try
                Return CType(Me(Me.tablePcge.NombreCuentaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreCuenta' de la tabla 'Pcge' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePcge.NombreCuentaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property documento() As String
        Get
            Try
                Return CType(Me(Me.tablePcge.documentoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'documento' de la tabla 'Pcge' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePcge.documentoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property auxiliar() As String
        Get
            Try
                Return CType(Me(Me.tablePcge.auxiliarColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'auxiliar' de la tabla 'Pcge' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePcge.auxiliarColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property costo() As String
        Get
            Try
                Return CType(Me(Me.tablePcge.costoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'costo' de la tabla 'Pcge' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePcge.costoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property almacen() As String
        Get
            Try
                Return CType(Me(Me.tablePcge.almacenColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'almacen' de la tabla 'Pcge' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePcge.almacenColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property area() As String
        Get
            Try
                Return CType(Me(Me.tablePcge.areaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'area' de la tabla 'Pcge' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePcge.areaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property flujo() As String
        Get
            Try
                Return CType(Me(Me.tablePcge.flujoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'flujo' de la tabla 'Pcge' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePcge.flujoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property diferencia() As String
        Get
            Try
                Return CType(Me(Me.tablePcge.diferenciaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'diferencia' de la tabla 'Pcge' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePcge.diferenciaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property banco() As String
        Get
            Try
                Return CType(Me(Me.tablePcge.bancoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'banco' de la tabla 'Pcge' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePcge.bancoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property formato() As String
        Get
            Try
                Return CType(Me(Me.tablePcge.formatoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'formato' de la tabla 'Pcge' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePcge.formatoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Automatica() As String
        Get
            Try
                Return CType(Me(Me.tablePcge.AutomaticaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Automatica' de la tabla 'Pcge' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePcge.AutomaticaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Automatica1() As String
        Get
            Try
                Return CType(Me(Me.tablePcge.Automatica1Column), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Automatica1' de la tabla 'Pcge' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePcge.Automatica1Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Automatica2() As String
        Get
            Try
                Return CType(Me(Me.tablePcge.Automatica2Column), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Automatica2' de la tabla 'Pcge' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePcge.Automatica2Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NumeroDigitos() As String
        Get
            Try
                Return CType(Me(Me.tablePcge.NumeroDigitosColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroDigitos' de la tabla 'Pcge' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tablePcge.NumeroDigitosColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuentaNull() As Boolean
        Return Me.IsNull(Me.tablePcge.CuentaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuentaNull()
        Me(Me.tablePcge.CuentaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreCuentaNull() As Boolean
        Return Me.IsNull(Me.tablePcge.NombreCuentaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreCuentaNull()
        Me(Me.tablePcge.NombreCuentaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsdocumentoNull() As Boolean
        Return Me.IsNull(Me.tablePcge.documentoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetdocumentoNull()
        Me(Me.tablePcge.documentoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsauxiliarNull() As Boolean
        Return Me.IsNull(Me.tablePcge.auxiliarColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetauxiliarNull()
        Me(Me.tablePcge.auxiliarColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IscostoNull() As Boolean
        Return Me.IsNull(Me.tablePcge.costoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetcostoNull()
        Me(Me.tablePcge.costoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsalmacenNull() As Boolean
        Return Me.IsNull(Me.tablePcge.almacenColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetalmacenNull()
        Me(Me.tablePcge.almacenColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsareaNull() As Boolean
        Return Me.IsNull(Me.tablePcge.areaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetareaNull()
        Me(Me.tablePcge.areaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsflujoNull() As Boolean
        Return Me.IsNull(Me.tablePcge.flujoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetflujoNull()
        Me(Me.tablePcge.flujoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsdiferenciaNull() As Boolean
        Return Me.IsNull(Me.tablePcge.diferenciaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetdiferenciaNull()
        Me(Me.tablePcge.diferenciaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsbancoNull() As Boolean
        Return Me.IsNull(Me.tablePcge.bancoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetbancoNull()
        Me(Me.tablePcge.bancoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsformatoNull() As Boolean
        Return Me.IsNull(Me.tablePcge.formatoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetformatoNull()
        Me(Me.tablePcge.formatoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsAutomaticaNull() As Boolean
        Return Me.IsNull(Me.tablePcge.AutomaticaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetAutomaticaNull()
        Me(Me.tablePcge.AutomaticaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsAutomatica1Null() As Boolean
        Return Me.IsNull(Me.tablePcge.Automatica1Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetAutomatica1Null()
        Me(Me.tablePcge.Automatica1Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsAutomatica2Null() As Boolean
        Return Me.IsNull(Me.tablePcge.Automatica2Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetAutomatica2Null()
        Me(Me.tablePcge.Automatica2Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNumeroDigitosNull() As Boolean
        Return Me.IsNull(Me.tablePcge.NumeroDigitosColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNumeroDigitosNull()
        Me(Me.tablePcge.NumeroDigitosColumn) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class DiarioSimplificadoRow
    Inherits Global.System.Data.DataRow

    Private tableDiarioSimplificado As DiarioSimplificadoDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tableDiarioSimplificado = CType(Me.Table, DiarioSimplificadoDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Fecha() As String
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.FechaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Fecha' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.FechaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Operacion() As String
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.OperacionColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Operacion' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.OperacionColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta10() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta10Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta10' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta10Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta12() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta12Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta12' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta12Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta16() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta16Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta16' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta16Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta20() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta20Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta20' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta20Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta21() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta21Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta21' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta21Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta33() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta33Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta33' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta33Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta34() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta34Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta34' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta34Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta38() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta38Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta38' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta38Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta39() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta39Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta39' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta39Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CuentaAct() As String
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.CuentaActColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CuentaAct' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.CuentaActColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta4011D() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta4011DColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta4011D' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta4011DColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta4011C() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta4011CColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta4011C' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta4011CColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta4017D() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta4017DColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta4017D' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta4017DColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta4017C() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta4017CColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta4017C' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta4017CColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta402() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta402Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta402' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta402Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta42() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta42Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta42' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta42Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta46() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta46Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta46' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta46Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CuentaPas() As String
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.CuentaPasColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CuentaPas' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.CuentaPasColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta50() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta50Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta50' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta50Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta58() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta58Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta58' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta58Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta59() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta59Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta59' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta59Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CuentaPat() As String
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.CuentaPatColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CuentaPat' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.CuentaPatColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta60() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta60Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta60' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta60Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta61() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta61Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta61' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta61Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta62() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta62Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta62' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta62Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta63() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta63Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta63' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta63Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta65() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta65Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta65' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta65Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta66() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta66Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta66' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta66Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta67() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta67Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta67' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta67Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta68() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta68Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta68' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta68Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta69() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta69Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta69' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta69Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta96() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta96Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta96' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta96Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta97() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta97Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta97' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta97Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CuentaGas() As String
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.CuentaGasColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CuentaGas' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.CuentaGasColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta70() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta70Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta70' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta70Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta75() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta75Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta75' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta75Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta76() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta76Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta76' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta76Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta77() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta77Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta77' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta77Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta79() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.Cuenta79Column), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta79' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.Cuenta79Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CuentaIng() As String
        Get
            Try
                Return CType(Me(Me.tableDiarioSimplificado.CuentaIngColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CuentaIng' de la tabla 'DiarioSimplificado' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiarioSimplificado.CuentaIngColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsFechaNull() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.FechaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetFechaNull()
        Me(Me.tableDiarioSimplificado.FechaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsOperacionNull() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.OperacionColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetOperacionNull()
        Me(Me.tableDiarioSimplificado.OperacionColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta10Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta10Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta10Null()
        Me(Me.tableDiarioSimplificado.Cuenta10Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta12Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta12Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta12Null()
        Me(Me.tableDiarioSimplificado.Cuenta12Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta16Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta16Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta16Null()
        Me(Me.tableDiarioSimplificado.Cuenta16Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta20Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta20Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta20Null()
        Me(Me.tableDiarioSimplificado.Cuenta20Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta21Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta21Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta21Null()
        Me(Me.tableDiarioSimplificado.Cuenta21Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta33Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta33Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta33Null()
        Me(Me.tableDiarioSimplificado.Cuenta33Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta34Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta34Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta34Null()
        Me(Me.tableDiarioSimplificado.Cuenta34Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta38Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta38Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta38Null()
        Me(Me.tableDiarioSimplificado.Cuenta38Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta39Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta39Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta39Null()
        Me(Me.tableDiarioSimplificado.Cuenta39Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuentaActNull() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.CuentaActColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuentaActNull()
        Me(Me.tableDiarioSimplificado.CuentaActColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta4011DNull() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta4011DColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta4011DNull()
        Me(Me.tableDiarioSimplificado.Cuenta4011DColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta4011CNull() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta4011CColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta4011CNull()
        Me(Me.tableDiarioSimplificado.Cuenta4011CColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta4017DNull() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta4017DColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta4017DNull()
        Me(Me.tableDiarioSimplificado.Cuenta4017DColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta4017CNull() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta4017CColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta4017CNull()
        Me(Me.tableDiarioSimplificado.Cuenta4017CColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta402Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta402Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta402Null()
        Me(Me.tableDiarioSimplificado.Cuenta402Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta42Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta42Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta42Null()
        Me(Me.tableDiarioSimplificado.Cuenta42Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta46Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta46Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta46Null()
        Me(Me.tableDiarioSimplificado.Cuenta46Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuentaPasNull() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.CuentaPasColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuentaPasNull()
        Me(Me.tableDiarioSimplificado.CuentaPasColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta50Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta50Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta50Null()
        Me(Me.tableDiarioSimplificado.Cuenta50Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta58Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta58Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta58Null()
        Me(Me.tableDiarioSimplificado.Cuenta58Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta59Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta59Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta59Null()
        Me(Me.tableDiarioSimplificado.Cuenta59Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuentaPatNull() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.CuentaPatColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuentaPatNull()
        Me(Me.tableDiarioSimplificado.CuentaPatColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta60Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta60Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta60Null()
        Me(Me.tableDiarioSimplificado.Cuenta60Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta61Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta61Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta61Null()
        Me(Me.tableDiarioSimplificado.Cuenta61Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta62Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta62Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta62Null()
        Me(Me.tableDiarioSimplificado.Cuenta62Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta63Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta63Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta63Null()
        Me(Me.tableDiarioSimplificado.Cuenta63Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta65Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta65Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta65Null()
        Me(Me.tableDiarioSimplificado.Cuenta65Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta66Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta66Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta66Null()
        Me(Me.tableDiarioSimplificado.Cuenta66Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta67Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta67Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta67Null()
        Me(Me.tableDiarioSimplificado.Cuenta67Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta68Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta68Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta68Null()
        Me(Me.tableDiarioSimplificado.Cuenta68Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta69Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta69Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta69Null()
        Me(Me.tableDiarioSimplificado.Cuenta69Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta96Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta96Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta96Null()
        Me(Me.tableDiarioSimplificado.Cuenta96Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta97Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta97Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta97Null()
        Me(Me.tableDiarioSimplificado.Cuenta97Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuentaGasNull() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.CuentaGasColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuentaGasNull()
        Me(Me.tableDiarioSimplificado.CuentaGasColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta70Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta70Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta70Null()
        Me(Me.tableDiarioSimplificado.Cuenta70Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta75Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta75Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta75Null()
        Me(Me.tableDiarioSimplificado.Cuenta75Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta76Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta76Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta76Null()
        Me(Me.tableDiarioSimplificado.Cuenta76Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta77Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta77Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta77Null()
        Me(Me.tableDiarioSimplificado.Cuenta77Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuenta79Null() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.Cuenta79Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuenta79Null()
        Me(Me.tableDiarioSimplificado.Cuenta79Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuentaIngNull() As Boolean
        Return Me.IsNull(Me.tableDiarioSimplificado.CuentaIngColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuentaIngNull()
        Me(Me.tableDiarioSimplificado.CuentaIngColumn) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class FormatoContableRow
    Inherits Global.System.Data.DataRow

    Private tableFormatoContable As FormatoContableDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tableFormatoContable = CType(Me.Table, FormatoContableDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoFC() As String
        Get
            Try
                Return CType(Me(Me.tableFormatoContable.CodigoFCColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoFC' de la tabla 'FormatoContable' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableFormatoContable.CodigoFCColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property DescripcionFC() As String
        Get
            Try
                Return CType(Me(Me.tableFormatoContable.DescripcionFCColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DescripcionFC' de la tabla 'FormatoContable' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableFormatoContable.DescripcionFCColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property GrupoFC() As String
        Get
            Try
                Return CType(Me(Me.tableFormatoContable.GrupoFCColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'GrupoFC' de la tabla 'FormatoContable' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableFormatoContable.GrupoFCColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreGrupoFC() As String
        Get
            Try
                Return CType(Me(Me.tableFormatoContable.NombreGrupoFCColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreGrupoFC' de la tabla 'FormatoContable' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableFormatoContable.NombreGrupoFCColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ImporteSoles() As Decimal
        Get
            Try
                Return CType(Me(Me.tableFormatoContable.ImporteSolesColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImporteSoles' de la tabla 'FormatoContable' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableFormatoContable.ImporteSolesColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ImporteDolares() As Decimal
        Get
            Try
                Return CType(Me(Me.tableFormatoContable.ImporteDolaresColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImporteDolares' de la tabla 'FormatoContable' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableFormatoContable.ImporteDolaresColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ImporteEuros() As Decimal
        Get
            Try
                Return CType(Me(Me.tableFormatoContable.ImporteEurosColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImporteEuros' de la tabla 'FormatoContable' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableFormatoContable.ImporteEurosColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoFCNull() As Boolean
        Return Me.IsNull(Me.tableFormatoContable.CodigoFCColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoFCNull()
        Me(Me.tableFormatoContable.CodigoFCColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsDescripcionFCNull() As Boolean
        Return Me.IsNull(Me.tableFormatoContable.DescripcionFCColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetDescripcionFCNull()
        Me(Me.tableFormatoContable.DescripcionFCColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsGrupoFCNull() As Boolean
        Return Me.IsNull(Me.tableFormatoContable.GrupoFCColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetGrupoFCNull()
        Me(Me.tableFormatoContable.GrupoFCColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreGrupoFCNull() As Boolean
        Return Me.IsNull(Me.tableFormatoContable.NombreGrupoFCColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreGrupoFCNull()
        Me(Me.tableFormatoContable.NombreGrupoFCColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsImporteSolesNull() As Boolean
        Return Me.IsNull(Me.tableFormatoContable.ImporteSolesColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetImporteSolesNull()
        Me(Me.tableFormatoContable.ImporteSolesColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsImporteDolaresNull() As Boolean
        Return Me.IsNull(Me.tableFormatoContable.ImporteDolaresColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetImporteDolaresNull()
        Me(Me.tableFormatoContable.ImporteDolaresColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsImporteEurosNull() As Boolean
        Return Me.IsNull(Me.tableFormatoContable.ImporteEurosColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetImporteEurosNull()
        Me(Me.tableFormatoContable.ImporteEurosColumn) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class BalanceGeneralRow
    Inherits Global.System.Data.DataRow

    Private tableBalanceGeneral As BalanceGeneralDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tableBalanceGeneral = CType(Me.Table, BalanceGeneralDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreActivo() As String
        Get
            Try
                Return CType(Me(Me.tableBalanceGeneral.NombreActivoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreActivo' de la tabla 'BalanceGeneral' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableBalanceGeneral.NombreActivoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property MontoActivo() As String
        Get
            Try
                Return CType(Me(Me.tableBalanceGeneral.MontoActivoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MontoActivo' de la tabla 'BalanceGeneral' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableBalanceGeneral.MontoActivoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombrePasivo() As String
        Get
            Try
                Return CType(Me(Me.tableBalanceGeneral.NombrePasivoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombrePasivo' de la tabla 'BalanceGeneral' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableBalanceGeneral.NombrePasivoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property MontoPasivo() As String
        Get
            Try
                Return CType(Me(Me.tableBalanceGeneral.MontoPasivoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MontoPasivo' de la tabla 'BalanceGeneral' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableBalanceGeneral.MontoPasivoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreActivoNull() As Boolean
        Return Me.IsNull(Me.tableBalanceGeneral.NombreActivoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreActivoNull()
        Me(Me.tableBalanceGeneral.NombreActivoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsMontoActivoNull() As Boolean
        Return Me.IsNull(Me.tableBalanceGeneral.MontoActivoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetMontoActivoNull()
        Me(Me.tableBalanceGeneral.MontoActivoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombrePasivoNull() As Boolean
        Return Me.IsNull(Me.tableBalanceGeneral.NombrePasivoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombrePasivoNull()
        Me(Me.tableBalanceGeneral.NombrePasivoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsMontoPasivoNull() As Boolean
        Return Me.IsNull(Me.tableBalanceGeneral.MontoPasivoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetMontoPasivoNull()
        Me(Me.tableBalanceGeneral.MontoPasivoColumn) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class GananciaPerdidaRow
    Inherits Global.System.Data.DataRow

    Private tableGananciaPerdida As GananciaPerdidaDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tableGananciaPerdida = CType(Me.Table, GananciaPerdidaDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Codigo() As String
        Get
            Try
                Return CType(Me(Me.tableGananciaPerdida.CodigoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Codigo' de la tabla 'GananciaPerdida' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGananciaPerdida.CodigoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Nombre() As String
        Get
            Try
                Return CType(Me(Me.tableGananciaPerdida.NombreColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'GananciaPerdida' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGananciaPerdida.NombreColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property MontoMes() As String
        Get
            Try
                Return CType(Me(Me.tableGananciaPerdida.MontoMesColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MontoMes' de la tabla 'GananciaPerdida' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGananciaPerdida.MontoMesColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property MontoAcumulado() As String
        Get
            Try
                Return CType(Me(Me.tableGananciaPerdida.MontoAcumuladoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MontoAcumulado' de la tabla 'GananciaPerdida' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGananciaPerdida.MontoAcumuladoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoNull() As Boolean
        Return Me.IsNull(Me.tableGananciaPerdida.CodigoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoNull()
        Me(Me.tableGananciaPerdida.CodigoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreNull() As Boolean
        Return Me.IsNull(Me.tableGananciaPerdida.NombreColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreNull()
        Me(Me.tableGananciaPerdida.NombreColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsMontoMesNull() As Boolean
        Return Me.IsNull(Me.tableGananciaPerdida.MontoMesColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetMontoMesNull()
        Me(Me.tableGananciaPerdida.MontoMesColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsMontoAcumuladoNull() As Boolean
        Return Me.IsNull(Me.tableGananciaPerdida.MontoAcumuladoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetMontoAcumuladoNull()
        Me(Me.tableGananciaPerdida.MontoAcumuladoColumn) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class GananciaPerdida1Row
    Inherits Global.System.Data.DataRow

    Private tableGananciaPerdida1 As GananciaPerdida1DataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tableGananciaPerdida1 = CType(Me.Table, GananciaPerdida1DataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Codigo() As String
        Get
            Try
                Return CType(Me(Me.tableGananciaPerdida1.CodigoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Codigo' de la tabla 'GananciaPerdida1' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGananciaPerdida1.CodigoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Nombre() As String
        Get
            Try
                Return CType(Me(Me.tableGananciaPerdida1.NombreColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'GananciaPerdida1' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGananciaPerdida1.NombreColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property MontoMes() As String
        Get
            Try
                Return CType(Me(Me.tableGananciaPerdida1.MontoMesColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MontoMes' de la tabla 'GananciaPerdida1' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGananciaPerdida1.MontoMesColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property MontoAcumulado() As String
        Get
            Try
                Return CType(Me(Me.tableGananciaPerdida1.MontoAcumuladoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MontoAcumulado' de la tabla 'GananciaPerdida1' es DBNull." &
                            "", e)
            End Try
        End Get
        Set
            Me(Me.tableGananciaPerdida1.MontoAcumuladoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoNull() As Boolean
        Return Me.IsNull(Me.tableGananciaPerdida1.CodigoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoNull()
        Me(Me.tableGananciaPerdida1.CodigoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreNull() As Boolean
        Return Me.IsNull(Me.tableGananciaPerdida1.NombreColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreNull()
        Me(Me.tableGananciaPerdida1.NombreColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsMontoMesNull() As Boolean
        Return Me.IsNull(Me.tableGananciaPerdida1.MontoMesColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetMontoMesNull()
        Me(Me.tableGananciaPerdida1.MontoMesColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsMontoAcumuladoNull() As Boolean
        Return Me.IsNull(Me.tableGananciaPerdida1.MontoAcumuladoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetMontoAcumuladoNull()
        Me(Me.tableGananciaPerdida1.MontoAcumuladoColumn) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class SaldoBancoRow
    Inherits Global.System.Data.DataRow

    Private tableSaldoBanco As SaldoBancoDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tableSaldoBanco = CType(Me.Table, SaldoBancoDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Codigo() As String
        Get
            Try
                Return CType(Me(Me.tableSaldoBanco.CodigoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Codigo' de la tabla 'SaldoBanco' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableSaldoBanco.CodigoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Banco() As String
        Get
            Try
                Return CType(Me(Me.tableSaldoBanco.BancoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Banco' de la tabla 'SaldoBanco' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableSaldoBanco.BancoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cuenta() As String
        Get
            Try
                Return CType(Me(Me.tableSaldoBanco.CuentaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cuenta' de la tabla 'SaldoBanco' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableSaldoBanco.CuentaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Moneda() As String
        Get
            Try
                Return CType(Me(Me.tableSaldoBanco.MonedaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Moneda' de la tabla 'SaldoBanco' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableSaldoBanco.MonedaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Saldo() As Decimal
        Get
            Try
                Return CType(Me(Me.tableSaldoBanco.SaldoColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Saldo' de la tabla 'SaldoBanco' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableSaldoBanco.SaldoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property TipoCuenta() As String
        Get
            Try
                Return CType(Me(Me.tableSaldoBanco.TipoCuentaColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoCuenta' de la tabla 'SaldoBanco' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableSaldoBanco.TipoCuentaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoNull() As Boolean
        Return Me.IsNull(Me.tableSaldoBanco.CodigoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoNull()
        Me(Me.tableSaldoBanco.CodigoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsBancoNull() As Boolean
        Return Me.IsNull(Me.tableSaldoBanco.BancoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetBancoNull()
        Me(Me.tableSaldoBanco.BancoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCuentaNull() As Boolean
        Return Me.IsNull(Me.tableSaldoBanco.CuentaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCuentaNull()
        Me(Me.tableSaldoBanco.CuentaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsMonedaNull() As Boolean
        Return Me.IsNull(Me.tableSaldoBanco.MonedaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetMonedaNull()
        Me(Me.tableSaldoBanco.MonedaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsSaldoNull() As Boolean
        Return Me.IsNull(Me.tableSaldoBanco.SaldoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetSaldoNull()
        Me(Me.tableSaldoBanco.SaldoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsTipoCuentaNull() As Boolean
        Return Me.IsNull(Me.tableSaldoBanco.TipoCuentaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetTipoCuentaNull()
        Me(Me.tableSaldoBanco.TipoCuentaColumn) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class FlujoCajaRow
    Inherits Global.System.Data.DataRow

    Private tableFlujoCaja As FlujoCajaDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tableFlujoCaja = CType(Me.Table, FlujoCajaDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Codigo() As String
        Get
            Try
                Return CType(Me(Me.tableFlujoCaja.CodigoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Codigo' de la tabla 'FlujoCaja' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableFlujoCaja.CodigoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Nombre() As String
        Get
            Try
                Return CType(Me(Me.tableFlujoCaja.NombreColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'FlujoCaja' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableFlujoCaja.NombreColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property IngresoSles() As Decimal
        Get
            Try
                Return CType(Me(Me.tableFlujoCaja.IngresoSlesColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IngresoSles' de la tabla 'FlujoCaja' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableFlujoCaja.IngresoSlesColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property EgresosSoles() As Decimal
        Get
            Try
                Return CType(Me(Me.tableFlujoCaja.EgresosSolesColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EgresosSoles' de la tabla 'FlujoCaja' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableFlujoCaja.EgresosSolesColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property IngresoDolares() As Decimal
        Get
            Try
                Return CType(Me(Me.tableFlujoCaja.IngresoDolaresColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IngresoDolares' de la tabla 'FlujoCaja' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableFlujoCaja.IngresoDolaresColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property EgresosDolares() As Decimal
        Get
            Try
                Return CType(Me(Me.tableFlujoCaja.EgresosDolaresColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EgresosDolares' de la tabla 'FlujoCaja' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableFlujoCaja.EgresosDolaresColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cantidad() As Decimal
        Get
            Try
                Return CType(Me(Me.tableFlujoCaja.CantidadColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cantidad' de la tabla 'FlujoCaja' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableFlujoCaja.CantidadColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Unidad() As String
        Get
            Try
                Return CType(Me(Me.tableFlujoCaja.UnidadColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Unidad' de la tabla 'FlujoCaja' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableFlujoCaja.UnidadColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Numero() As Decimal
        Get
            Try
                Return CType(Me(Me.tableFlujoCaja.NumeroColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Numero' de la tabla 'FlujoCaja' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableFlujoCaja.NumeroColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoNull() As Boolean
        Return Me.IsNull(Me.tableFlujoCaja.CodigoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoNull()
        Me(Me.tableFlujoCaja.CodigoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreNull() As Boolean
        Return Me.IsNull(Me.tableFlujoCaja.NombreColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreNull()
        Me(Me.tableFlujoCaja.NombreColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsIngresoSlesNull() As Boolean
        Return Me.IsNull(Me.tableFlujoCaja.IngresoSlesColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetIngresoSlesNull()
        Me(Me.tableFlujoCaja.IngresoSlesColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsEgresosSolesNull() As Boolean
        Return Me.IsNull(Me.tableFlujoCaja.EgresosSolesColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetEgresosSolesNull()
        Me(Me.tableFlujoCaja.EgresosSolesColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsIngresoDolaresNull() As Boolean
        Return Me.IsNull(Me.tableFlujoCaja.IngresoDolaresColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetIngresoDolaresNull()
        Me(Me.tableFlujoCaja.IngresoDolaresColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsEgresosDolaresNull() As Boolean
        Return Me.IsNull(Me.tableFlujoCaja.EgresosDolaresColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetEgresosDolaresNull()
        Me(Me.tableFlujoCaja.EgresosDolaresColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCantidadNull() As Boolean
        Return Me.IsNull(Me.tableFlujoCaja.CantidadColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCantidadNull()
        Me(Me.tableFlujoCaja.CantidadColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsUnidadNull() As Boolean
        Return Me.IsNull(Me.tableFlujoCaja.UnidadColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetUnidadNull()
        Me(Me.tableFlujoCaja.UnidadColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNumeroNull() As Boolean
        Return Me.IsNull(Me.tableFlujoCaja.NumeroColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNumeroNull()
        Me(Me.tableFlujoCaja.NumeroColumn) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class GastoRow
    Inherits Global.System.Data.DataRow

    Private tableGasto As GastoDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tableGasto = CType(Me.Table, GastoDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Codigo1() As String
        Get
            Try
                Return CType(Me(Me.tableGasto.Codigo1Column), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Codigo1' de la tabla 'Gasto' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGasto.Codigo1Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Nombre1() As String
        Get
            Try
                Return CType(Me(Me.tableGasto.Nombre1Column), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre1' de la tabla 'Gasto' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGasto.Nombre1Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Codigo2() As String
        Get
            Try
                Return CType(Me(Me.tableGasto.Codigo2Column), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Codigo2' de la tabla 'Gasto' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGasto.Codigo2Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Nombre2() As String
        Get
            Try
                Return CType(Me(Me.tableGasto.Nombre2Column), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre2' de la tabla 'Gasto' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGasto.Nombre2Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Cargo() As Decimal
        Get
            Try
                Return CType(Me(Me.tableGasto.CargoColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cargo' de la tabla 'Gasto' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGasto.CargoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Abono() As Decimal
        Get
            Try
                Return CType(Me(Me.tableGasto.AbonoColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Abono' de la tabla 'Gasto' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGasto.AbonoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Saldo() As Decimal
        Get
            Try
                Return CType(Me(Me.tableGasto.SaldoColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Saldo' de la tabla 'Gasto' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGasto.SaldoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigo1Null() As Boolean
        Return Me.IsNull(Me.tableGasto.Codigo1Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigo1Null()
        Me(Me.tableGasto.Codigo1Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombre1Null() As Boolean
        Return Me.IsNull(Me.tableGasto.Nombre1Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombre1Null()
        Me(Me.tableGasto.Nombre1Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigo2Null() As Boolean
        Return Me.IsNull(Me.tableGasto.Codigo2Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigo2Null()
        Me(Me.tableGasto.Codigo2Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombre2Null() As Boolean
        Return Me.IsNull(Me.tableGasto.Nombre2Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombre2Null()
        Me(Me.tableGasto.Nombre2Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCargoNull() As Boolean
        Return Me.IsNull(Me.tableGasto.CargoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCargoNull()
        Me(Me.tableGasto.CargoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsAbonoNull() As Boolean
        Return Me.IsNull(Me.tableGasto.AbonoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetAbonoNull()
        Me(Me.tableGasto.AbonoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsSaldoNull() As Boolean
        Return Me.IsNull(Me.tableGasto.SaldoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetSaldoNull()
        Me(Me.tableGasto.SaldoColumn) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class DiferenciaCambioRow
    Inherits Global.System.Data.DataRow

    Private tableDiferenciaCambio As DiferenciaCambioDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tableDiferenciaCambio = CType(Me.Table, DiferenciaCambioDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoAuxiliar() As String
        Get
            Try
                Return CType(Me(Me.tableDiferenciaCambio.CodigoAuxiliarColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoAuxiliar' de la tabla 'DiferenciaCambio' es DBNull." &
                            "", e)
            End Try
        End Get
        Set
            Me(Me.tableDiferenciaCambio.CodigoAuxiliarColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NombreAuxiliar() As String
        Get
            Try
                Return CType(Me(Me.tableDiferenciaCambio.NombreAuxiliarColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreAuxiliar' de la tabla 'DiferenciaCambio' es DBNull." &
                            "", e)
            End Try
        End Get
        Set
            Me(Me.tableDiferenciaCambio.NombreAuxiliarColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NumeroDocumento() As String
        Get
            Try
                Return CType(Me(Me.tableDiferenciaCambio.NumeroDocumentoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroDocumento' de la tabla 'DiferenciaCambio' es DBNull" &
                            ".", e)
            End Try
        End Get
        Set
            Me(Me.tableDiferenciaCambio.NumeroDocumentoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property FechaDocumento() As Date
        Get
            Try
                Return CType(Me(Me.tableDiferenciaCambio.FechaDocumentoColumn), Date)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaDocumento' de la tabla 'DiferenciaCambio' es DBNull." &
                            "", e)
            End Try
        End Get
        Set
            Me(Me.tableDiferenciaCambio.FechaDocumentoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property CodigoCuentaPcge() As String
        Get
            Try
                Return CType(Me(Me.tableDiferenciaCambio.CodigoCuentaPcgeColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CodigoCuentaPcge' de la tabla 'DiferenciaCambio' es DBNul" &
                            "l.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiferenciaCambio.CodigoCuentaPcgeColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property MonedaDocumento() As String
        Get
            Try
                Return CType(Me(Me.tableDiferenciaCambio.MonedaDocumentoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MonedaDocumento' de la tabla 'DiferenciaCambio' es DBNull" &
                            ".", e)
            End Try
        End Get
        Set
            Me(Me.tableDiferenciaCambio.MonedaDocumentoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ImporteDocumento() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiferenciaCambio.ImporteDocumentoColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImporteDocumento' de la tabla 'DiferenciaCambio' es DBNul" &
                            "l.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiferenciaCambio.ImporteDocumentoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property TipoCambioDocumento() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiferenciaCambio.TipoCambioDocumentoColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoCambioDocumento' de la tabla 'DiferenciaCambio' es DB" &
                            "Null.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiferenciaCambio.TipoCambioDocumentoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ImporteSolDocumento() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiferenciaCambio.ImporteSolDocumentoColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImporteSolDocumento' de la tabla 'DiferenciaCambio' es DB" &
                            "Null.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiferenciaCambio.ImporteSolDocumentoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property TipoCambioActDocumento() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiferenciaCambio.TipoCambioActDocumentoColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoCambioActDocumento' de la tabla 'DiferenciaCambio' es" &
                            " DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiferenciaCambio.TipoCambioActDocumentoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ImporteSolActDocumento() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiferenciaCambio.ImporteSolActDocumentoColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImporteSolActDocumento' de la tabla 'DiferenciaCambio' es" &
                            " DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiferenciaCambio.ImporteSolActDocumentoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ImporteDebe() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiferenciaCambio.ImporteDebeColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImporteDebe' de la tabla 'DiferenciaCambio' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiferenciaCambio.ImporteDebeColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ImporteHaber() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDiferenciaCambio.ImporteHaberColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImporteHaber' de la tabla 'DiferenciaCambio' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDiferenciaCambio.ImporteHaberColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoAuxiliarNull() As Boolean
        Return Me.IsNull(Me.tableDiferenciaCambio.CodigoAuxiliarColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoAuxiliarNull()
        Me(Me.tableDiferenciaCambio.CodigoAuxiliarColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreAuxiliarNull() As Boolean
        Return Me.IsNull(Me.tableDiferenciaCambio.NombreAuxiliarColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreAuxiliarNull()
        Me(Me.tableDiferenciaCambio.NombreAuxiliarColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNumeroDocumentoNull() As Boolean
        Return Me.IsNull(Me.tableDiferenciaCambio.NumeroDocumentoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNumeroDocumentoNull()
        Me(Me.tableDiferenciaCambio.NumeroDocumentoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsFechaDocumentoNull() As Boolean
        Return Me.IsNull(Me.tableDiferenciaCambio.FechaDocumentoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetFechaDocumentoNull()
        Me(Me.tableDiferenciaCambio.FechaDocumentoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoCuentaPcgeNull() As Boolean
        Return Me.IsNull(Me.tableDiferenciaCambio.CodigoCuentaPcgeColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoCuentaPcgeNull()
        Me(Me.tableDiferenciaCambio.CodigoCuentaPcgeColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsMonedaDocumentoNull() As Boolean
        Return Me.IsNull(Me.tableDiferenciaCambio.MonedaDocumentoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetMonedaDocumentoNull()
        Me(Me.tableDiferenciaCambio.MonedaDocumentoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsImporteDocumentoNull() As Boolean
        Return Me.IsNull(Me.tableDiferenciaCambio.ImporteDocumentoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetImporteDocumentoNull()
        Me(Me.tableDiferenciaCambio.ImporteDocumentoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsTipoCambioDocumentoNull() As Boolean
        Return Me.IsNull(Me.tableDiferenciaCambio.TipoCambioDocumentoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetTipoCambioDocumentoNull()
        Me(Me.tableDiferenciaCambio.TipoCambioDocumentoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsImporteSolDocumentoNull() As Boolean
        Return Me.IsNull(Me.tableDiferenciaCambio.ImporteSolDocumentoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetImporteSolDocumentoNull()
        Me(Me.tableDiferenciaCambio.ImporteSolDocumentoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsTipoCambioActDocumentoNull() As Boolean
        Return Me.IsNull(Me.tableDiferenciaCambio.TipoCambioActDocumentoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetTipoCambioActDocumentoNull()
        Me(Me.tableDiferenciaCambio.TipoCambioActDocumentoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsImporteSolActDocumentoNull() As Boolean
        Return Me.IsNull(Me.tableDiferenciaCambio.ImporteSolActDocumentoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetImporteSolActDocumentoNull()
        Me(Me.tableDiferenciaCambio.ImporteSolActDocumentoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsImporteDebeNull() As Boolean
        Return Me.IsNull(Me.tableDiferenciaCambio.ImporteDebeColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetImporteDebeNull()
        Me(Me.tableDiferenciaCambio.ImporteDebeColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsImporteHaberNull() As Boolean
        Return Me.IsNull(Me.tableDiferenciaCambio.ImporteHaberColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetImporteHaberNull()
        Me(Me.tableDiferenciaCambio.ImporteHaberColumn) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class GastoXMesRow
    Inherits Global.System.Data.DataRow

    Private tableGastoXMes As GastoXMesDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tableGastoXMes = CType(Me.Table, GastoXMesDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Codigo() As String
        Get
            Try
                Return CType(Me(Me.tableGastoXMes.CodigoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Codigo' de la tabla 'GastoXMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGastoXMes.CodigoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Nombre() As String
        Get
            Try
                Return CType(Me(Me.tableGastoXMes.NombreColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'GastoXMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGastoXMes.NombreColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Enero() As Decimal
        Get
            Try
                Return CType(Me(Me.tableGastoXMes.EneroColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Enero' de la tabla 'GastoXMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGastoXMes.EneroColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Febrero() As Decimal
        Get
            Try
                Return CType(Me(Me.tableGastoXMes.FebreroColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Febrero' de la tabla 'GastoXMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGastoXMes.FebreroColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Marzo() As Decimal
        Get
            Try
                Return CType(Me(Me.tableGastoXMes.MarzoColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Marzo' de la tabla 'GastoXMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGastoXMes.MarzoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Abril() As Decimal
        Get
            Try
                Return CType(Me(Me.tableGastoXMes.AbrilColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Abril' de la tabla 'GastoXMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGastoXMes.AbrilColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Mayo() As Decimal
        Get
            Try
                Return CType(Me(Me.tableGastoXMes.MayoColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Mayo' de la tabla 'GastoXMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGastoXMes.MayoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Junio() As Decimal
        Get
            Try
                Return CType(Me(Me.tableGastoXMes.JunioColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Junio' de la tabla 'GastoXMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGastoXMes.JunioColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Julio() As Decimal
        Get
            Try
                Return CType(Me(Me.tableGastoXMes.JulioColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Julio' de la tabla 'GastoXMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGastoXMes.JulioColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Agosto() As Decimal
        Get
            Try
                Return CType(Me(Me.tableGastoXMes.AgostoColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Agosto' de la tabla 'GastoXMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGastoXMes.AgostoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Setiembre() As Decimal
        Get
            Try
                Return CType(Me(Me.tableGastoXMes.SetiembreColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Setiembre' de la tabla 'GastoXMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGastoXMes.SetiembreColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Octubre() As Decimal
        Get
            Try
                Return CType(Me(Me.tableGastoXMes.OctubreColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Octubre' de la tabla 'GastoXMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGastoXMes.OctubreColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Noviembre() As Decimal
        Get
            Try
                Return CType(Me(Me.tableGastoXMes.NoviembreColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Noviembre' de la tabla 'GastoXMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGastoXMes.NoviembreColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Diciembre() As Decimal
        Get
            Try
                Return CType(Me(Me.tableGastoXMes.DiciembreColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Diciembre' de la tabla 'GastoXMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGastoXMes.DiciembreColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Total() As Decimal
        Get
            Try
                Return CType(Me(Me.tableGastoXMes.TotalColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Total' de la tabla 'GastoXMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGastoXMes.TotalColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Codigo1() As String
        Get
            Try
                Return CType(Me(Me.tableGastoXMes.Codigo1Column), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Codigo1' de la tabla 'GastoXMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGastoXMes.Codigo1Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Nombre1() As String
        Get
            Try
                Return CType(Me(Me.tableGastoXMes.Nombre1Column), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre1' de la tabla 'GastoXMes' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGastoXMes.Nombre1Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoNull() As Boolean
        Return Me.IsNull(Me.tableGastoXMes.CodigoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoNull()
        Me(Me.tableGastoXMes.CodigoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreNull() As Boolean
        Return Me.IsNull(Me.tableGastoXMes.NombreColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreNull()
        Me(Me.tableGastoXMes.NombreColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsEneroNull() As Boolean
        Return Me.IsNull(Me.tableGastoXMes.EneroColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetEneroNull()
        Me(Me.tableGastoXMes.EneroColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsFebreroNull() As Boolean
        Return Me.IsNull(Me.tableGastoXMes.FebreroColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetFebreroNull()
        Me(Me.tableGastoXMes.FebreroColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsMarzoNull() As Boolean
        Return Me.IsNull(Me.tableGastoXMes.MarzoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetMarzoNull()
        Me(Me.tableGastoXMes.MarzoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsAbrilNull() As Boolean
        Return Me.IsNull(Me.tableGastoXMes.AbrilColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetAbrilNull()
        Me(Me.tableGastoXMes.AbrilColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsMayoNull() As Boolean
        Return Me.IsNull(Me.tableGastoXMes.MayoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetMayoNull()
        Me(Me.tableGastoXMes.MayoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsJunioNull() As Boolean
        Return Me.IsNull(Me.tableGastoXMes.JunioColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetJunioNull()
        Me(Me.tableGastoXMes.JunioColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsJulioNull() As Boolean
        Return Me.IsNull(Me.tableGastoXMes.JulioColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetJulioNull()
        Me(Me.tableGastoXMes.JulioColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsAgostoNull() As Boolean
        Return Me.IsNull(Me.tableGastoXMes.AgostoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetAgostoNull()
        Me(Me.tableGastoXMes.AgostoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsSetiembreNull() As Boolean
        Return Me.IsNull(Me.tableGastoXMes.SetiembreColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetSetiembreNull()
        Me(Me.tableGastoXMes.SetiembreColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsOctubreNull() As Boolean
        Return Me.IsNull(Me.tableGastoXMes.OctubreColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetOctubreNull()
        Me(Me.tableGastoXMes.OctubreColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNoviembreNull() As Boolean
        Return Me.IsNull(Me.tableGastoXMes.NoviembreColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNoviembreNull()
        Me(Me.tableGastoXMes.NoviembreColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsDiciembreNull() As Boolean
        Return Me.IsNull(Me.tableGastoXMes.DiciembreColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetDiciembreNull()
        Me(Me.tableGastoXMes.DiciembreColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsTotalNull() As Boolean
        Return Me.IsNull(Me.tableGastoXMes.TotalColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetTotalNull()
        Me(Me.tableGastoXMes.TotalColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigo1Null() As Boolean
        Return Me.IsNull(Me.tableGastoXMes.Codigo1Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigo1Null()
        Me(Me.tableGastoXMes.Codigo1Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombre1Null() As Boolean
        Return Me.IsNull(Me.tableGastoXMes.Nombre1Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombre1Null()
        Me(Me.tableGastoXMes.Nombre1Column) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class GananciaPerdidaTotalRow
    Inherits Global.System.Data.DataRow

    Private tableGananciaPerdidaTotal As GananciaPerdidaTotalDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tableGananciaPerdidaTotal = CType(Me.Table, GananciaPerdidaTotalDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Codigo() As String
        Get
            Try
                Return CType(Me(Me.tableGananciaPerdidaTotal.CodigoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Codigo' de la tabla 'GananciaPerdidaTotal' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGananciaPerdidaTotal.CodigoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Nombre() As String
        Get
            Try
                Return CType(Me(Me.tableGananciaPerdidaTotal.NombreColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'GananciaPerdidaTotal' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGananciaPerdidaTotal.NombreColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property MontoMes() As String
        Get
            Try
                Return CType(Me(Me.tableGananciaPerdidaTotal.MontoMesColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MontoMes' de la tabla 'GananciaPerdidaTotal' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGananciaPerdidaTotal.MontoMesColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property MontoAcumulado() As String
        Get
            Try
                Return CType(Me(Me.tableGananciaPerdidaTotal.MontoAcumuladoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MontoAcumulado' de la tabla 'GananciaPerdidaTotal' es DBN" &
                            "ull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGananciaPerdidaTotal.MontoAcumuladoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Codigo1() As String
        Get
            Try
                Return CType(Me(Me.tableGananciaPerdidaTotal.Codigo1Column), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Codigo1' de la tabla 'GananciaPerdidaTotal' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGananciaPerdidaTotal.Codigo1Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Nombre1() As String
        Get
            Try
                Return CType(Me(Me.tableGananciaPerdidaTotal.Nombre1Column), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre1' de la tabla 'GananciaPerdidaTotal' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGananciaPerdidaTotal.Nombre1Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property MontoMes1() As String
        Get
            Try
                Return CType(Me(Me.tableGananciaPerdidaTotal.MontoMes1Column), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MontoMes1' de la tabla 'GananciaPerdidaTotal' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableGananciaPerdidaTotal.MontoMes1Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property MontoAcumulado1() As String
        Get
            Try
                Return CType(Me(Me.tableGananciaPerdidaTotal.MontoAcumulado1Column), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MontoAcumulado1' de la tabla 'GananciaPerdidaTotal' es DB" &
                            "Null.", e)
            End Try
        End Get
        Set
            Me(Me.tableGananciaPerdidaTotal.MontoAcumulado1Column) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigoNull() As Boolean
        Return Me.IsNull(Me.tableGananciaPerdidaTotal.CodigoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigoNull()
        Me(Me.tableGananciaPerdidaTotal.CodigoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombreNull() As Boolean
        Return Me.IsNull(Me.tableGananciaPerdidaTotal.NombreColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombreNull()
        Me(Me.tableGananciaPerdidaTotal.NombreColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsMontoMesNull() As Boolean
        Return Me.IsNull(Me.tableGananciaPerdidaTotal.MontoMesColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetMontoMesNull()
        Me(Me.tableGananciaPerdidaTotal.MontoMesColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsMontoAcumuladoNull() As Boolean
        Return Me.IsNull(Me.tableGananciaPerdidaTotal.MontoAcumuladoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetMontoAcumuladoNull()
        Me(Me.tableGananciaPerdidaTotal.MontoAcumuladoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCodigo1Null() As Boolean
        Return Me.IsNull(Me.tableGananciaPerdidaTotal.Codigo1Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCodigo1Null()
        Me(Me.tableGananciaPerdidaTotal.Codigo1Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNombre1Null() As Boolean
        Return Me.IsNull(Me.tableGananciaPerdidaTotal.Nombre1Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNombre1Null()
        Me(Me.tableGananciaPerdidaTotal.Nombre1Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsMontoMes1Null() As Boolean
        Return Me.IsNull(Me.tableGananciaPerdidaTotal.MontoMes1Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetMontoMes1Null()
        Me(Me.tableGananciaPerdidaTotal.MontoMes1Column) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsMontoAcumulado1Null() As Boolean
        Return Me.IsNull(Me.tableGananciaPerdidaTotal.MontoAcumulado1Column)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetMontoAcumulado1Null()
        Me(Me.tableGananciaPerdidaTotal.MontoAcumulado1Column) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Represents strongly named DataRow class.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>
Partial Public Class DaoResumenDetalleRow
    Inherits Global.System.Data.DataRow

    Private tableDaoResumenDetalle As DaoResumenDetalleDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
        MyBase.New(rb)
        Me.tableDaoResumenDetalle = CType(Me.Table, DaoResumenDetalleDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Ruc() As String
        Get
            Try
                Return CType(Me(Me.tableDaoResumenDetalle.RucColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ruc' de la tabla 'DaoResumenDetalle' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDaoResumenDetalle.RucColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property DescripcionAuxiliar() As String
        Get
            Try
                Return CType(Me(Me.tableDaoResumenDetalle.DescripcionAuxiliarColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DescripcionAuxiliar' de la tabla 'DaoResumenDetalle' es D" &
                            "BNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDaoResumenDetalle.DescripcionAuxiliarColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ImporteDolares() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDaoResumenDetalle.ImporteDolaresColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImporteDolares' de la tabla 'DaoResumenDetalle' es DBNull" &
                            ".", e)
            End Try
        End Get
        Set
            Me(Me.tableDaoResumenDetalle.ImporteDolaresColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ValorVenta() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDaoResumenDetalle.ValorVentaColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ValorVenta' de la tabla 'DaoResumenDetalle' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDaoResumenDetalle.ValorVentaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ValorIgv() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDaoResumenDetalle.ValorIgvColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ValorIgv' de la tabla 'DaoResumenDetalle' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDaoResumenDetalle.ValorIgvColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property ValorExonerado() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDaoResumenDetalle.ValorExoneradoColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ValorExonerado' de la tabla 'DaoResumenDetalle' es DBNull" &
                            ".", e)
            End Try
        End Get
        Set
            Me(Me.tableDaoResumenDetalle.ValorExoneradoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property PrecioVenta() As Decimal
        Get
            Try
                Return CType(Me(Me.tableDaoResumenDetalle.PrecioVentaColumn), Decimal)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PrecioVenta' de la tabla 'DaoResumenDetalle' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDaoResumenDetalle.PrecioVentaColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Origen() As String
        Get
            Try
                Return CType(Me(Me.tableDaoResumenDetalle.OrigenColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Origen' de la tabla 'DaoResumenDetalle' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDaoResumenDetalle.OrigenColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property File() As String
        Get
            Try
                Return CType(Me(Me.tableDaoResumenDetalle.FileColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'File' de la tabla 'DaoResumenDetalle' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDaoResumenDetalle.FileColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NumeroVoucher() As String
        Get
            Try
                Return CType(Me(Me.tableDaoResumenDetalle.NumeroVoucherColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroVoucher' de la tabla 'DaoResumenDetalle' es DBNull." &
                            "", e)
            End Try
        End Get
        Set
            Me(Me.tableDaoResumenDetalle.NumeroVoucherColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property FechaVoucher() As String
        Get
            Try
                Return CType(Me(Me.tableDaoResumenDetalle.FechaVoucherColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaVoucher' de la tabla 'DaoResumenDetalle' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDaoResumenDetalle.FechaVoucherColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property TipoDocumento() As String
        Get
            Try
                Return CType(Me(Me.tableDaoResumenDetalle.TipoDocumentoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoDocumento' de la tabla 'DaoResumenDetalle' es DBNull." &
                            "", e)
            End Try
        End Get
        Set
            Me(Me.tableDaoResumenDetalle.TipoDocumentoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property SerieDocumento() As String
        Get
            Try
                Return CType(Me(Me.tableDaoResumenDetalle.SerieDocumentoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SerieDocumento' de la tabla 'DaoResumenDetalle' es DBNull" &
                            ".", e)
            End Try
        End Get
        Set
            Me(Me.tableDaoResumenDetalle.SerieDocumentoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property NumeroDocuemnto() As String
        Get
            Try
                Return CType(Me(Me.tableDaoResumenDetalle.NumeroDocuemntoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumeroDocuemnto' de la tabla 'DaoResumenDetalle' es DBNul" &
                            "l.", e)
            End Try
        End Get
        Set
            Me(Me.tableDaoResumenDetalle.NumeroDocuemntoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property FechaDocumento() As String
        Get
            Try
                Return CType(Me(Me.tableDaoResumenDetalle.FechaDocumentoColumn), String)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaDocumento' de la tabla 'DaoResumenDetalle' es DBNull" &
                            ".", e)
            End Try
        End Get
        Set
            Me(Me.tableDaoResumenDetalle.FechaDocumentoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Property Correlativo() As Integer
        Get
            Try
                Return CType(Me(Me.tableDaoResumenDetalle.CorrelativoColumn), Integer)
            Catch e As Global.System.InvalidCastException
                Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Correlativo' de la tabla 'DaoResumenDetalle' es DBNull.", e)
            End Try
        End Get
        Set
            Me(Me.tableDaoResumenDetalle.CorrelativoColumn) = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsRucNull() As Boolean
        Return Me.IsNull(Me.tableDaoResumenDetalle.RucColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetRucNull()
        Me(Me.tableDaoResumenDetalle.RucColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsDescripcionAuxiliarNull() As Boolean
        Return Me.IsNull(Me.tableDaoResumenDetalle.DescripcionAuxiliarColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetDescripcionAuxiliarNull()
        Me(Me.tableDaoResumenDetalle.DescripcionAuxiliarColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsImporteDolaresNull() As Boolean
        Return Me.IsNull(Me.tableDaoResumenDetalle.ImporteDolaresColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetImporteDolaresNull()
        Me(Me.tableDaoResumenDetalle.ImporteDolaresColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsValorVentaNull() As Boolean
        Return Me.IsNull(Me.tableDaoResumenDetalle.ValorVentaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetValorVentaNull()
        Me(Me.tableDaoResumenDetalle.ValorVentaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsValorIgvNull() As Boolean
        Return Me.IsNull(Me.tableDaoResumenDetalle.ValorIgvColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetValorIgvNull()
        Me(Me.tableDaoResumenDetalle.ValorIgvColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsValorExoneradoNull() As Boolean
        Return Me.IsNull(Me.tableDaoResumenDetalle.ValorExoneradoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetValorExoneradoNull()
        Me(Me.tableDaoResumenDetalle.ValorExoneradoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsPrecioVentaNull() As Boolean
        Return Me.IsNull(Me.tableDaoResumenDetalle.PrecioVentaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetPrecioVentaNull()
        Me(Me.tableDaoResumenDetalle.PrecioVentaColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsOrigenNull() As Boolean
        Return Me.IsNull(Me.tableDaoResumenDetalle.OrigenColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetOrigenNull()
        Me(Me.tableDaoResumenDetalle.OrigenColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsFileNull() As Boolean
        Return Me.IsNull(Me.tableDaoResumenDetalle.FileColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetFileNull()
        Me(Me.tableDaoResumenDetalle.FileColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNumeroVoucherNull() As Boolean
        Return Me.IsNull(Me.tableDaoResumenDetalle.NumeroVoucherColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNumeroVoucherNull()
        Me(Me.tableDaoResumenDetalle.NumeroVoucherColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsFechaVoucherNull() As Boolean
        Return Me.IsNull(Me.tableDaoResumenDetalle.FechaVoucherColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetFechaVoucherNull()
        Me(Me.tableDaoResumenDetalle.FechaVoucherColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsTipoDocumentoNull() As Boolean
        Return Me.IsNull(Me.tableDaoResumenDetalle.TipoDocumentoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetTipoDocumentoNull()
        Me(Me.tableDaoResumenDetalle.TipoDocumentoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsSerieDocumentoNull() As Boolean
        Return Me.IsNull(Me.tableDaoResumenDetalle.SerieDocumentoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetSerieDocumentoNull()
        Me(Me.tableDaoResumenDetalle.SerieDocumentoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsNumeroDocuemntoNull() As Boolean
        Return Me.IsNull(Me.tableDaoResumenDetalle.NumeroDocuemntoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetNumeroDocuemntoNull()
        Me(Me.tableDaoResumenDetalle.NumeroDocuemntoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsFechaDocumentoNull() As Boolean
        Return Me.IsNull(Me.tableDaoResumenDetalle.FechaDocumentoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetFechaDocumentoNull()
        Me(Me.tableDaoResumenDetalle.FechaDocumentoColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Function IsCorrelativoNull() As Boolean
        Return Me.IsNull(Me.tableDaoResumenDetalle.CorrelativoColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
    Public Sub SetCorrelativoNull()
        Me(Me.tableDaoResumenDetalle.CorrelativoColumn) = Global.System.Convert.DBNull
    End Sub
End Class

'''<summary>
'''Row event argument class
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FiltroTablaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FiltroTablaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FiltroTablaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FiltroTablaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class UsuarioRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As UsuarioRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As UsuarioRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As UsuarioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AuxiliarRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AuxiliarRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AuxiliarRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AuxiliarRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DiasPorMesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DiasPorMesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DiasPorMesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DiasPorMesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TipoCambioRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TipoCambioRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TipoCambioRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TipoCambioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ReportePersonalActivoHorasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ReportePersonalActivoHorasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ReportePersonalActivoHorasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ReportePersonalActivoHorasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RegContabRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RegContabRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RegContabRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RegContabRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ConceptosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ConceptosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ConceptosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ConceptosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PerfilRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PerfilRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PerfilRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PerfilRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CodigoInexistenteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CodigoInexistenteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CodigoInexistenteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CodigoInexistenteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PlanillaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PlanillaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PlanillaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PlanillaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VistaSaldosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VistaSaldosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VistaSaldosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VistaSaldosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SaldosADigitosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SaldosADigitosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SaldosADigitosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SaldosADigitosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MovimientoDetalleRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MovimientoDetalleRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MovimientoDetalleRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MovimientoDetalleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BalancesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BalancesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BalancesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BalancesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AnexosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AnexosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AnexosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AnexosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PcgeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PcgeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PcgeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PcgeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DiarioSimplificadoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DiarioSimplificadoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DiarioSimplificadoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DiarioSimplificadoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FormatoContableRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FormatoContableRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FormatoContableRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FormatoContableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BalanceGeneralRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BalanceGeneralRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BalanceGeneralRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BalanceGeneralRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class GananciaPerdidaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As GananciaPerdidaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As GananciaPerdidaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As GananciaPerdidaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class GananciaPerdida1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As GananciaPerdida1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As GananciaPerdida1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As GananciaPerdida1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SaldoBancoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SaldoBancoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SaldoBancoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SaldoBancoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FlujoCajaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FlujoCajaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FlujoCajaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FlujoCajaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class GastoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As GastoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As GastoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As GastoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DiferenciaCambioRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DiferenciaCambioRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DiferenciaCambioRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DiferenciaCambioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class GastoXMesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As GastoXMesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As GastoXMesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As GastoXMesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class GananciaPerdidaTotalRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As GananciaPerdidaTotalRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As GananciaPerdidaTotalRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As GananciaPerdidaTotalRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DaoResumenDetalleRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DaoResumenDetalleRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DaoResumenDetalleRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DaoResumenDetalleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
